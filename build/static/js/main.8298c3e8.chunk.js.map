{"version":3,"sources":["examples/Advanced.js","examples/Simple.js","App.js","serviceWorker.js","index.js"],"names":["console","log","Advanced","queried","count","savedforlater","Simple","temparray","useState","name","imageurl","price_saved","description","fineprint","url","arrayofplaces","setarray","useEffect","fetch","then","response","json","result","i","deals","length","push","deal","title","image_url","discount_amount","lastDirection","setLastDirection","swipedRight","swipes","className","href","rel","map","place","key","onSwipe","dir","direction","nameToDelete","descriptiona","fineprinta","urla","alert","savings","highest","Number","MIN_VALUE","ans","modal","document","getElementById","textContent","style","display","setAttribute","span","getElementsByClassName","onclick","swiped","onCardLeftScreen","backgroundImage","onClick","clicked","App","id","class","for","type","required","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SA0BAA,QAAQC,IAAI,eA8DGC,ICnFXC,GAAU,EAwBVC,EAAQ,EACRC,EAAgB,GAwNLC,MAvNf,WACEN,QAAQC,IAAI,UACZ,IAAIM,EAAY,GAFA,EAGkBC,mBAAS,CACzC,CACEC,KAAM,uBACNC,SAAU,GACVC,YAAa,EACbC,YAAa,GACbC,UAAW,GACXC,IAAK,MAVO,mBAGTC,EAHS,KAGMC,EAHN,KAahBC,qBAAU,WACHd,GACHe,MACE,0GAECC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUG,GACdtB,QAAQC,IAAIqB,GACZnB,GAAU,EACV,IAAK,IAAIoB,EAAI,EAAGA,EAAID,EAAOE,MAAMC,OAAQF,IACvChB,EAAUmB,KAAK,CACbjB,KAAMa,EAAOE,MAAMD,GAAGI,KAAKC,MAC3BlB,SAAUY,EAAOE,MAAMD,GAAGI,KAAKE,UAC/BlB,YAAaW,EAAOE,MAAMD,GAAGI,KAAKG,gBAClClB,YAAaU,EAAOE,MAAMD,GAAGI,KAAKf,YAClCC,UAAWS,EAAOE,MAAMD,GAAGI,KAAKd,UAChCC,IAAKQ,EAAOE,MAAMD,GAAGI,KAAKb,MAG9BE,EAAST,SAlCD,MAuC0BC,qBAvC1B,mBAuCTuB,EAvCS,KAuCMC,EAvCN,KAwCZC,EAAc,GAEdC,EAAS,EA6Gb,OACE,yBAAKC,UAAU,YACb,0BACEC,KAAK,8DACLC,IAAI,eAEN,0BACED,KAAK,8DACLC,IAAI,eAEN,0BACED,KAAK,oEACLC,IAAI,eAGN,+DACA,yBAAKF,UAAU,iBACZpB,EAAcuB,KAAI,SAACC,GAAD,OACjB,kBAAC,IAAD,CACEJ,UAAU,QACVK,IAAKD,EAAM9B,KACXgC,QAEE,SAACC,GAAD,OA9GG,SACbC,EACAC,EACAjC,EACAkC,EACAC,EACAC,GAgBA,GAdGhC,EAAcU,QAAUrB,GAEzB4C,MAAM,8BAES,OAAdL,GAAoC,SAAdA,GAErBtC,EAAcqB,KAAK,CACXjB,KAAMmC,EACNhC,YAAaiC,EACbhC,UAAWiC,EACXhC,IAAKiC,IAIC,UAAdJ,IACFT,IACAD,EAAYP,KAAK,CACfjB,KAAMmC,EACNK,QAAStC,EACTC,YAAaiC,EACbhC,UAAWiC,EACXhC,IAAKiC,IAIP/C,QAAQC,IAAIgC,GAEG,IAAXC,GAAc,CAKhB,IAHA,IAAIgB,EAAUC,OAAOC,UACjBC,EAAM,OAED9B,EAAI,EAAGA,EAAIU,EAAYR,OAAQF,IAIlCU,EAAYV,GAAG0B,QAAUC,IAG3BA,EAAUjB,EAAYV,GAAG0B,QACzBI,EAAMpB,EAAYV,IAStB,IAAI+B,EAAQC,SAASC,eAAe,WACpBD,SAASC,eAAe,QACxCD,SAASC,eAAe,UAAUC,YAAc,0BAChDF,SAASC,eAAe,QAAQC,YAAcJ,EAAI5C,KAClD8C,SAASC,eAAe,eAAeC,YAAcJ,EAAIzC,YACzD2C,SAASC,eAAe,aAAaC,YAAcJ,EAAIxC,UACvD0C,SAASC,eAAe,OAAOE,MAAMC,QAAU,QAC/CJ,SAASC,eAAe,OAAOC,YAAc,8BAC7CF,SAASC,eAAe,OAAOI,aAAa,OAAQP,EAAIvC,KACxDyC,SAASC,eAAe,OAAOI,aAAa,SAAU,UAEtD,IAAIC,EAAON,SAASO,uBAAuB,SAAS,GACpDR,EAAMI,MAAMC,QAAU,QAEtBE,EAAKE,QAAU,WACbR,SAASC,eAAe,OAAOE,MAAMC,QAAU,OAC/CL,EAAMI,MAAMC,QAAU,OAClBzB,EAAS,GAInBlC,QAAQC,IAAI,aAAe2C,GAC3BZ,EAAiBW,GACjBvC,IA+BU4D,CAEEtB,EACAH,EAAM9B,KACN8B,EAAM5B,YACN4B,EAAM3B,YACN2B,EAAM1B,UACN0B,EAAMzB,MAGVmD,iBAAkB,kBAtCRxD,EAsCyB8B,EAAM9B,UArCjDT,QAAQC,IAAIQ,EAAO,qBADF,IAACA,IAwCV,yBACEiD,MAAO,CAAEQ,gBAAiB,OAAS3B,EAAMV,UAAY,KACrDM,UAAU,QAEV,4BAAKI,EAAM9B,MACL,4BAAQ0D,QAEA,kBAtJV,SACdvC,EACAhB,EACAC,GAEE,IAAIyC,EAAQC,SAASC,eAAe,WACpBD,SAASC,eAAe,QACxCD,SAASC,eAAe,UAAUC,YAAc,mBAChDF,SAASC,eAAe,QAAQC,YAAc7B,EAC9C2B,SAASC,eAAe,eAAeC,YAAc7C,EACrD2C,SAASC,eAAe,aAAaC,YAAc5C,EAEnD,IAAIgD,EAAON,SAASO,uBAAuB,SAAS,GACpDR,EAAMI,MAAMC,QAAU,QAEtBE,EAAKE,QAAU,WACXT,EAAMI,MAAMC,QAAU,QAsIES,CAEE7B,EAAM9B,KACN8B,EAAM3B,YACN2B,EAAM1B,aANtB,mBAcbkB,EACC,wBAAII,UAAU,YAAd,cAAqCJ,GAErC,wBAAII,UAAU,eC5MPkC,MA3Bf,WACE,OACE,yBAAKlC,UAAU,OACX,kBAAC,EAAD,MACF,yBAAKA,UAAU,OACT,yBAAKmC,GAAG,gBAAgBC,MAAM,SAC1B,yBAAKD,GAAK,WAAWC,MAAM,iBACzB,0BAAMA,MAAM,SAAZ,QACA,2BAAOC,IAAI,6BAAX,0BACA,2BAAOC,KAAK,SAASF,MAAM,eAAeG,SAAS,OAAOJ,GAAG,SAASK,YAAY,wBAGxF,yBAAKL,GAAG,UAAUC,MAAM,SACpB,yBAAKD,GAAK,eAAeC,MAAM,iBAC7B,0BAAMA,MAAM,SAAZ,QACI,wBAAID,GAAK,UAAT,QACA,uBAAGA,GAAG,QAAN,6BACA,uBAAGA,GAAG,gBACN,uBAAGA,GAAG,cACN,uBAAGA,GAAG,MAAMlC,KAAK,UChBnBwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAASC,eAAe,SD2H3C,kBAAmB2B,WACrBA,UAAUC,cAAcC,MAAMlE,MAAK,SAAAmE,GACjCA,EAAaC,kB","file":"static/js/main.8298c3e8.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react'\n// import TinderCard from '../react-tinder-card/index'\nimport TinderCard from 'react-tinder-card'\n\nconst db = [\n  {\n    name: 'Richard Hendricks',\n    url: './img/richard.jpg'\n  },\n  {\n    name: 'Erlich Bachman',\n    url: './img/erlich.jpg'\n  },\n  {\n    name: 'Monica Hall',\n    url: './img/monica.jpg'\n  },\n  {\n    name: 'Jared Dunn',\n    url: './img/jared.jpg'\n  },\n  {\n    name: 'Dinesh Chugtai',\n    url: './img/dinesh.jpg'\n  }\n]\nconsole.log('hello world')\nconst alreadyRemoved = []\nlet charactersState = db // This fixes issues with updating characters state forcing it to use the current state and not the state that was active when the card was created.\n\nfunction Advanced () {\n  const [characters, setCharacters] = useState(db)\n  const [lastDirection, setLastDirection] = useState()\n\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => React.createRef()), [])\n\n  const swiped = (direction, nameToDelete) => {\n    console.log('Tested: ' + nameToDelete)\n    setLastDirection(direction)\n    alreadyRemoved.push(nameToDelete)\n  }\n\n  const outOfFrame = (name) => {\n    console.log(name + ' left the screen!')\n    charactersState = charactersState.filter(character => character.name !== name)\n    setCharacters(charactersState)\n  }\n\n  var swipedRight = []\n  const swipe = (dir) => {\n    console.log(dir)\n    const cardsLeft = characters.filter(person => !alreadyRemoved.includes(person.name))\n    if (cardsLeft.length) {\n      if(dir = 'right'){\n        // swipedRight.push(person.name)\n        var length = swipedRight.length\n        console.log(swipedRight)\n      }\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].name // Find the card object to be removed\n      const index = db.map(person => person.name).indexOf(toBeRemoved) // Find the index of which to make the reference to\n      alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n      childRefs[index].current.swipe(dir) // Swipe the card!\n    }\n  }\n\n  return (\n    <div>\n      <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n      <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />\n      <h1>React Tinder Card</h1>\n      <div className='cardContainer'>\n        {characters.map((character, index) =>\n          <TinderCard ref={childRefs[index]} className='swipe' key={character.name} onSwipe={(dir) => swiped(dir, character.name)} onCardLeftScreen={() => outOfFrame(character.name)}>\n            <div style={{ backgroundImage: 'url(' + character.url + ')' }} className='card'>\n              <h3>{character.name}</h3>\n            </div>\n          </TinderCard>\n        )}\n      </div>\n      <div className='buttons'>\n        <button onClick={() => swipe('left')}>Swipe left!</button>\n        <button onClick={() => swipe('right')}>Swipe right!</button>\n      </div>\n      {lastDirection ? <h2 key={lastDirection} className='infoText'>You swiped {lastDirection}</h2> : <h2 className='infoText'>Swipe a card or press a button to get started!</h2>}\n    </div>\n  )\n}\n\nexport default Advanced","import React, { useState, useEffect } from \"react\";\n// import TinderCard from '../react-tinder-card/index'\nimport TinderCard from \"react-tinder-card\";\nimport ReactDOM from \"react-dom\";\n\nvar queried = false;\n\n// function findbestdeal(placearray){\n//   var highest = Number.MIN_VALUE;\n//   var rest = 'test';\n\n//   for (var place in placearray){\n//     console.log(\"entering function\")\n//     console.log(place.savings)\n//     console.log(highest)\n//     if(place.savings>highest){\n//       console.log(\"entering if\")\n//       console.log(place.savings)\n//       highest = place.savings\n//       rest = place.name\n//       console.log(\"printing rest\")\n//       console.log(rest)\n//       console.log(\"printing place\")\n//       console.log(place.name)\n//     }\n//   }\n//   return rest\n// }\n\nvar count = 0;\nvar savedforlater = []\nfunction Simple() {\n  console.log(\"called\");\n  var temparray = [];\n  const [arrayofplaces, setarray] = useState([\n    {\n      name: \"Finding you deals...\",\n      imageurl: \"\",\n      price_saved: 0,\n      description: \"\",\n      fineprint: \"\",\n      url: \"\",\n    },\n  ]);\n  useEffect(() => {\n    if (!queried) {\n      fetch(\n        \"https://api.discountapi.com/v2/deals?category_slugs=restaurants&location=arlington,va&api_key=KiyYblAt\"\n      )\n        .then(function (response) {\n          return response.json();\n        })\n        .then(function (result) {\n          console.log(result);\n          queried = true;\n          for (var i = 0; i < result.deals.length; i++) {\n            temparray.push({\n              name: result.deals[i].deal.title,\n              imageurl: result.deals[i].deal.image_url,\n              price_saved: result.deals[i].deal.discount_amount,\n              description: result.deals[i].deal.description,\n              fineprint: result.deals[i].deal.fineprint,\n              url: result.deals[i].deal.url,\n            });\n          }\n          setarray(temparray);\n        });\n    }\n  });\n\n  const [lastDirection, setLastDirection] = useState();\n  var swipedRight = [];\n  var price_saved_vals = [];\n  var swipes = 0;\n    \n  const clicked = (\n    title,\n    description,\n    fineprint\n  ) => {\n      var modal = document.getElementById(\"myModal\");\n      var modaltext = document.getElementById(\"deal\");\n      document.getElementById(\"banner\").textContent = \"More Information\"\n      document.getElementById(\"deal\").textContent = title;\n      document.getElementById(\"description\").textContent = description;\n      document.getElementById(\"finePrint\").textContent = fineprint;\n      // Get the <span> element that closes the modal\n      var span = document.getElementsByClassName(\"close\")[0];\n      modal.style.display = \"block\";\n      // When the user clicks on <span> (x), close the modal\n      span.onclick = function () {\n          modal.style.display = \"none\";\n      };\n  };\n    \n  const swiped = (\n    direction,\n    nameToDelete,\n    price_saved,\n    descriptiona,\n    fineprinta,\n    urla\n  ) => {\n    if(arrayofplaces.length == count)\n    {\n      alert(\"You're all out of cards :(\");\n    }\n    if(direction === \"up\" || direction === \"down\")\n    {\n        savedforlater.push({\n                name: nameToDelete,\n                description: descriptiona,\n                fineprint: fineprinta,\n                url: urla\n        \n        })\n    }\n    if (direction === \"right\") {\n      swipes++;\n      swipedRight.push({\n        name: nameToDelete,\n        savings: price_saved,\n        description: descriptiona,\n        fineprint: fineprinta,\n        url: urla,\n      });\n      // price_saved_vals.push(price_saved)\n      // var length = swipedRight.length\n      console.log(swipedRight);\n      // console.log(price_saved_vals)\n      if (swipes === 4) {\n        // var ans = findbestdeal(swipedRight)\n        var highest = Number.MIN_VALUE;\n        var ans = \"test\";\n\n        for (var i = 0; i < swipedRight.length; i++) {\n          // console.log(\"entering function\")\n          // console.log(swipedRight[i].savings)\n\n          if (swipedRight[i].savings > highest) {\n            // console.log(\"entering if\")\n            // console.log(swipedRight[i].savings)\n            highest = swipedRight[i].savings;\n            ans = swipedRight[i];\n            // console.log(\"printing rest\")\n            // console.log(ans)\n            // console.log(\"printing place\")\n            // console.log(swipedRight[i].name)\n          }\n        }\n        // console.log(typeof(ans))\n        // console.log(ans)\n        var modal = document.getElementById(\"myModal\");\n        var modaltext = document.getElementById(\"deal\");\n        document.getElementById(\"banner\").textContent = \"HERE IS YOUR DEAL WOOOO\"\n        document.getElementById(\"deal\").textContent = ans.name;\n        document.getElementById(\"description\").textContent = ans.description;\n        document.getElementById(\"finePrint\").textContent = ans.fineprint;\n        document.getElementById(\"url\").style.display = \"block\"\n        document.getElementById(\"url\").textContent = \"Click here for link to deal\";\n        document.getElementById(\"url\").setAttribute(\"href\", ans.url);\n        document.getElementById(\"url\").setAttribute(\"target\", \"_blank\");\n        // Get the <span> element that closes the modal\n        var span = document.getElementsByClassName(\"close\")[0];\n        modal.style.display = \"block\";\n        // When the user clicks on <span> (x), close the modal\n        span.onclick = function () {\n          document.getElementById(\"url\").style.display = \"none\"\n          modal.style.display = \"none\";\n              swipes = 0;\n        };\n      }\n    }\n    console.log(\"removing: \" + nameToDelete);\n    setLastDirection(direction);\n    count++;\n  };\n\n  const outOfFrame = (name) => {\n    console.log(name + \" left the screen!\");\n  };\n\n  return (\n    <div className=\"readable\">\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Damion&display=swap\"\n        rel=\"stylesheet\"\n      />\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Alatsi&display=swap\"\n        rel=\"stylesheet\"\n      />\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Staatliches&display=swap\"\n        rel=\"stylesheet\"\n      />\n\n      <h1>Swipe right on your fave deals!</h1>\n      <div className=\"cardContainer\">\n        {arrayofplaces.map((place) => (\n          <TinderCard\n            className=\"swipe\"\n            key={place.name}\n            onSwipe=\n            {\n              (dir) =>\n              swiped\n              (\n                dir,\n                place.name,\n                place.price_saved,\n                place.description,\n                place.fineprint,\n                place.url\n              )\n            }\n            onCardLeftScreen={() => outOfFrame(place.name)}\n          >\n            <div\n              style={{ backgroundImage: \"url(\" + place.image_url + \")\" }}\n              className=\"card\"\n            >\n              <h2>{place.name}</h2>\n                    <button onClick=\n                        {\n                            () => clicked\n                                (\n                                    place.name,\n                                    place.description,\n                                    place.fineprint\n                                )\n                        }> Details </button>\n\n            </div>\n          </TinderCard>\n        ))}\n      </div>\n      {lastDirection ? (\n        <h2 className=\"infoText\">You swiped {lastDirection}</h2>\n      ) : (\n        <h2 className=\"infoText\" />\n      )}\n    </div>\n  );\n}\n\nexport default Simple;\n","import React, { useState } from 'react'\nimport './App.css'\nimport Switch from 'react-ios-switch'\n\nimport Advanced from './examples/Advanced'\nimport Simple from './examples/Simple'\n\n\n\nfunction App () {\n  return (\n    <div className='app'>\n        <Simple/>\n      <div className='row'>\n            <div id=\"locationModal\" class=\"modal\">\n                <div id = \"locModal\" class=\"modal-content\">\n                  <span class=\"close\">&times;</span>\n                  <label for=\"exampleFormControlSelect1\"> Enter a keyword: &nbsp;</label>\n                  <input type=\"Search\" class=\"form-control\" required=\"true\" id=\"Search\" placeholder=\"Covid-19, Dogs...\"></input>\n                </div>\n            </div>\n            <div id=\"myModal\" class=\"modal\">\n                <div id = \"modalcontent\" class=\"modal-content\">\n                  <span class=\"close\">&times;</span>\n                      <h1 id = \"banner\"> \"\" </h1>\n                      <p id=\"deal\" >NEED TO ADD THE DEAL HERE</p>\n                      <p id=\"description\"></p>\n                      <p id=\"finePrint\"></p>\n                      <a id=\"url\" href=\"\"></a>\n                </div>\n            </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}