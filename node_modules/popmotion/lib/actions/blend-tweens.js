'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _tween = require('./tween');

var _tween2 = _interopRequireDefault(_tween);

var _easing = require('../inc/easing');

var _calc = require('../inc/calc');

var _transformers = require('../inc/transformers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var clampProgress = (0, _transformers.clamp)(0, 1);

function calcValueAtTime(from, to, duration, elapsed, ease) {
  var progressAtTime = ease(clampProgress((0, _calc.getProgressFromValue)(0, duration, elapsed)));
  return (0, _calc.getValueFromProgress)(from, to, progressAtTime);
}

exports.default = function (_ref) {
  var from = _ref.from,
      to = _ref.to,
      onUpdate = _ref.onUpdate,
      _ref$accuracy = _ref.accuracy,
      accuracy = _ref$accuracy === undefined ? 60 : _ref$accuracy,
      props = _objectWithoutProperties(_ref, ['from', 'to', 'onUpdate', 'accuracy']);

  // Get tween properties
  var a = from;
  var b = to;
  var aCurrent = a.get();
  var aDuration = a.getProp('duration');
  var bDuration = b.getProp('duration');
  var aEase = a.getProp('ease');
  var bEase = b.getProp('ease');
  var aFrom = a.getProp('from');
  var bFrom = b.getProp('from');
  var aTo = a.getProp('to');
  var bTo = b.getProp('to');

  // Analyse tweens
  var overlapDuration = Math.min(aDuration - a.getElapsed(), bDuration);
  var bValueAtTweenOverlapComplete = calcValueAtTime(bFrom, bTo, bDuration, overlapDuration, bEase);
  var bStartsHigherThanA = bFrom > aCurrent;
  var bEndsHigherThanA = bValueAtTweenOverlapComplete > aTo;

  // Blend points are defined as [t = time, v = valueAtTime]
  // P1
  // The start of the tween blend
  var P1 = aCurrent;
  var blendPoints = [P1];

  // Find P2
  // The possible intersection point between the two tweens
  var tweensIntersect = bStartsHigherThanA !== bEndsHigherThanA;
  if (tweensIntersect) {
    var timestep = overlapDuration / accuracy;

    for (var i = 0; i < accuracy; i++) {
      var runningTime = i * timestep;

      var aValueAtTime = calcValueAtTime(aFrom, aTo, aDuration, a.elapsed + runningTime, aEase);
      var bValueAtTime = calcValueAtTime(bFrom, bTo, bDuration, b.elapsed + runningTime, bEase);

      var hasIntersected = bStartsHigherThanA && aValueAtTime > bValueAtTime || !bStartsHigherThanA && aValueAtTime < bValueAtTime;

      if (hasIntersected) {
        var P2 = bValueAtTime;
        blendPoints.push(P2);
        break;
      }
    }
  }

  // P3
  // The points the two tweens stop overlapping
  var P3 = bValueAtTweenOverlapComplete;
  blendPoints.push(P3);

  // Push the end state of b tween as final control point
  var P4 = bTo;
  blendPoints.push(P4);

  return (0, _tween2.default)(_extends({}, props, {
    duration: bDuration,
    ease: _easing.linear,
    onUpdate: (0, _transformers.flow)((0, _transformers.bezier)(blendPoints), onUpdate)
  }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpb25zL2JsZW5kLXR3ZWVucy5qcyJdLCJuYW1lcyI6WyJjbGFtcFByb2dyZXNzIiwiY2FsY1ZhbHVlQXRUaW1lIiwiZnJvbSIsInRvIiwiZHVyYXRpb24iLCJlbGFwc2VkIiwiZWFzZSIsInByb2dyZXNzQXRUaW1lIiwib25VcGRhdGUiLCJhY2N1cmFjeSIsInByb3BzIiwiYSIsImIiLCJhQ3VycmVudCIsImdldCIsImFEdXJhdGlvbiIsImdldFByb3AiLCJiRHVyYXRpb24iLCJhRWFzZSIsImJFYXNlIiwiYUZyb20iLCJiRnJvbSIsImFUbyIsImJUbyIsIm92ZXJsYXBEdXJhdGlvbiIsIk1hdGgiLCJtaW4iLCJnZXRFbGFwc2VkIiwiYlZhbHVlQXRUd2Vlbk92ZXJsYXBDb21wbGV0ZSIsImJTdGFydHNIaWdoZXJUaGFuQSIsImJFbmRzSGlnaGVyVGhhbkEiLCJQMSIsImJsZW5kUG9pbnRzIiwidHdlZW5zSW50ZXJzZWN0IiwidGltZXN0ZXAiLCJpIiwicnVubmluZ1RpbWUiLCJhVmFsdWVBdFRpbWUiLCJiVmFsdWVBdFRpbWUiLCJoYXNJbnRlcnNlY3RlZCIsIlAyIiwicHVzaCIsIlAzIiwiUDQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLGdCQUFnQix5QkFBTSxDQUFOLEVBQVMsQ0FBVCxDQUF0Qjs7QUFFQSxTQUFTQyxlQUFULENBQXlCQyxJQUF6QixFQUErQkMsRUFBL0IsRUFBbUNDLFFBQW5DLEVBQTZDQyxPQUE3QyxFQUFzREMsSUFBdEQsRUFBNEQ7QUFDMUQsTUFBTUMsaUJBQWlCRCxLQUFLTixjQUFjLGdDQUFxQixDQUFyQixFQUF3QkksUUFBeEIsRUFBa0NDLE9BQWxDLENBQWQsQ0FBTCxDQUF2QjtBQUNBLFNBQU8sZ0NBQXFCSCxJQUFyQixFQUEyQkMsRUFBM0IsRUFBK0JJLGNBQS9CLENBQVA7QUFDRDs7a0JBRWMsZ0JBQXFEO0FBQUEsTUFBbERMLElBQWtELFFBQWxEQSxJQUFrRDtBQUFBLE1BQTVDQyxFQUE0QyxRQUE1Q0EsRUFBNEM7QUFBQSxNQUF4Q0ssUUFBd0MsUUFBeENBLFFBQXdDO0FBQUEsMkJBQTlCQyxRQUE4QjtBQUFBLE1BQTlCQSxRQUE4QixpQ0FBbkIsRUFBbUI7QUFBQSxNQUFaQyxLQUFZOztBQUNsRTtBQUNBLE1BQU1DLElBQUlULElBQVY7QUFDQSxNQUFNVSxJQUFJVCxFQUFWO0FBQ0EsTUFBTVUsV0FBV0YsRUFBRUcsR0FBRixFQUFqQjtBQUNBLE1BQU1DLFlBQVlKLEVBQUVLLE9BQUYsQ0FBVSxVQUFWLENBQWxCO0FBQ0EsTUFBTUMsWUFBWUwsRUFBRUksT0FBRixDQUFVLFVBQVYsQ0FBbEI7QUFDQSxNQUFNRSxRQUFRUCxFQUFFSyxPQUFGLENBQVUsTUFBVixDQUFkO0FBQ0EsTUFBTUcsUUFBUVAsRUFBRUksT0FBRixDQUFVLE1BQVYsQ0FBZDtBQUNBLE1BQU1JLFFBQVFULEVBQUVLLE9BQUYsQ0FBVSxNQUFWLENBQWQ7QUFDQSxNQUFNSyxRQUFRVCxFQUFFSSxPQUFGLENBQVUsTUFBVixDQUFkO0FBQ0EsTUFBTU0sTUFBTVgsRUFBRUssT0FBRixDQUFVLElBQVYsQ0FBWjtBQUNBLE1BQU1PLE1BQU1YLEVBQUVJLE9BQUYsQ0FBVSxJQUFWLENBQVo7O0FBRUE7QUFDQSxNQUFNUSxrQkFBa0JDLEtBQUtDLEdBQUwsQ0FBU1gsWUFBWUosRUFBRWdCLFVBQUYsRUFBckIsRUFBcUNWLFNBQXJDLENBQXhCO0FBQ0EsTUFBTVcsK0JBQStCM0IsZ0JBQWdCb0IsS0FBaEIsRUFBdUJFLEdBQXZCLEVBQTRCTixTQUE1QixFQUF1Q08sZUFBdkMsRUFBd0RMLEtBQXhELENBQXJDO0FBQ0EsTUFBTVUscUJBQXNCUixRQUFRUixRQUFwQztBQUNBLE1BQU1pQixtQkFBb0JGLCtCQUErQk4sR0FBekQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTVMsS0FBS2xCLFFBQVg7QUFDQSxNQUFNbUIsY0FBYyxDQUFDRCxFQUFELENBQXBCOztBQUVBO0FBQ0E7QUFDQSxNQUFNRSxrQkFBbUJKLHVCQUF1QkMsZ0JBQWhEO0FBQ0EsTUFBSUcsZUFBSixFQUFxQjtBQUNuQixRQUFJQyxXQUFXVixrQkFBa0JmLFFBQWpDOztBQUVBLFNBQUssSUFBSTBCLElBQUksQ0FBYixFQUFnQkEsSUFBSTFCLFFBQXBCLEVBQThCMEIsR0FBOUIsRUFBbUM7QUFDakMsVUFBTUMsY0FBY0QsSUFBSUQsUUFBeEI7O0FBRUEsVUFBTUcsZUFBZXBDLGdCQUFnQm1CLEtBQWhCLEVBQXVCRSxHQUF2QixFQUE0QlAsU0FBNUIsRUFBdUNKLEVBQUVOLE9BQUYsR0FBWStCLFdBQW5ELEVBQWdFbEIsS0FBaEUsQ0FBckI7QUFDQSxVQUFNb0IsZUFBZXJDLGdCQUFnQm9CLEtBQWhCLEVBQXVCRSxHQUF2QixFQUE0Qk4sU0FBNUIsRUFBdUNMLEVBQUVQLE9BQUYsR0FBWStCLFdBQW5ELEVBQWdFakIsS0FBaEUsQ0FBckI7O0FBRUEsVUFBTW9CLGlCQUNIVixzQkFBc0JRLGVBQWVDLFlBQXRDLElBQ0MsQ0FBQ1Qsa0JBQUQsSUFBdUJRLGVBQWVDLFlBRnpDOztBQUtBLFVBQUlDLGNBQUosRUFBb0I7QUFDbEIsWUFBTUMsS0FBS0YsWUFBWDtBQUNBTixvQkFBWVMsSUFBWixDQUFpQkQsRUFBakI7QUFDQTtBQUNEO0FBQ0Y7QUFDRjs7QUFFRDtBQUNBO0FBQ0EsTUFBTUUsS0FBS2QsNEJBQVg7QUFDQUksY0FBWVMsSUFBWixDQUFpQkMsRUFBakI7O0FBRUE7QUFDQSxNQUFNQyxLQUFLcEIsR0FBWDtBQUNBUyxjQUFZUyxJQUFaLENBQWlCRSxFQUFqQjs7QUFFQSxTQUFPLGtDQUNGakMsS0FERTtBQUVMTixjQUFVYSxTQUZMO0FBR0xYLHdCQUhLO0FBSUxFLGNBQVUsd0JBQ1IsMEJBQU93QixXQUFQLENBRFEsRUFFUnhCLFFBRlE7QUFKTCxLQUFQO0FBU0QsQyIsImZpbGUiOiJibGVuZC10d2VlbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHdlZW4gZnJvbSAnLi90d2Vlbic7XG5pbXBvcnQgeyBsaW5lYXIgfSBmcm9tICcuLi9pbmMvZWFzaW5nJztcbmltcG9ydCB7IGdldFByb2dyZXNzRnJvbVZhbHVlLCBnZXRWYWx1ZUZyb21Qcm9ncmVzcyB9IGZyb20gJy4uL2luYy9jYWxjJztcbmltcG9ydCB7IGZsb3csIGNsYW1wLCBiZXppZXIgfSBmcm9tICcuLi9pbmMvdHJhbnNmb3JtZXJzJztcblxuY29uc3QgY2xhbXBQcm9ncmVzcyA9IGNsYW1wKDAsIDEpO1xuXG5mdW5jdGlvbiBjYWxjVmFsdWVBdFRpbWUoZnJvbSwgdG8sIGR1cmF0aW9uLCBlbGFwc2VkLCBlYXNlKSB7XG4gIGNvbnN0IHByb2dyZXNzQXRUaW1lID0gZWFzZShjbGFtcFByb2dyZXNzKGdldFByb2dyZXNzRnJvbVZhbHVlKDAsIGR1cmF0aW9uLCBlbGFwc2VkKSkpO1xuICByZXR1cm4gZ2V0VmFsdWVGcm9tUHJvZ3Jlc3MoZnJvbSwgdG8sIHByb2dyZXNzQXRUaW1lKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgKHsgZnJvbSwgdG8sIG9uVXBkYXRlLCBhY2N1cmFjeSA9IDYwLCAuLi5wcm9wcyB9KSA9PiB7XG4gIC8vIEdldCB0d2VlbiBwcm9wZXJ0aWVzXG4gIGNvbnN0IGEgPSBmcm9tO1xuICBjb25zdCBiID0gdG87XG4gIGNvbnN0IGFDdXJyZW50ID0gYS5nZXQoKTtcbiAgY29uc3QgYUR1cmF0aW9uID0gYS5nZXRQcm9wKCdkdXJhdGlvbicpO1xuICBjb25zdCBiRHVyYXRpb24gPSBiLmdldFByb3AoJ2R1cmF0aW9uJyk7XG4gIGNvbnN0IGFFYXNlID0gYS5nZXRQcm9wKCdlYXNlJyk7XG4gIGNvbnN0IGJFYXNlID0gYi5nZXRQcm9wKCdlYXNlJyk7XG4gIGNvbnN0IGFGcm9tID0gYS5nZXRQcm9wKCdmcm9tJyk7XG4gIGNvbnN0IGJGcm9tID0gYi5nZXRQcm9wKCdmcm9tJyk7XG4gIGNvbnN0IGFUbyA9IGEuZ2V0UHJvcCgndG8nKTtcbiAgY29uc3QgYlRvID0gYi5nZXRQcm9wKCd0bycpO1xuXG4gIC8vIEFuYWx5c2UgdHdlZW5zXG4gIGNvbnN0IG92ZXJsYXBEdXJhdGlvbiA9IE1hdGgubWluKGFEdXJhdGlvbiAtIGEuZ2V0RWxhcHNlZCgpLCBiRHVyYXRpb24pO1xuICBjb25zdCBiVmFsdWVBdFR3ZWVuT3ZlcmxhcENvbXBsZXRlID0gY2FsY1ZhbHVlQXRUaW1lKGJGcm9tLCBiVG8sIGJEdXJhdGlvbiwgb3ZlcmxhcER1cmF0aW9uLCBiRWFzZSk7XG4gIGNvbnN0IGJTdGFydHNIaWdoZXJUaGFuQSA9IChiRnJvbSA+IGFDdXJyZW50KTtcbiAgY29uc3QgYkVuZHNIaWdoZXJUaGFuQSA9IChiVmFsdWVBdFR3ZWVuT3ZlcmxhcENvbXBsZXRlID4gYVRvKTtcblxuICAvLyBCbGVuZCBwb2ludHMgYXJlIGRlZmluZWQgYXMgW3QgPSB0aW1lLCB2ID0gdmFsdWVBdFRpbWVdXG4gIC8vIFAxXG4gIC8vIFRoZSBzdGFydCBvZiB0aGUgdHdlZW4gYmxlbmRcbiAgY29uc3QgUDEgPSBhQ3VycmVudDtcbiAgY29uc3QgYmxlbmRQb2ludHMgPSBbUDFdO1xuXG4gIC8vIEZpbmQgUDJcbiAgLy8gVGhlIHBvc3NpYmxlIGludGVyc2VjdGlvbiBwb2ludCBiZXR3ZWVuIHRoZSB0d28gdHdlZW5zXG4gIGNvbnN0IHR3ZWVuc0ludGVyc2VjdCA9IChiU3RhcnRzSGlnaGVyVGhhbkEgIT09IGJFbmRzSGlnaGVyVGhhbkEpO1xuICBpZiAodHdlZW5zSW50ZXJzZWN0KSB7XG4gICAgbGV0IHRpbWVzdGVwID0gb3ZlcmxhcER1cmF0aW9uIC8gYWNjdXJhY3k7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjY3VyYWN5OyBpKyspIHtcbiAgICAgIGNvbnN0IHJ1bm5pbmdUaW1lID0gaSAqIHRpbWVzdGVwO1xuXG4gICAgICBjb25zdCBhVmFsdWVBdFRpbWUgPSBjYWxjVmFsdWVBdFRpbWUoYUZyb20sIGFUbywgYUR1cmF0aW9uLCBhLmVsYXBzZWQgKyBydW5uaW5nVGltZSwgYUVhc2UpO1xuICAgICAgY29uc3QgYlZhbHVlQXRUaW1lID0gY2FsY1ZhbHVlQXRUaW1lKGJGcm9tLCBiVG8sIGJEdXJhdGlvbiwgYi5lbGFwc2VkICsgcnVubmluZ1RpbWUsIGJFYXNlKTtcblxuICAgICAgY29uc3QgaGFzSW50ZXJzZWN0ZWQgPSAoXG4gICAgICAgIChiU3RhcnRzSGlnaGVyVGhhbkEgJiYgYVZhbHVlQXRUaW1lID4gYlZhbHVlQXRUaW1lKSB8fFxuICAgICAgICAoIWJTdGFydHNIaWdoZXJUaGFuQSAmJiBhVmFsdWVBdFRpbWUgPCBiVmFsdWVBdFRpbWUpXG4gICAgICApO1xuXG4gICAgICBpZiAoaGFzSW50ZXJzZWN0ZWQpIHtcbiAgICAgICAgY29uc3QgUDIgPSBiVmFsdWVBdFRpbWU7XG4gICAgICAgIGJsZW5kUG9pbnRzLnB1c2goUDIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBQM1xuICAvLyBUaGUgcG9pbnRzIHRoZSB0d28gdHdlZW5zIHN0b3Agb3ZlcmxhcHBpbmdcbiAgY29uc3QgUDMgPSBiVmFsdWVBdFR3ZWVuT3ZlcmxhcENvbXBsZXRlO1xuICBibGVuZFBvaW50cy5wdXNoKFAzKTtcblxuICAvLyBQdXNoIHRoZSBlbmQgc3RhdGUgb2YgYiB0d2VlbiBhcyBmaW5hbCBjb250cm9sIHBvaW50XG4gIGNvbnN0IFA0ID0gYlRvO1xuICBibGVuZFBvaW50cy5wdXNoKFA0KTtcblxuICByZXR1cm4gdHdlZW4oe1xuICAgIC4uLnByb3BzLFxuICAgIGR1cmF0aW9uOiBiRHVyYXRpb24sXG4gICAgZWFzZTogbGluZWFyLFxuICAgIG9uVXBkYXRlOiBmbG93KFxuICAgICAgYmV6aWVyKGJsZW5kUG9pbnRzKSxcbiAgICAgIG9uVXBkYXRlXG4gICAgKVxuICB9KTtcbn07XG4iXX0=