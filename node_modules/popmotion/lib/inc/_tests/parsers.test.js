'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _parsers = require('../parsers');

var red = {
  red: 255,
  green: 0,
  blue: 0,
  alpha: 1
};

var hslaTestColor = {
  hue: 170,
  saturation: 50,
  lightness: 45,
  alpha: 1
};

describe('hex()', function () {
  it('should split a hex value into the correct params', function () {
    expect((0, _parsers.hex)('#f00')).toEqual(red);
  });
});

describe('rgba()', function () {
  it('should split an rgba value into the correct params', function () {
    expect((0, _parsers.rgba)('rgba(255, 0, 0, 0.5)')).toEqual(_extends({}, red, { alpha: 0.5 }));
    expect((0, _parsers.rgba)('rgb(255,0,0)')).toEqual(red);
  });
});

describe('hsla()', function () {
  it('should split an hsl value into the correct params', function () {
    expect((0, _parsers.hsla)('hsla(170, 50%, 45%, 1)')).toEqual(hslaTestColor);
    expect((0, _parsers.hsla)('hsl(170, 50%, 45%)')).toEqual(hslaTestColor);
  });
});

describe('color()', function () {
  it('should split the color with the appropriate parser', function () {
    expect((0, _parsers.color)('rgba(255, 0, 0, 1)')).toEqual(red);
    expect((0, _parsers.color)('#f00')).toEqual(red);
    expect((0, _parsers.color)('hsla(170, 50%, 45%, 1)')).toEqual(hslaTestColor);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbmMvX3Rlc3RzL3BhcnNlcnMudGVzdC5qcyJdLCJuYW1lcyI6WyJyZWQiLCJncmVlbiIsImJsdWUiLCJhbHBoYSIsImhzbGFUZXN0Q29sb3IiLCJodWUiLCJzYXR1cmF0aW9uIiwibGlnaHRuZXNzIiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFQSxJQUFNQSxNQUFNO0FBQ1ZBLE9BQUssR0FESztBQUVWQyxTQUFPLENBRkc7QUFHVkMsUUFBTSxDQUhJO0FBSVZDLFNBQU87QUFKRyxDQUFaOztBQU9BLElBQU1DLGdCQUFnQjtBQUNwQkMsT0FBSyxHQURlO0FBRXBCQyxjQUFZLEVBRlE7QUFHcEJDLGFBQVcsRUFIUztBQUlwQkosU0FBTztBQUphLENBQXRCOztBQU9BSyxTQUFTLE9BQVQsRUFBa0IsWUFBTTtBQUN0QkMsS0FBRyxrREFBSCxFQUF1RCxZQUFNO0FBQzNEQyxXQUFPLGtCQUFJLE1BQUosQ0FBUCxFQUFvQkMsT0FBcEIsQ0FBNEJYLEdBQTVCO0FBQ0QsR0FGRDtBQUdELENBSkQ7O0FBTUFRLFNBQVMsUUFBVCxFQUFtQixZQUFNO0FBQ3ZCQyxLQUFHLG9EQUFILEVBQXlELFlBQU07QUFDN0RDLFdBQU8sbUJBQUssc0JBQUwsQ0FBUCxFQUFxQ0MsT0FBckMsY0FBa0RYLEdBQWxELElBQXVERyxPQUFPLEdBQTlEO0FBQ0FPLFdBQU8sbUJBQUssY0FBTCxDQUFQLEVBQTZCQyxPQUE3QixDQUFxQ1gsR0FBckM7QUFDRCxHQUhEO0FBSUQsQ0FMRDs7QUFPQVEsU0FBUyxRQUFULEVBQW1CLFlBQU07QUFDdkJDLEtBQUcsbURBQUgsRUFBd0QsWUFBTTtBQUM1REMsV0FBTyxtQkFBSyx3QkFBTCxDQUFQLEVBQXVDQyxPQUF2QyxDQUErQ1AsYUFBL0M7QUFDQU0sV0FBTyxtQkFBSyxvQkFBTCxDQUFQLEVBQW1DQyxPQUFuQyxDQUEyQ1AsYUFBM0M7QUFDRCxHQUhEO0FBSUQsQ0FMRDs7QUFPQUksU0FBUyxTQUFULEVBQW9CLFlBQU07QUFDeEJDLEtBQUcsb0RBQUgsRUFBeUQsWUFBTTtBQUM3REMsV0FBTyxvQkFBTSxvQkFBTixDQUFQLEVBQW9DQyxPQUFwQyxDQUE0Q1gsR0FBNUM7QUFDQVUsV0FBTyxvQkFBTSxNQUFOLENBQVAsRUFBc0JDLE9BQXRCLENBQThCWCxHQUE5QjtBQUNBVSxXQUFPLG9CQUFNLHdCQUFOLENBQVAsRUFBd0NDLE9BQXhDLENBQWdEUCxhQUFoRDtBQUNELEdBSkQ7QUFLRCxDQU5EIiwiZmlsZSI6InBhcnNlcnMudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhleCwgcmdiYSwgaHNsYSwgY29sb3IgfSBmcm9tICcuLi9wYXJzZXJzJztcblxuY29uc3QgcmVkID0ge1xuICByZWQ6IDI1NSxcbiAgZ3JlZW46IDAsXG4gIGJsdWU6IDAsXG4gIGFscGhhOiAxXG59O1xuXG5jb25zdCBoc2xhVGVzdENvbG9yID0ge1xuICBodWU6IDE3MCxcbiAgc2F0dXJhdGlvbjogNTAsXG4gIGxpZ2h0bmVzczogNDUsXG4gIGFscGhhOiAxXG59O1xuXG5kZXNjcmliZSgnaGV4KCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgc3BsaXQgYSBoZXggdmFsdWUgaW50byB0aGUgY29ycmVjdCBwYXJhbXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGhleCgnI2YwMCcpKS50b0VxdWFsKHJlZCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdyZ2JhKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgc3BsaXQgYW4gcmdiYSB2YWx1ZSBpbnRvIHRoZSBjb3JyZWN0IHBhcmFtcycsICgpID0+IHtcbiAgICBleHBlY3QocmdiYSgncmdiYSgyNTUsIDAsIDAsIDAuNSknKSkudG9FcXVhbCh7IC4uLnJlZCwgYWxwaGE6IDAuNSB9KTtcbiAgICBleHBlY3QocmdiYSgncmdiKDI1NSwwLDApJykpLnRvRXF1YWwocmVkKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2hzbGEoKScsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBzcGxpdCBhbiBoc2wgdmFsdWUgaW50byB0aGUgY29ycmVjdCBwYXJhbXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGhzbGEoJ2hzbGEoMTcwLCA1MCUsIDQ1JSwgMSknKSkudG9FcXVhbChoc2xhVGVzdENvbG9yKTtcbiAgICBleHBlY3QoaHNsYSgnaHNsKDE3MCwgNTAlLCA0NSUpJykpLnRvRXF1YWwoaHNsYVRlc3RDb2xvcik7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdjb2xvcigpJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHNwbGl0IHRoZSBjb2xvciB3aXRoIHRoZSBhcHByb3ByaWF0ZSBwYXJzZXInLCAoKSA9PiB7XG4gICAgZXhwZWN0KGNvbG9yKCdyZ2JhKDI1NSwgMCwgMCwgMSknKSkudG9FcXVhbChyZWQpO1xuICAgIGV4cGVjdChjb2xvcignI2YwMCcpKS50b0VxdWFsKHJlZCk7XG4gICAgZXhwZWN0KGNvbG9yKCdoc2xhKDE3MCwgNTAlLCA0NSUsIDEpJykpLnRvRXF1YWwoaHNsYVRlc3RDb2xvcik7XG4gIH0pO1xufSk7XG4iXX0=