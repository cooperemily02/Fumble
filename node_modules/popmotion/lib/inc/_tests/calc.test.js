'use strict';

var _calc = require('../calc');

var a = {
  x: 0,
  y: 0
};

var b = {
  x: 1,
  y: 1
};

describe('angle()', function () {
  it('should return the correct angle between two points', function () {
    expect((0, _calc.angle)(a, a)).toBe(0);
    expect((0, _calc.angle)(a, b)).toBe(45);
  });

  it('should assume a second point of 0,0', function () {
    expect((0, _calc.angle)(b)).toBe(-135);
  });
});

describe('degreesToRadians()', function () {
  it('should correctly convert degrees to radians', function () {
    expect((0, _calc.degreesToRadians)(45)).toBe(0.7853981633974483);
  });
});

describe('dilate()', function () {
  it('should return the difference between a and b as factored by dilation', function () {
    expect((0, _calc.dilate)(0, 80, .5)).toBe(40);
    expect((0, _calc.dilate)(100, 200, 2)).toBe(300);
  });
});

describe('distance()', function () {
  it('should return the correct distance between two 1D points', function () {
    expect((0, _calc.distance)(-100, 100)).toBe(200);
  });

  it('should return the correct distance between two 2D points', function () {
    expect((0, _calc.distance)(a, b)).toBe(1.4142135623730951);
  });

  it('should return the correct distance between two 3D points', function () {
    expect((0, _calc.distance)({ x: 0, y: 0, z: 0 }, { x: 0, y: 0, z: 10 })).toBe(10);
  });
});

describe('getProgressFromValue()', function () {
  it('should return, as a number representing 0 as the lower limit and 1 as the upper limit, a progress of a value between given limits', function () {
    expect((0, _calc.getProgressFromValue)(0, 100, 50)).toBe(.5);
    expect((0, _calc.getProgressFromValue)(100, 200, 50)).toBe(-0.5);
  });
});

describe('getValueFromProgress()', function () {
  it('should return correct value has calculated from progress 0-1 and range', function () {
    expect((0, _calc.getValueFromProgress)(100, 200, 0.5)).toBe(150);
    expect((0, _calc.getValueFromProgress)(100, 200, -1)).toBe(0);
  });
});

describe('pointFromAngleAndDistance()', function () {
  it('should return the correct point, as described by the provided origin point, angle in degrees, and distance', function () {
    expect((0, _calc.pointFromAngleAndDistance)(a, 45, 100)).toEqual({
      x: 70.71067811865476,
      y: 70.71067811865474
    });
  });
});

describe('radiansToDegrees()', function () {
  it('should correctly convert degrees into radians', function () {
    expect((0, _calc.radiansToDegrees)(0.7853981633974483)).toBe(45);
  });
});

describe('smooth()', function () {
  it('should return value if smoothing is equal or less than frame duration', function () {
    expect((0, _calc.smooth)(100, 0, 16.7, 0)).toBe(100);
  });
});

describe('stepProgress', function () {
  it('should return a progress 0 - 1 to the fixed number of steps provided', function () {
    expect((0, _calc.stepProgress)(3, .5)).toBe(.5);
    expect((0, _calc.stepProgress)(3, .4)).toBe(.5);
    expect((0, _calc.stepProgress)(3, .9)).toBe(1);
    expect((0, _calc.stepProgress)(3, .1)).toBe(0);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbmMvX3Rlc3RzL2NhbGMudGVzdC5qcyJdLCJuYW1lcyI6WyJhIiwieCIsInkiLCJiIiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsInRvQmUiLCJ6IiwidG9FcXVhbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFhQSxJQUFNQSxJQUFJO0FBQ1JDLEtBQUcsQ0FESztBQUVSQyxLQUFHO0FBRkssQ0FBVjs7QUFLQSxJQUFNQyxJQUFJO0FBQ1JGLEtBQUcsQ0FESztBQUVSQyxLQUFHO0FBRkssQ0FBVjs7QUFLQUUsU0FBUyxTQUFULEVBQW9CLFlBQU07QUFDeEJDLEtBQUcsb0RBQUgsRUFBeUQsWUFBTTtBQUM3REMsV0FBTyxpQkFBTU4sQ0FBTixFQUFTQSxDQUFULENBQVAsRUFBb0JPLElBQXBCLENBQXlCLENBQXpCO0FBQ0FELFdBQU8saUJBQU1OLENBQU4sRUFBU0csQ0FBVCxDQUFQLEVBQW9CSSxJQUFwQixDQUF5QixFQUF6QjtBQUNELEdBSEQ7O0FBS0FGLEtBQUcscUNBQUgsRUFBMEMsWUFBTTtBQUM5Q0MsV0FBTyxpQkFBTUgsQ0FBTixDQUFQLEVBQWlCSSxJQUFqQixDQUFzQixDQUFDLEdBQXZCO0FBQ0QsR0FGRDtBQUdELENBVEQ7O0FBV0FILFNBQVMsb0JBQVQsRUFBK0IsWUFBTTtBQUNuQ0MsS0FBRyw2Q0FBSCxFQUFrRCxZQUFNO0FBQ3REQyxXQUFPLDRCQUFpQixFQUFqQixDQUFQLEVBQTZCQyxJQUE3QixDQUFrQyxrQkFBbEM7QUFDRCxHQUZEO0FBR0QsQ0FKRDs7QUFNQUgsU0FBUyxVQUFULEVBQXFCLFlBQU07QUFDekJDLEtBQUcsc0VBQUgsRUFBMkUsWUFBTTtBQUMvRUMsV0FBTyxrQkFBTyxDQUFQLEVBQVUsRUFBVixFQUFjLEVBQWQsQ0FBUCxFQUEwQkMsSUFBMUIsQ0FBK0IsRUFBL0I7QUFDQUQsV0FBTyxrQkFBTyxHQUFQLEVBQVksR0FBWixFQUFpQixDQUFqQixDQUFQLEVBQTRCQyxJQUE1QixDQUFpQyxH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LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYW5nbGUsXG4gIGRlZ3JlZXNUb1JhZGlhbnMsXG4gIGRpbGF0ZSxcbiAgZGlzdGFuY2UsXG4gIGdldFByb2dyZXNzRnJvbVZhbHVlLFxuICBnZXRWYWx1ZUZyb21Qcm9ncmVzcyxcbiAgcG9pbnRGcm9tQW5nbGVBbmREaXN0YW5jZSxcbiAgcmFkaWFuc1RvRGVncmVlcyxcbiAgc21vb3RoLFxuICBzdGVwUHJvZ3Jlc3Ncbn0gZnJvbSAnLi4vY2FsYyc7XG5cbmNvbnN0IGEgPSB7XG4gIHg6IDAsXG4gIHk6IDBcbn07XG5cbmNvbnN0IGIgPSB7XG4gIHg6IDEsXG4gIHk6IDFcbn07XG5cbmRlc2NyaWJlKCdhbmdsZSgpJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJldHVybiB0aGUgY29ycmVjdCBhbmdsZSBiZXR3ZWVuIHR3byBwb2ludHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGFuZ2xlKGEsIGEpKS50b0JlKDApO1xuICAgIGV4cGVjdChhbmdsZShhLCBiKSkudG9CZSg0NSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYXNzdW1lIGEgc2Vjb25kIHBvaW50IG9mIDAsMCcsICgpID0+IHtcbiAgICBleHBlY3QoYW5nbGUoYikpLnRvQmUoLTEzNSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdkZWdyZWVzVG9SYWRpYW5zKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgY29ycmVjdGx5IGNvbnZlcnQgZGVncmVlcyB0byByYWRpYW5zJywgKCkgPT4ge1xuICAgIGV4cGVjdChkZWdyZWVzVG9SYWRpYW5zKDQ1KSkudG9CZSgwLjc4NTM5ODE2MzM5NzQ0ODMpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnZGlsYXRlKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmV0dXJuIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gYSBhbmQgYiBhcyBmYWN0b3JlZCBieSBkaWxhdGlvbicsICgpID0+IHtcbiAgICBleHBlY3QoZGlsYXRlKDAsIDgwLCAuNSkpLnRvQmUoNDApO1xuICAgIGV4cGVjdChkaWxhdGUoMTAwLCAyMDAsIDIpKS50b0JlKDMwMCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdkaXN0YW5jZSgpJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJldHVybiB0aGUgY29ycmVjdCBkaXN0YW5jZSBiZXR3ZWVuIHR3byAxRCBwb2ludHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRpc3RhbmNlKC0xMDAsIDEwMCkpLnRvQmUoMjAwKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gdGhlIGNvcnJlY3QgZGlzdGFuY2UgYmV0d2VlbiB0d28gMkQgcG9pbnRzJywgKCkgPT4ge1xuICAgIGV4cGVjdChkaXN0YW5jZShhLCBiKSkudG9CZSgxLjQxNDIxMzU2MjM3MzA5NTEpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiB0aGUgY29ycmVjdCBkaXN0YW5jZSBiZXR3ZWVuIHR3byAzRCBwb2ludHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRpc3RhbmNlKHsgeDogMCwgeTogMCwgejogMCB9LCB7IHg6IDAsIHk6IDAsIHo6IDEwIH0pKS50b0JlKDEwKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2dldFByb2dyZXNzRnJvbVZhbHVlKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmV0dXJuLCBhcyBhIG51bWJlciByZXByZXNlbnRpbmcgMCBhcyB0aGUgbG93ZXIgbGltaXQgYW5kIDEgYXMgdGhlIHVwcGVyIGxpbWl0LCBhIHByb2dyZXNzIG9mIGEgdmFsdWUgYmV0d2VlbiBnaXZlbiBsaW1pdHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdldFByb2dyZXNzRnJvbVZhbHVlKDAsIDEwMCwgNTApKS50b0JlKC41KTtcbiAgICBleHBlY3QoZ2V0UHJvZ3Jlc3NGcm9tVmFsdWUoMTAwLCAyMDAsIDUwKSkudG9CZSgtMC41KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2dldFZhbHVlRnJvbVByb2dyZXNzKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmV0dXJuIGNvcnJlY3QgdmFsdWUgaGFzIGNhbGN1bGF0ZWQgZnJvbSBwcm9ncmVzcyAwLTEgYW5kIHJhbmdlJywgKCkgPT4ge1xuICAgIGV4cGVjdChnZXRWYWx1ZUZyb21Qcm9ncmVzcygxMDAsIDIwMCwgMC41KSkudG9CZSgxNTApO1xuICAgIGV4cGVjdChnZXRWYWx1ZUZyb21Qcm9ncmVzcygxMDAsIDIwMCwgLTEpKS50b0JlKDApO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgncG9pbnRGcm9tQW5nbGVBbmREaXN0YW5jZSgpJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJldHVybiB0aGUgY29ycmVjdCBwb2ludCwgYXMgZGVzY3JpYmVkIGJ5IHRoZSBwcm92aWRlZCBvcmlnaW4gcG9pbnQsIGFuZ2xlIGluIGRlZ3JlZXMsIGFuZCBkaXN0YW5jZScsICgpID0+IHtcbiAgICBleHBlY3QocG9pbnRGcm9tQW5nbGVBbmREaXN0YW5jZShhLCA0NSwgMTAwKSkudG9FcXVhbCh7XG4gICAgICB4OiA3MC43MTA2NzgxMTg2NTQ3NixcbiAgICAgIHk6IDcwLjcxMDY3ODExODY1NDc0XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdyYWRpYW5zVG9EZWdyZWVzKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgY29ycmVjdGx5IGNvbnZlcnQgZGVncmVlcyBpbnRvIHJhZGlhbnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHJhZGlhbnNUb0RlZ3JlZXMoMC43ODUzOTgxNjMzOTc0NDgzKSkudG9CZSg0NSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdzbW9vdGgoKScsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gdmFsdWUgaWYgc21vb3RoaW5nIGlzIGVxdWFsIG9yIGxlc3MgdGhhbiBmcmFtZSBkdXJhdGlvbicsICgpID0+IHtcbiAgICBleHBlY3Qoc21vb3RoKDEwMCwgMCwgMTYuNywgMCkpLnRvQmUoMTAwKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ3N0ZXBQcm9ncmVzcycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gYSBwcm9ncmVzcyAwIC0gMSB0byB0aGUgZml4ZWQgbnVtYmVyIG9mIHN0ZXBzIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgIGV4cGVjdChzdGVwUHJvZ3Jlc3MoMywgLjUpKS50b0JlKC41KTtcbiAgICBleHBlY3Qoc3RlcFByb2dyZXNzKDMsIC40KSkudG9CZSguNSk7XG4gICAgZXhwZWN0KHN0ZXBQcm9ncmVzcygzLCAuOSkpLnRvQmUoMSk7XG4gICAgZXhwZWN0KHN0ZXBQcm9ncmVzcygzLCAuMSkpLnRvQmUoMCk7XG4gIH0pO1xufSk7XG4iXX0=