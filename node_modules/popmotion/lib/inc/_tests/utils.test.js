'use strict';

var _utils = require('../utils');

describe('camelToDash()', function () {
  expect((0, _utils.camelToDash)('fooBarBop')).toBe('foo-bar-bop');
});

describe('splitCommaDelimited()', function () {
  it('should split comma delimited string into array', function () {
    expect((0, _utils.splitCommaDelimited)('foo,bar')).toEqual(['foo', 'bar']);
  });
});

describe('contains()', function () {
  it('should return true if argument contains', function () {
    var containsPx = (0, _utils.contains)('px');
    expect(containsPx('face')).toBe(false);
    expect(containsPx('somepx')).toBe(true);
  });
});

describe('isFirstChars()', function () {
  it('should return true if first chars are equal to args', function () {
    var isColor = (0, _utils.isFirstChars)('rgb');
    expect(isColor('test')).toBe(false);
    expect(isColor('rgba()')).toBe(true);
  });
});

describe('getValueFromFunctionString()', function () {
  it('should return value from function string', function () {
    expect((0, _utils.getValueFromFunctionString)('translate(20px)')).toBe('20px');
    expect((0, _utils.getValueFromFunctionString)('rgba(255, 0, 255)')).toBe('255, 0, 255');
  });
});

describe('splitColorValues()', function () {
  it('should split an array of values into the named values provided', function () {
    var splitRGBValues = (0, _utils.splitColorValues)(['red', 'green', 'blue']);
    expect(splitRGBValues('rgba(255,0,255)')).toEqual({
      red: 255,
      green: 0,
      blue: 255
    });
  });
});

describe('isArray()', function () {
  it('should identify arrays', function () {
    expect((0, _utils.isArray)([])).toBe(true);
    expect((0, _utils.isArray)('')).toBe(false);
    expect((0, _utils.isArray)(0)).toBe(false);
  });
});

describe('isFunc()', function () {
  it('should identify functions', function () {
    expect((0, _utils.isFunc)(function () {})).toBe(true);
    expect((0, _utils.isFunc)('')).toBe(false);
  });
});

describe('isNum()', function () {
  it('should identify numbers', function () {
    expect((0, _utils.isNum)(0)).toBe(true);
    expect((0, _utils.isNum)('')).toBe(false);
  });
});

describe('isString()', function () {
  it('should identify strings', function () {
    expect((0, _utils.isString)('')).toBe(true);
    expect((0, _utils.isString)(0)).toBe(false);
  });
});

describe('isObj()', function () {
  it('should identify objects', function () {
    expect((0, _utils.isObj)({})).toBe(true);
    expect((0, _utils.isObj)('')).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbmMvX3Rlc3RzL3V0aWxzLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJleHBlY3QiLCJ0b0JlIiwiaXQiLCJ0b0VxdWFsIiwiY29udGFpbnNQeCIsImlzQ29sb3IiLCJzcGxpdFJHQlZhbHVlcyIsInJlZCIsImdyZWVuIiwiYmx1ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFjQUEsU0FBUyxlQUFULEVBQTBCLFlBQU07QUFDOUJDLFNBQU8sd0JBQVksV0FBWixDQUFQLEVBQWlDQyxJQUFqQyxDQUFzQyxhQUF0QztBQUNELENBRkQ7O0FBSUFGLFNBQVMsdUJBQVQsRUFBa0MsWUFBTTtBQUN0Q0csS0FBRyxnREFBSCxFQUFxRCxZQUFNO0FBQ3pERixXQUFPLGdDQUFvQixTQUFwQixDQUFQLEVBQXVDRyxPQUF2QyxDQUErQyxDQUFDLEtBQUQsRUFBUSxLQUFSLENBQS9DO0FBQ0QsR0FGRDtBQUdELENBSkQ7O0FBTUFKLFNBQVMsWUFBVCxFQUF1QixZQUFNO0FBQzNCRyxLQUFHLHlDQUFILEVBQThDLFlBQU07QUFDbEQsUUFBTUUsYUFBYSxxQkFBUyxJQUFULENBQW5CO0FBQ0FKLFdBQU9JLFdBQVcsTUFBWCxDQUFQLEVBQTJCSCxJQUEzQixDQUFnQyxLQUFoQztBQUNBRCxXQUFPSSxXQUFXLFFBQVgsQ0FBUCxFQUE2QkgsSUFBN0IsQ0FBa0MsSUFBbEM7QUFDRCxHQUpEO0FBS0QsQ0FORDs7QUFRQUYsU0FBUyxnQkFBVCxFQUEyQixZQUFNO0FBQy9CRyxLQUFHLHFEQUFILEVBQTBELFlBQU07QUFDOUQsUUFBTUcsVUFBVSx5QkFBYSxLQUFiLENBQWhCO0FBQ0FMLFdBQU9LLFFBQVEsTUFBUixDQUFQLEVBQXdCSixJQUF4QixDQUE2QixLQUE3QjtBQUNBRCxXQUFPSyxRQUFRLFFBQVIsQ0FBUCxFQUEwQkosSUFBMUIsQ0FBK0IsSUFBL0I7QUFDRCxHQUpEO0FBS0QsQ0FORDs7QUFRQUYsU0FBUyw4QkFBVCxFQUF5QyxZQUFNO0FBQzdDRyxLQUFHLDBDQUFILEVBQStDLFlBQU07QUFDbkRGLFdBQU8sdUNBQTJCLGlCQUEzQixDQUFQLEVBQXNEQyxJQUF0RCxDQUEyRCxNQUEzRDtBQUNBRCxXQUFPLHVDQUEyQixtQkFBM0IsQ0FBUCxFQUF3REMsSUFBeEQsQ0FBNkQsYUFBN0Q7QUFDRCxHQUhEO0FBSUQsQ0FMRDs7QUFPQUYsU0FBUyxvQkFBVCxFQUErQixZQUFNO0FBQ25DRyxLQUFHLGdFQUFILEVBQXFFLFlBQU07QUFDekUsUUFBTUksaUJBQWlCLDZCQUFpQixDQUFDLEtBQUQsRUFBUSxPQUFSLEVBQWlCLE1BQWpCLENBQWpCLENBQXZCO0FBQ0FOLFdBQU9NLGVBQWUsaUJBQWYsQ0FBUCxFQUEwQ0gsT0FBMUMsQ0FBa0Q7QUFDaERJLFdBQUssR0FEMkM7QUFFaERDLGFBQU8sQ0FGeUM7QUFHaERDLFlBQU07QUFIMEMsS0FBbEQ7QUFLRCxHQVBEO0FBUUQsQ0FURDs7QUFXQVYsU0FBUyxXQUFULEVBQXNCLFlBQU07QUFDMUJHLEtBQUcsd0JBQUgsRUFBNkIsWUFBTTtBQUNqQ0YsV0FBTyxvQkFBUSxFQUFSLENBQVAsRUFBb0JDLElBQXBCLENBQXlCLElBQXpCO0FBQ0FELFdBQU8sb0JBQVEsRUFBUixDQUFQLEVBQW9CQyxJQUFwQixDQUF5QixLQUF6QjtBQUNBRCxXQUFPLG9CQUFRLENBQVIsQ0FBUCxFQUFtQkMsSUFBbkIsQ0FBd0IsS0FBeEI7QUFDRCxHQUpEO0FBS0QsQ0FORDs7QUFRQUYsU0FBUyxVQUFULEVBQXFCLFlBQU07QUFDekJHLEtBQUcsMkJBQUgsRUFBZ0MsWUFBTTtBQUNwQ0YsV0FBTyxtQkFBTyxZQUFNLENBQUUsQ0FBZixDQUFQLEVBQXlCQyxJQUF6QixDQUE4QixJQUE5QjtBQUNBRCxXQUFPLG1CQUFPLEVBQVAsQ0FBUCxFQUFtQkMsSUFBbkIsQ0FBd0IsS0FBeEI7QUFDRCxHQUhEO0FBSUQsQ0FMRDs7QUFPQUYsU0FBUyxTQUFULEVBQW9CLFlBQU07QUFDeEJHLEtBQUcseUJBQUgsRUFBOEIsWUFBTTtBQUNsQ0YsV0FBTyxrQkFBTSxDQUFOLENBQVAsRUFBaUJDLElBQWpCLENBQXNCLElBQXRCO0FBQ0FELFdBQU8sa0JBQU0sRUFBTixDQUFQLEVBQWtCQyxJQUFsQixDQUF1QixLQUF2QjtBQUNELEdBSEQ7QUFJRCxDQUxEOztBQU9BRixTQUFTLFlBQVQsRUFBdUIsWUFBTTtBQUMzQkcsS0FBRyx5QkFBSCxFQUE4QixZQUFNO0FBQ2xDRixXQUFPLHFCQUFTLEVBQVQsQ0FBUCxFQUFxQkMsSUFBckIsQ0FBMEIsSUFBMUI7QUFDQUQsV0FBTyxxQkFBUyxDQUFULENBQVAsRUFBb0JDLElBQXBCLENBQXlCLEtBQXpCO0FBQ0QsR0FIRDtBQUlELENBTEQ7O0FBT0FGLFNBQVMsU0FBVCxFQUFvQixZQUFNO0FBQ3hCRyxLQUFHLHlCQUFILEVBQThCLFlBQU07QUFDbENGLFdBQU8sa0JBQU0sRUFBTixDQUFQLEVBQWtCQyxJQUFsQixDQUF1QixJQUF2QjtBQUNBRCxXQUFPLGtCQUFNLEVBQU4sQ0FBUCxFQUFrQkMsSUFBbEIsQ0FBdUIsS0FBdkI7QUFDRCxHQUhEO0FBSUQsQ0FMRCIsImZpbGUiOiJ1dGlscy50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgaXNBcnJheSxcbiAgaXNGdW5jLFxuICBpc051bSxcbiAgaXNPYmosXG4gIGlzU3RyaW5nLFxuICBjYW1lbFRvRGFzaCxcbiAgc3BsaXRDb21tYURlbGltaXRlZCxcbiAgY29udGFpbnMsXG4gIGlzRmlyc3RDaGFycyxcbiAgZ2V0VmFsdWVGcm9tRnVuY3Rpb25TdHJpbmcsXG4gIHNwbGl0Q29sb3JWYWx1ZXNcbn0gZnJvbSAnLi4vdXRpbHMnO1xuXG5kZXNjcmliZSgnY2FtZWxUb0Rhc2goKScsICgpID0+IHtcbiAgZXhwZWN0KGNhbWVsVG9EYXNoKCdmb29CYXJCb3AnKSkudG9CZSgnZm9vLWJhci1ib3AnKTtcbn0pO1xuXG5kZXNjcmliZSgnc3BsaXRDb21tYURlbGltaXRlZCgpJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHNwbGl0IGNvbW1hIGRlbGltaXRlZCBzdHJpbmcgaW50byBhcnJheScsICgpID0+IHtcbiAgICBleHBlY3Qoc3BsaXRDb21tYURlbGltaXRlZCgnZm9vLGJhcicpKS50b0VxdWFsKFsnZm9vJywgJ2JhciddKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2NvbnRhaW5zKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmV0dXJuIHRydWUgaWYgYXJndW1lbnQgY29udGFpbnMnLCAoKSA9PiB7XG4gICAgY29uc3QgY29udGFpbnNQeCA9IGNvbnRhaW5zKCdweCcpO1xuICAgIGV4cGVjdChjb250YWluc1B4KCdmYWNlJykpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdChjb250YWluc1B4KCdzb21lcHgnKSkudG9CZSh0cnVlKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2lzRmlyc3RDaGFycygpJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJldHVybiB0cnVlIGlmIGZpcnN0IGNoYXJzIGFyZSBlcXVhbCB0byBhcmdzJywgKCkgPT4ge1xuICAgIGNvbnN0IGlzQ29sb3IgPSBpc0ZpcnN0Q2hhcnMoJ3JnYicpO1xuICAgIGV4cGVjdChpc0NvbG9yKCd0ZXN0JykpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdChpc0NvbG9yKCdyZ2JhKCknKSkudG9CZSh0cnVlKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2dldFZhbHVlRnJvbUZ1bmN0aW9uU3RyaW5nKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmV0dXJuIHZhbHVlIGZyb20gZnVuY3Rpb24gc3RyaW5nJywgKCkgPT4ge1xuICAgIGV4cGVjdChnZXRWYWx1ZUZyb21GdW5jdGlvblN0cmluZygndHJhbnNsYXRlKDIwcHgpJykpLnRvQmUoJzIwcHgnKTtcbiAgICBleHBlY3QoZ2V0VmFsdWVGcm9tRnVuY3Rpb25TdHJpbmcoJ3JnYmEoMjU1LCAwLCAyNTUpJykpLnRvQmUoJzI1NSwgMCwgMjU1Jyk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdzcGxpdENvbG9yVmFsdWVzKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgc3BsaXQgYW4gYXJyYXkgb2YgdmFsdWVzIGludG8gdGhlIG5hbWVkIHZhbHVlcyBwcm92aWRlZCcsICgpID0+IHtcbiAgICBjb25zdCBzcGxpdFJHQlZhbHVlcyA9IHNwbGl0Q29sb3JWYWx1ZXMoWydyZWQnLCAnZ3JlZW4nLCAnYmx1ZSddKTtcbiAgICBleHBlY3Qoc3BsaXRSR0JWYWx1ZXMoJ3JnYmEoMjU1LDAsMjU1KScpKS50b0VxdWFsKHtcbiAgICAgIHJlZDogMjU1LFxuICAgICAgZ3JlZW46IDAsXG4gICAgICBibHVlOiAyNTVcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2lzQXJyYXkoKScsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBpZGVudGlmeSBhcnJheXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGlzQXJyYXkoW10pKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChpc0FycmF5KCcnKSkudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KGlzQXJyYXkoMCkpLnRvQmUoZmFsc2UpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnaXNGdW5jKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgaWRlbnRpZnkgZnVuY3Rpb25zJywgKCkgPT4ge1xuICAgIGV4cGVjdChpc0Z1bmMoKCkgPT4ge30pKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChpc0Z1bmMoJycpKS50b0JlKGZhbHNlKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2lzTnVtKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgaWRlbnRpZnkgbnVtYmVycycsICgpID0+IHtcbiAgICBleHBlY3QoaXNOdW0oMCkpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KGlzTnVtKCcnKSkudG9CZShmYWxzZSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdpc1N0cmluZygpJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGlkZW50aWZ5IHN0cmluZ3MnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGlzU3RyaW5nKCcnKSkudG9CZSh0cnVlKTtcbiAgICBleHBlY3QoaXNTdHJpbmcoMCkpLnRvQmUoZmFsc2UpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnaXNPYmooKScsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBpZGVudGlmeSBvYmplY3RzJywgKCkgPT4ge1xuICAgIGV4cGVjdChpc09iaih7fSkpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KGlzT2JqKCcnKSkudG9CZShmYWxzZSk7XG4gIH0pO1xufSk7XG4iXX0=