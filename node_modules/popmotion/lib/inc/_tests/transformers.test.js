'use strict';

var _transformers = require('../transformers');

describe('appendUnit()', function () {
  it('should return a function that appends a unit to provided numbers', function () {
    expect((0, _transformers.appendUnit)('px')(5)).toBe('5px');
  });
});

describe('applyOffset()', function () {
  it('should return a function that applys the offset from `from` and apply it to `to`', function () {
    expect((0, _transformers.applyOffset)(0, 10)(20)).toBe(30);
  });
});

describe('bezier()', function () {
  it('should return a function that resolves the provided bezier points with either 3 or 4 points', function () {
    var resolveBezier3 = (0, _transformers.bezier)([0, 1, 2]);
    expect(resolveBezier3(0)).toBe(0);
    expect(resolveBezier3(0.5)).toBe(1);
    expect(resolveBezier3(1)).toBe(2);

    var resolveBezier4 = (0, _transformers.bezier)([0, 1, 2, 3]);
    expect(resolveBezier4(0)).toBe(0);
    expect(resolveBezier4(0.5)).toBe(1.5);
    expect(resolveBezier4(1)).toBe(3);
  });
});

describe('clamp()', function () {
  it('should return a function that clamps numbers to within the provided range', function () {
    var clamper = (0, _transformers.clamp)(0, 1);
    expect(clamper(-1)).toBe(0);
    expect(clamper(0.5)).toBe(0.5);
  });
});

describe('clampMax()', function () {
  it('should return a function that clamps numbers to under the provided value', function () {
    var clamper = (0, _transformers.clampMax)(1);
    expect(clamper(0.5)).toBe(0.5);
    expect(clamper(2)).toBe(1);
  });
});

describe('clampMin()', function () {
  it('should return a function that clamps numbers to over the provided value', function () {
    var clamper = (0, _transformers.clampMin)(0);
    expect(clamper(1)).toBe(1);
    expect(clamper(-1)).toBe(0);
  });
});

describe('conditional()', function () {
  it('should return a function that only fires `ifTrue` if `check` is `true`', function () {
    var testCondition = (0, _transformers.conditional)(function (v) {
      return v < 0;
    }, function () {
      return 5;
    });

    expect(testCondition(-20)).toBe(5);
    expect(testCondition(20)).toBe(20);
  });

  it('should fire `ifFalse` if set', function () {
    var testCondition = (0, _transformers.conditional)(function (v) {
      return v === 0;
    }, function () {
      return true;
    }, function () {
      return false;
    });

    expect(testCondition(0)).toBe(true);
    expect(testCondition(1)).toBe(false);
  });
});

describe('flow', function () {
  it('should return a function that will pass all arguments to all functions in\n    order, with the first argument being replaced with the returned value\n    of the previous function', function () {
    var func = (0, _transformers.flow)(function (v, a) {
      return v * a;
    }, function (v, a) {
      return v + a;
    });

    expect(func(5, 2)).toBe(12);
  });
});

describe('interpolate()', function () {
  it('should create a function that interpolates between one range\n    of numbers to another', function () {
    var simpleInterpolator = (0, _transformers.interpolate)([0, 1000], [500, 600]);
    expect(simpleInterpolator(500)).toBe(550);

    var complexInterpolator = (0, _transformers.interpolate)([0, 100, 200], [1000, 500, 1000]);
    expect(complexInterpolator(100)).toBe(500);
  });

  it('should optionally accept an easing function', function () {});
});

describe('subtract()', function () {
  it('should return a function that returns an offset from the provided origin', function () {
    var offsetFrom50 = (0, _transformers.subtract)(50);
    expect(offsetFrom50(25)).toBe(-25);
    expect(offsetFrom50(75)).toBe(25);
  });
});

describe('add()', function () {
  it('should return a function that returns the value added to the origin', function () {
    var addTo50 = (0, _transformers.add)(50);
    expect(addTo50(25)).toBe(75);
    expect(addTo50(-75)).toBe(-25);
  });
});

describe('unit transformers', function () {
  it('should append the correct units', function () {
    expect((0, _transformers.px)(10)).toBe('10px');
    expect((0, _transformers.degrees)(360)).toBe('360deg');
    expect((0, _transformers.percent)(100)).toBe('100%');
    expect((0, _transformers.rgbUnit)(256)).toBe(255);
    expect((0, _transformers.rgbUnit)(24.5)).toBe(25);
    expect((0, _transformers.rgba)({
      red: 256,
      green: 24.5,
      blue: 0
    })).toBe('rgba(255, 25, 0, 1)');
    expect((0, _transformers.hsla)({
      hue: 100,
      saturation: 50,
      lightness: 50,
      alpha: 1
    })).toBe('hsla(100, 50%, 50%, 1)');
    expect((0, _transformers.alpha)(2)).toBe(1);
    expect((0, _transformers.color)({
      red: 256,
      green: 24.5,
      blue: 0
    })).toBe('rgba(255, 25, 0, 1)');
    expect((0, _transformers.color)({
      hue: 100,
      saturation: 50,
      lightness: 50,
      alpha: 1
    })).toBe('hsla(100, 50%, 50%, 1)');
  });
});

describe('steps()', function () {
  it('should return a function that correctly steps the value given to it across its range', function () {
    var threeStep = (0, _transformers.steps)(3, 0, 100);
    expect(threeStep(1)).toBe(0);
    expect(threeStep(49)).toBe(50);
    expect(threeStep(75)).toBe(100);
  });
});

describe('snap()', function () {
  it('should snap a number to the nearest in the provided array', function () {
    var snapTo = (0, _transformers.snap)([-100, -50, 100, 200]);

    expect(snapTo(-200)).toBe(-100);
    expect(snapTo(-100)).toBe(-100);
    expect(snapTo(-76)).toBe(-100);
    expect(snapTo(-74)).toBe(-50);
    expect(snapTo(0)).toBe(-50);
    expect(snapTo(99)).toBe(100);
    expect(snapTo(150)).toBe(200);
    expect(snapTo(300)).toBe(200);
  });

  it('should snap a number to a regular interval', function () {
    var snapTo = (0, _transformers.snap)(45);

    expect(snapTo(1)).toBe(0);
    expect(snapTo(44)).toBe(45);
    expect(snapTo(89)).toBe(90);
    expect(snapTo(-44)).toBe(-45);
  });
});

describe('wrap()', function () {
  it('should wrap numbers back around to the start of provided range', function () {
    var wrapAround = (0, _transformers.wrap)(-100, 100);

    expect(wrapAround(-100)).toBe(-100);
    expect(wrapAround(0)).toBe(0);
    expect(wrapAround(-200)).toBe(0);
    expect(wrapAround(101)).toBe(-99);
  });
});
//# sourceMappingURL=data:application/json;base64,