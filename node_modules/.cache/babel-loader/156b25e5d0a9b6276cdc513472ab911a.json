{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _framesync = require('framesync');\n\nvar _utils = require('../inc/utils');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Renderer = function () {\n  function Renderer(props) {\n    _classCallCheck(this, Renderer);\n\n    this.render = this.render.bind(this);\n    this.props = _extends({}, this.constructor.defaultProps, props);\n    this.state = {};\n    this.changedValues = [];\n  }\n  /**\n   * Get current state.\n   * If `key` is not defined, return entire cached state.\n   * If `key` is defined, return cached value if present.\n   * If `key` is defined and cached value is not present, read and return.\n   * @param  {string} (optional) key of value\n   * @return {value}\n   */\n\n\n  Renderer.prototype.get = function get(key) {\n    if (key) {\n      if (this.state[key] !== undefined) {\n        return this.state[key];\n      } else {\n        return this.read(key);\n      }\n    } else {\n      return this.state;\n    }\n  };\n  /**\n   * Read value according to `onRead`\n   * @param  {string} Name of property to read\n   * @return {[type]}\n   */\n\n\n  Renderer.prototype.read = function read(key) {\n    if (this.onRead) {\n      return this.onRead(key);\n    }\n  };\n  /**\n   * Update `state` with new values and schedule `render`.\n   * @param {object} values\n   * @param {value} value toset\n   */\n\n\n  Renderer.prototype.set = function set() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (typeof args[1] === 'undefined') {\n      var values = args[0]; // Set multiple values\n\n      for (var key in values) {\n        this.setValue(key, values[key]);\n      }\n    } else {\n      var _key2 = args[0],\n          value = args[1];\n      this.setValue(_key2, value);\n    }\n\n    if (this.hasChanged) {\n      (0, _framesync.onFrameRender)(this.render);\n    }\n\n    return this;\n  }; // > Wiley - 6 in the Morning\n\n  /**\n   * Set a single value\n   * If a string or number, set directly.\n   * If an object or array, create new object or array\n   * if it doesn't already exist. Then shallow compare\n   * to set and compare individual values.\n   * One of the clearer drawbacks and annoyances with\n   * using mutable instead of immutable states.\n   * @param {[type]} key\n   * @param {[type]} value\n   */\n\n\n  Renderer.prototype.setValue = function setValue(key, value) {\n    var currentValue = this.state[key]; // If number or string, set directly\n\n    if ((0, _utils.isNum)(value) || (0, _utils.isString)(value)) {\n      if (currentValue !== value) {\n        this.state[key] = value;\n        this.hasChanged = true;\n      }\n    } else if ((0, _utils.isArray)(value)) {\n      if (!currentValue) {\n        this.state[key] = [];\n      }\n\n      var numValues = value.length;\n\n      for (var i = 0; i < numValues; i++) {\n        if (this.state[key][i] !== value[i]) {\n          this.state[key][i] = value[i];\n          this.hasChanged = true;\n        }\n      }\n    } else if ((0, _utils.isObj)(value)) {\n      if (!currentValue) {\n        this.state[key] = {};\n      }\n\n      for (var valueKey in value) {\n        if (this.state[key][valueKey] !== value[valueKey]) {\n          this.state[key][valueKey] = value[valueKey];\n          this.hasChanged = true;\n        }\n      }\n    }\n\n    if (this.hasChanged && this.changedValues.indexOf(key) === -1) {\n      this.changedValues.push(key);\n    }\n  };\n  /**\n   * Fires `onRender` if values have changed or `forceRender`\n   * is set to true.\n   * @return {this}\n   */\n\n\n  Renderer.prototype.render = function render() {\n    var forceRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if ((forceRender || this.hasChanged) && this.onRender) {\n      this.onRender();\n    }\n\n    this.changedValues.length = 0;\n    this.hasChanged = false;\n    return this;\n  };\n\n  return Renderer;\n}();\n\nexports.default = Renderer;","map":null,"metadata":{},"sourceType":"script"}