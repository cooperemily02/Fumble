{"ast":null,"code":"'use strict';\n/**\n * Published when server description changes, but does NOT include changes to the RTT.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {ServerDescription} previousDescription The previous server description\n * @property {ServerDescription} newDescription The new server description\n */\n\nclass ServerDescriptionChangedEvent {\n  constructor(topologyId, address, previousDescription, newDescription) {\n    Object.assign(this, {\n      topologyId,\n      address,\n      previousDescription,\n      newDescription\n    });\n  }\n\n}\n/**\n * Published when server is initialized.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n */\n\n\nclass ServerOpeningEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, {\n      topologyId,\n      address\n    });\n  }\n\n}\n/**\n * Published when server is closed.\n *\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {Object} topologyId A unique identifier for the topology\n */\n\n\nclass ServerClosedEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, {\n      topologyId,\n      address\n    });\n  }\n\n}\n/**\n * Published when topology description changes.\n *\n * @property {Object} topologyId\n * @property {TopologyDescription} previousDescription The old topology description\n * @property {TopologyDescription} newDescription The new topology description\n */\n\n\nclass TopologyDescriptionChangedEvent {\n  constructor(topologyId, previousDescription, newDescription) {\n    Object.assign(this, {\n      topologyId,\n      previousDescription,\n      newDescription\n    });\n  }\n\n}\n/**\n * Published when topology is initialized.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\n\n\nclass TopologyOpeningEvent {\n  constructor(topologyId) {\n    Object.assign(this, {\n      topologyId\n    });\n  }\n\n}\n/**\n * Published when topology is closed.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\n\n\nclass TopologyClosedEvent {\n  constructor(topologyId) {\n    Object.assign(this, {\n      topologyId\n    });\n  }\n\n}\n/**\n * Fired when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @property {Object} connectionId The connection id for the command\n */\n\n\nclass ServerHeartbeatStartedEvent {\n  constructor(connectionId) {\n    Object.assign(this, {\n      connectionId\n    });\n  }\n\n}\n/**\n * Fired when the server monitor’s ismaster succeeds.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {Object} reply The command reply\n * @param {Object} connectionId The connection id for the command\n */\n\n\nclass ServerHeartbeatSucceededEvent {\n  constructor(duration, reply, connectionId) {\n    Object.assign(this, {\n      connectionId,\n      duration,\n      reply\n    });\n  }\n\n}\n/**\n * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {MongoError|Object} failure The command failure\n * @param {Object} connectionId The connection id for the command\n */\n\n\nclass ServerHeartbeatFailedEvent {\n  constructor(duration, failure, connectionId) {\n    Object.assign(this, {\n      connectionId,\n      duration,\n      failure\n    });\n  }\n\n}\n\nmodule.exports = {\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  ServerClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent,\n  TopologyClosedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent,\n  ServerHeartbeatFailedEvent\n};","map":null,"metadata":{},"sourceType":"script"}