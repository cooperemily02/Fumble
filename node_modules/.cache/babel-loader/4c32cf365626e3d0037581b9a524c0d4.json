{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _ = require('./');\n\nvar _2 = _interopRequireDefault(_);\n\nvar _framesync = require('framesync');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Parallel = function (_Action) {\n  _inherits(Parallel, _Action);\n\n  function Parallel(props) {\n    _classCallCheck(this, Parallel);\n\n    var actions = props.actions,\n        remainingProps = _objectWithoutProperties(props, ['actions']);\n\n    var _this = _possibleConstructorReturn(this, _Action.call(this, remainingProps));\n\n    _this.actions = [];\n    _this.current = [];\n\n    _this.addActions(actions);\n\n    return _this;\n  }\n\n  Parallel.prototype.addAction = function addAction(action) {\n    var _this2 = this;\n\n    if (this.actions.indexOf(action) !== -1) return;\n    this.actions.push(action);\n    var i = this.actions.length - 1;\n\n    var onUpdate = function onUpdate(v) {\n      _this2.current[i] = v;\n      (0, _framesync.onFrameUpdate)(_this2.scheduledUpdate);\n    };\n\n    onUpdate(action.get());\n    action.setProps({\n      _onStop: function _onStop() {\n        return _this2.numActiveActions--;\n      }\n    }).addListener(onUpdate);\n  };\n\n  Parallel.prototype.addActions = function addActions(actions) {\n    var _this3 = this;\n\n    actions.forEach(function (action) {\n      return _this3.addAction(action);\n    });\n  };\n\n  Parallel.prototype.onStart = function onStart() {\n    this.numActiveActions = this.actions.length;\n    this.actions.forEach(function (action) {\n      return action.start();\n    });\n  };\n\n  Parallel.prototype.onStop = function onStop() {\n    this.actions.forEach(function (action) {\n      return action.stop();\n    });\n  };\n\n  Parallel.prototype.getVelocity = function getVelocity() {\n    return this.actions.map(function (action) {\n      return action.getVelocity();\n    });\n  };\n\n  Parallel.prototype.isActionComplete = function isActionComplete() {\n    return this.numActiveActions === 0;\n  };\n\n  Parallel.prototype.getChildren = function getChildren() {\n    return this.actions;\n  };\n\n  return Parallel;\n}(_2.default);\n\nexports.default = function (actions, props) {\n  return new Parallel(_extends({\n    actions: actions\n  }, props));\n};","map":null,"metadata":{},"sourceType":"script"}