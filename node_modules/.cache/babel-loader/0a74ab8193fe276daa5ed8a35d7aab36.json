{"ast":null,"code":"'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst handleCallback = require('../utils').handleCallback;\n\nlet collection;\n\nfunction loadCollection() {\n  if (!collection) {\n    collection = require('../collection');\n  }\n\n  return collection;\n}\n\nclass CollectionsOperation extends OperationBase {\n  constructor(db, options) {\n    super(options);\n    this.db = db;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    let options = this.options;\n    let Collection = loadCollection();\n    options = Object.assign({}, options, {\n      nameOnly: true\n    }); // Let's get the collection names\n\n    db.listCollections({}, options).toArray((err, documents) => {\n      if (err != null) return handleCallback(callback, err, null); // Filter collections removing any illegal ones\n\n      documents = documents.filter(doc => {\n        return doc.name.indexOf('$') === -1;\n      }); // Return the collection objects\n\n      handleCallback(callback, null, documents.map(d => {\n        return new Collection(db, db.s.topology, db.databaseName, d.name, db.s.pkFactory, db.s.options);\n      }));\n    });\n  }\n\n}\n\nmodule.exports = CollectionsOperation;","map":null,"metadata":{},"sourceType":"script"}