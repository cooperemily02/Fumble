{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst CommandOperation = require('./command');\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst crypto = require('crypto');\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst toError = require('../utils').toError;\n\nclass AddUserOperation extends CommandOperation {\n  constructor(db, username, password, options) {\n    super(db, options);\n    this.username = username;\n    this.password = password;\n  }\n\n  _buildCommand() {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options; // Get additional values\n\n    let roles = [];\n    if (Array.isArray(options.roles)) roles = options.roles;\n    if (typeof options.roles === 'string') roles = [options.roles]; // If not roles defined print deprecated message\n    // TODO: handle deprecation properly\n\n    if (roles.length === 0) {\n      console.log('Creating a user without roles is deprecated in MongoDB >= 2.6');\n    } // Check the db name and add roles if needed\n\n\n    if ((db.databaseName.toLowerCase() === 'admin' || options.dbName === 'admin') && !Array.isArray(options.roles)) {\n      roles = ['root'];\n    } else if (!Array.isArray(options.roles)) {\n      roles = ['dbOwner'];\n    }\n\n    const digestPassword = db.s.topology.lastIsMaster().maxWireVersion >= 7;\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n      md5.update(username + ':mongo:' + password);\n      userPassword = md5.digest('hex');\n    } // Build the command to execute\n\n\n    const command = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    }; // No password\n\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    return command;\n  }\n\n  execute(callback) {\n    const options = this.options; // Error out if digestPassword set\n\n    if (options.digestPassword != null) {\n      return callback(toError(\"The digestPassword option is not supported via add_user. Please use db.command('createUser', ...) instead for this option.\"));\n    } // Attempt to execute auth command\n\n\n    super.execute((err, r) => {\n      if (!err) {\n        return handleCallback(callback, err, r);\n      }\n\n      return handleCallback(callback, err, null);\n    });\n  }\n\n}\n\ndefineAspects(AddUserOperation, Aspect.WRITE_OPERATION);\nmodule.exports = AddUserOperation;","map":null,"metadata":{},"sourceType":"script"}