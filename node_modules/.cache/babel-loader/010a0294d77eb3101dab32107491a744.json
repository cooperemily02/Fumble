{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/aramaswamy/Desktop/Fumble/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/aramaswamy/Desktop/Fumble/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\n/* global WebKitCSSMatrix */\nvar React = require('react');\n\nvar sleep = require('p-sleep');\n\nvar settings = {\n  snapBackDuration: 300,\n  maxTilt: 5,\n  bouncePower: 0.2,\n  swipeThreshold: 300 // px/s\n\n};\n\nvar getElementSize = function getElementSize(element) {\n  var elementStyles = window.getComputedStyle(element);\n  var widthString = elementStyles.getPropertyValue('width');\n  var width = Number(widthString.split('px')[0]);\n  var heightString = elementStyles.getPropertyValue('height');\n  var height = Number(heightString.split('px')[0]);\n  return {\n    x: width,\n    y: height\n  };\n};\n\nvar pythagoras = function pythagoras(x, y) {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n};\n\nvar animateOut = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(element, speed) {\n    var easeIn,\n        startPos,\n        bodySize,\n        diagonal,\n        velocity,\n        time,\n        multiplier,\n        translateString,\n        rotateString,\n        rotationPower,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            easeIn = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n            startPos = getTranslate(element);\n            bodySize = getElementSize(document.body);\n            diagonal = pythagoras(bodySize.x, bodySize.y);\n            velocity = pythagoras(speed.x, speed.y);\n            time = diagonal / velocity;\n            multiplier = diagonal / velocity;\n            translateString = translationString(speed.x * multiplier + startPos.x, -speed.y * multiplier + startPos.y);\n            rotateString = '';\n            rotationPower = 200;\n\n            if (easeIn) {\n              element.style.transition = 'ease ' + time + 's';\n            } else {\n              element.style.transition = 'ease-out ' + time + 's';\n            }\n\n            if (getRotation(element) === 0) {\n              rotateString = rotationString((Math.random() - 0.5) * rotationPower);\n            } else if (getRotation(element) > 0) {\n              rotateString = rotationString(Math.random() * rotationPower / 2 + getRotation(element));\n            } else {\n              rotateString = rotationString((Math.random() - 1) * rotationPower / 2 + getRotation(element));\n            }\n\n            element.style.transform = translateString + rotateString;\n            _context.next = 15;\n            return sleep(time * 1000);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function animateOut(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar animateBack = function animateBack(element) {\n  element.style.transition = settings.snapBackDuration + 'ms';\n  var startingPoint = getTranslate(element);\n  var translation = translationString(startingPoint.x * -settings.bouncePower, startingPoint.y * -settings.bouncePower);\n  var rotation = rotationString(getRotation(element) * -settings.bouncePower);\n  element.style.transform = translation + rotation;\n  setTimeout(function () {\n    element.style.transform = 'none';\n  }, settings.snapBackDuration * 0.75);\n  setTimeout(function () {\n    element.style.transition = '10ms';\n  }, settings.snapBackDuration);\n};\n\nvar getSwipeDirection = function getSwipeDirection(speed) {\n  if (Math.abs(speed.x) > Math.abs(speed.y)) {\n    return speed.x > 0 ? 'right' : 'left';\n  } else {\n    return speed.y > 0 ? 'up' : 'down';\n  }\n};\n\nvar calcSpeed = function calcSpeed(oldLocation, newLocation) {\n  var dx = newLocation.x - oldLocation.x;\n  var dy = oldLocation.y - newLocation.y;\n  var dt = (newLocation.time - oldLocation.time) / 1000;\n  return {\n    x: dx / dt,\n    y: dy / dt\n  };\n};\n\nvar translationString = function translationString(x, y) {\n  var translation = 'translate(' + x + 'px, ' + y + 'px)';\n  return translation;\n};\n\nvar rotationString = function rotationString(rot) {\n  var rotation = 'rotate(' + rot + 'deg)';\n  return rotation;\n};\n\nvar getTranslate = function getTranslate(element) {\n  var style = window.getComputedStyle(element);\n  var matrix = new WebKitCSSMatrix(style.webkitTransform);\n  var ans = {\n    x: matrix.m41,\n    y: matrix.m42\n  };\n  return ans;\n};\n\nvar getRotation = function getRotation(element) {\n  var style = window.getComputedStyle(element);\n  var matrix = new WebKitCSSMatrix(style.webkitTransform);\n  var ans = -Math.asin(matrix.m21) / (2 * Math.PI) * 360;\n  return ans;\n};\n\nvar dragableTouchmove = function dragableTouchmove(coordinates, element, offset, lastLocation) {\n  var pos = {\n    x: coordinates.x + offset.x,\n    y: coordinates.y + offset.y\n  };\n  var newLocation = {\n    x: pos.x,\n    y: pos.y,\n    time: new Date().getTime()\n  };\n  var translation = translationString(pos.x, pos.y);\n  var rotCalc = calcSpeed(lastLocation, newLocation).x / 1000;\n  var rotation = rotationString(rotCalc * settings.maxTilt);\n  element.style.transform = translation + rotation;\n  return newLocation;\n};\n\nvar touchCoordinatesFromEvent = function touchCoordinatesFromEvent(e) {\n  var touchLocation = e.targetTouches[0];\n  return {\n    x: touchLocation.clientX,\n    y: touchLocation.clientY\n  };\n};\n\nvar mouseCoordinatesFromEvent = function mouseCoordinatesFromEvent(e) {\n  return {\n    x: e.clientX,\n    y: e.clientY\n  };\n};\n\nvar TinderCard = React.forwardRef(function (_ref2, ref) {\n  var _ref2$flickOnSwipe = _ref2.flickOnSwipe,\n      flickOnSwipe = _ref2$flickOnSwipe === void 0 ? true : _ref2$flickOnSwipe,\n      children = _ref2.children,\n      onSwipe = _ref2.onSwipe,\n      onCardLeftScreen = _ref2.onCardLeftScreen,\n      className = _ref2.className,\n      _ref2$preventSwipe = _ref2.preventSwipe,\n      preventSwipe = _ref2$preventSwipe === void 0 ? [] : _ref2$preventSwipe;\n  var swipeAlreadyReleased = React.useRef(false);\n  var element = React.useRef();\n  React.useImperativeHandle(ref, function () {\n    return {\n      swipe: function swipe() {\n        var _arguments = arguments;\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var dir, power, disturbance;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  dir = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : 'right';\n                  if (onSwipe) onSwipe(dir);\n                  power = 1000;\n                  disturbance = (Math.random() - 0.5) * 100;\n\n                  if (!(dir === 'right')) {\n                    _context2.next = 9;\n                    break;\n                  }\n\n                  _context2.next = 7;\n                  return animateOut(element.current, {\n                    x: power,\n                    y: disturbance\n                  }, true);\n\n                case 7:\n                  _context2.next = 12;\n                  break;\n\n                case 9:\n                  if (!(dir === 'left')) {\n                    _context2.next = 12;\n                    break;\n                  }\n\n                  _context2.next = 12;\n                  return animateOut(element.current, {\n                    x: -power,\n                    y: disturbance\n                  }, true);\n\n                case 12:\n                  // } else if (dir === 'up') {\n                  //   await animateBack(element.current)\n                  // } else if (dir === 'down') {\n                  //   await animateOut(element.current, { x: disturbance, y: -power }, true)\n                  // }\n                  element.current.style.display = 'none';\n                  if (onCardLeftScreen) onCardLeftScreen(dir);\n\n                case 14:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }))();\n      }\n    };\n  });\n  var handleSwipeReleased = React.useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(element, speed) {\n      var dir;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!swipeAlreadyReleased.current) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              swipeAlreadyReleased.current = true; // Check if this is a swipe\n\n              if (!(Math.abs(speed.x) > settings.swipeThreshold || Math.abs(speed.y) > settings.swipeThreshold)) {\n                _context3.next = 13;\n                break;\n              }\n\n              dir = getSwipeDirection(speed);\n              if (onSwipe) onSwipe(dir);\n\n              if (!flickOnSwipe) {\n                _context3.next = 13;\n                break;\n              }\n\n              if (preventSwipe.includes(dir)) {\n                _context3.next = 13;\n                break;\n              }\n\n              _context3.next = 10;\n              return animateOut(element, speed);\n\n            case 10:\n              element.style.display = 'none';\n              if (onCardLeftScreen) onCardLeftScreen(dir);\n              return _context3.abrupt(\"return\");\n\n            case 13:\n              // Card was not flicked away, animate back to start\n              animateBack(element);\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [swipeAlreadyReleased, flickOnSwipe, onSwipe, onCardLeftScreen, preventSwipe]);\n  var handleSwipeStart = React.useCallback(function () {\n    swipeAlreadyReleased.current = false;\n  }, [swipeAlreadyReleased]);\n  React.useLayoutEffect(function () {\n    var offset = {\n      x: null,\n      y: null\n    };\n    var speed = {\n      x: 0,\n      y: 0\n    };\n    var lastLocation = {\n      x: 0,\n      y: 0,\n      time: new Date().getTime()\n    };\n    var mouseIsClicked = false;\n    element.current.addEventListener('touchstart', function (ev) {\n      ev.preventDefault();\n      handleSwipeStart();\n      offset = {\n        x: -touchCoordinatesFromEvent(ev).x,\n        y: -touchCoordinatesFromEvent(ev).y\n      };\n    });\n    element.current.addEventListener('mousedown', function (ev) {\n      ev.preventDefault();\n      mouseIsClicked = true;\n      handleSwipeStart();\n      offset = {\n        x: -mouseCoordinatesFromEvent(ev).x,\n        y: -mouseCoordinatesFromEvent(ev).y\n      };\n    });\n    element.current.addEventListener('touchmove', function (ev) {\n      ev.preventDefault();\n      var newLocation = dragableTouchmove(touchCoordinatesFromEvent(ev), element.current, offset, lastLocation);\n      speed = calcSpeed(lastLocation, newLocation);\n      lastLocation = newLocation;\n    });\n    element.current.addEventListener('mousemove', function (ev) {\n      ev.preventDefault();\n\n      if (mouseIsClicked) {\n        var newLocation = dragableTouchmove(mouseCoordinatesFromEvent(ev), element.current, offset, lastLocation);\n        speed = calcSpeed(lastLocation, newLocation);\n        lastLocation = newLocation;\n      }\n    });\n    element.current.addEventListener('touchend', function (ev) {\n      ev.preventDefault();\n      handleSwipeReleased(element.current, speed);\n    });\n    element.current.addEventListener('mouseup', function (ev) {\n      if (mouseIsClicked) {\n        ev.preventDefault();\n        mouseIsClicked = false;\n        handleSwipeReleased(element.current, speed);\n      }\n    });\n    element.current.addEventListener('mouseleave', function (ev) {\n      if (mouseIsClicked) {\n        ev.preventDefault();\n        mouseIsClicked = false;\n        handleSwipeReleased(element.current, speed);\n      }\n    });\n  }, []);\n  return React.createElement('div', {\n    ref: element,\n    className: className\n  }, children);\n});\nmodule.exports = TinderCard;","map":null,"metadata":{},"sourceType":"script"}