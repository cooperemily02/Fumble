{"ast":null,"code":"'use strict';\n\nconst buildCountCommand = require('./common_functions').buildCountCommand;\n\nconst OperationBase = require('./operation').OperationBase;\n\nclass CountOperation extends OperationBase {\n  constructor(cursor, applySkipLimit, options) {\n    super(options);\n    this.cursor = cursor;\n    this.applySkipLimit = applySkipLimit;\n  }\n\n  execute(callback) {\n    const cursor = this.cursor;\n    const applySkipLimit = this.applySkipLimit;\n    const options = this.options;\n\n    if (applySkipLimit) {\n      if (typeof cursor.cursorSkip() === 'number') options.skip = cursor.cursorSkip();\n      if (typeof cursor.cursorLimit() === 'number') options.limit = cursor.cursorLimit();\n    } // Ensure we have the right read preference inheritance\n\n\n    if (options.readPreference) {\n      cursor.setReadPreference(options.readPreference);\n    }\n\n    if (typeof options.maxTimeMS !== 'number' && cursor.cmd && typeof cursor.cmd.maxTimeMS === 'number') {\n      options.maxTimeMS = cursor.cmd.maxTimeMS;\n    }\n\n    let finalOptions = {};\n    finalOptions.skip = options.skip;\n    finalOptions.limit = options.limit;\n    finalOptions.hint = options.hint;\n    finalOptions.maxTimeMS = options.maxTimeMS; // Command\n\n    finalOptions.collectionName = cursor.namespace.collection;\n    let command;\n\n    try {\n      command = buildCountCommand(cursor, cursor.cmd.query, finalOptions);\n    } catch (err) {\n      return callback(err);\n    } // Set cursor server to the same as the topology\n\n\n    cursor.server = cursor.topology.s.coreTopology; // Execute the command\n\n    cursor.topology.command(cursor.namespace.withCollection('$cmd'), command, cursor.options, (err, result) => {\n      callback(err, result ? result.result.n : null);\n    });\n  }\n\n}\n\nmodule.exports = CountOperation;","map":null,"metadata":{},"sourceType":"script"}