{"ast":null,"code":"'use strict'; // shared state names\n\nconst STATE_CLOSING = 'closing';\nconst STATE_CLOSED = 'closed';\nconst STATE_CONNECTING = 'connecting';\nconst STATE_CONNECTED = 'connected'; // An enumeration of topology types we know about\n\nconst TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n}; // An enumeration of server types we know about\n\nconst ServerType = {\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n}; // helper to get a server's type that works for both legacy and unified topologies\n\nfunction serverType(server) {\n  let description = server.s.description || server.s.serverDescription;\n  if (description.topologyType === TopologyType.Single) return description.servers[0].type;\n  return description.type;\n}\n\nconst TOPOLOGY_DEFAULTS = {\n  useUnifiedTopology: true,\n  localThresholdMS: 15,\n  serverSelectionTimeoutMS: 30000,\n  heartbeatFrequencyMS: 10000,\n  minHeartbeatFrequencyMS: 500\n};\n\nfunction drainTimerQueue(queue) {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\n\nfunction clearAndRemoveTimerFrom(timer, timers) {\n  clearTimeout(timer);\n  return timers.delete(timer);\n}\n\nmodule.exports = {\n  STATE_CLOSING,\n  STATE_CLOSED,\n  STATE_CONNECTING,\n  STATE_CONNECTED,\n  TOPOLOGY_DEFAULTS,\n  TopologyType,\n  ServerType,\n  serverType,\n  drainTimerQueue,\n  clearAndRemoveTimerFrom\n};","map":null,"metadata":{},"sourceType":"script"}