{"ast":null,"code":"'use strict';\n\nconst Topology = require('../core').Topology;\n\nconst ServerCapabilities = require('./topology_base').ServerCapabilities;\n\nconst Cursor = require('../cursor');\n\nconst translateOptions = require('../utils').translateOptions;\n\nclass NativeTopology extends Topology {\n  constructor(servers, options) {\n    options = options || {};\n    let clonedOptions = Object.assign({}, {\n      cursorFactory: Cursor,\n      reconnect: false,\n      emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n      maxPoolSize: typeof options.maxPoolSize === 'number' ? options.maxPoolSize : typeof options.poolSize === 'number' ? options.poolSize : 10,\n      minPoolSize: typeof options.minPoolSize === 'number' ? options.minPoolSize : typeof options.minSize === 'number' ? options.minSize : 0,\n      monitorCommands: typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n    }); // Translate any SSL options and other connectivity options\n\n    clonedOptions = translateOptions(clonedOptions, options); // Socket options\n\n    var socketOptions = options.socketOptions && Object.keys(options.socketOptions).length > 0 ? options.socketOptions : options; // Translate all the options to the core types\n\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n    super(servers, clonedOptions);\n  }\n\n  capabilities() {\n    if (this.s.sCapabilities) return this.s.sCapabilities;\n    if (this.lastIsMaster() == null) return null;\n    this.s.sCapabilities = new ServerCapabilities(this.lastIsMaster());\n    return this.s.sCapabilities;\n  } // Command\n\n\n  command(ns, cmd, options, callback) {\n    super.command(ns.toString(), cmd, options, callback);\n  } // Insert\n\n\n  insert(ns, ops, options, callback) {\n    super.insert(ns.toString(), ops, options, callback);\n  } // Update\n\n\n  update(ns, ops, options, callback) {\n    super.update(ns.toString(), ops, options, callback);\n  } // Remove\n\n\n  remove(ns, ops, options, callback) {\n    super.remove(ns.toString(), ops, options, callback);\n  }\n\n}\n\nmodule.exports = NativeTopology;","map":null,"metadata":{},"sourceType":"script"}