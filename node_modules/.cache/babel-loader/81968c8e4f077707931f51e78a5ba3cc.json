{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.splitColorValues = splitColorValues;\n\nvar varType = function varType(variable) {\n  return Object.prototype.toString.call(variable).slice(8, -1);\n};\n\nvar CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;\nvar REPLACE_TEMPLATE = '$1-$2';\n/*\n  Convert camelCase to dash-case\n\n  @param [string]\n  @return [string]\n*/\n\nvar camelToDash = exports.camelToDash = function camelToDash(string) {\n  return string.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();\n};\n\nvar setDOMAttrs = exports.setDOMAttrs = function setDOMAttrs(element, attrs) {\n  for (var key in attrs) {\n    if (attrs.hasOwnProperty(key)) {\n      element.setAttribute(key, attrs[key]);\n    }\n  }\n};\n/*\n  Split comma-delimited string\n\n  \"foo,bar\" -> [\"foo\", \"bar\"]\n\n  @param [string]\n  @return [array]\n*/\n\n\nvar splitCommaDelimited = exports.splitCommaDelimited = function splitCommaDelimited(value) {\n  return isString(value) ? value.split(/,\\s*/) : [value];\n};\n/**\n *  Returns a function that will check any argument for `term`\n * `contains('needle')('haystack')`\n */\n\n\nvar contains = exports.contains = function contains(term) {\n  return function (v) {\n    return isString(term) && v.indexOf(term) !== -1;\n  };\n};\n/**\n *  Returns a function that will check to see if an argument is\n *  the first characters in the provided `term`\n * `isFirstChars('needle')('haystack')`\n */\n\n\nvar isFirstChars = exports.isFirstChars = function isFirstChars(term) {\n  return function (v) {\n    return isString(term) && v.indexOf(term) === 0;\n  };\n};\n/**\n * Create a unit value type\n */\n\n\nvar createUnitType = exports.createUnitType = function createUnitType(type, transform) {\n  return {\n    test: contains(type),\n    parse: parseFloat,\n    transform: transform\n  };\n};\n/*\n  Get value from function string\n  \"translateX(20px)\" -> \"20px\"\n*/\n\n\nvar getValueFromFunctionString = exports.getValueFromFunctionString = function getValueFromFunctionString(value) {\n  return value.substring(value.indexOf('(') + 1, value.lastIndexOf(')'));\n};\n/**\n * Creates a function that will split color\n * values from string into an object of properties\n * `mapArrayToObject(['red', 'green', 'blue'])('rgba(0,0,0)')`\n */\n\n\nfunction splitColorValues(terms) {\n  var numTerms = terms.length;\n  return function (v) {\n    var values = {};\n    var valuesArray = splitCommaDelimited(getValueFromFunctionString(v));\n\n    for (var i = 0; i < numTerms; i++) {\n      values[terms[i]] = valuesArray[i] !== undefined ? parseFloat(valuesArray[i]) : 1;\n    }\n\n    return values;\n  };\n}\n/*\n  Is utils var an array ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if utils.varType === 'Array'\n*/\n\n\nvar isArray = exports.isArray = function isArray(arr) {\n  return varType(arr) === 'Array';\n};\n/*\n  Is utils var a function ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if utils.varType === 'Function'\n*/\n\n\nvar isFunc = exports.isFunc = function isFunc(obj) {\n  return varType(obj) === 'Function';\n};\n/*\n  Is utils var a number?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof === 'number'\n*/\n\n\nvar isNum = exports.isNum = function isNum(num) {\n  return typeof num === 'number';\n};\n/*\n  Is utils var an object?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof === 'object'\n*/\n\n\nvar isObj = exports.isObj = function isObj(obj) {\n  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n};\n/*\n  Is utils var a string ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof str === 'string'\n*/\n\n\nvar isString = exports.isString = function isString(str) {\n  return typeof str === 'string';\n};\n\nvar isHex = exports.isHex = isFirstChars('#');\nvar isRgb = exports.isRgb = isFirstChars('rgb');\nvar isHsl = exports.isHsl = isFirstChars('hsl');\n\nvar isColor = exports.isColor = function isColor(v) {\n  return isHex(v) || isRgb(v) || isHsl(v);\n};","map":null,"metadata":{},"sourceType":"script"}