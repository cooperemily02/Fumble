{"ast":null,"code":"'use strict';\n\nconst CommandOperationV2 = require('./command_v2');\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst maxWireVersion = require('../core/utils').maxWireVersion;\n\nconst CONSTANTS = require('../constants');\n\nconst LIST_COLLECTIONS_WIRE_VERSION = 3;\n\nfunction listCollectionsTransforms(databaseName) {\n  const matching = `${databaseName}.`;\n  return {\n    doc: doc => {\n      const index = doc.name.indexOf(matching); // Remove database name if available\n\n      if (doc.name && index === 0) {\n        doc.name = doc.name.substr(index + matching.length);\n      }\n\n      return doc;\n    }\n  };\n}\n\nclass ListCollectionsOperation extends CommandOperationV2 {\n  constructor(db, filter, options) {\n    super(db, options, {\n      fullResponse: true\n    });\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  execute(server, callback) {\n    if (maxWireVersion(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n      let filter = this.filter;\n      const databaseName = this.db.s.namespace.db; // If we have legacy mode and have not provided a full db name filter it\n\n      if (typeof filter.name === 'string' && !new RegExp('^' + databaseName + '\\\\.').test(filter.name)) {\n        filter = Object.assign({}, filter);\n        filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n      } // No filter, filter by current database\n\n\n      if (filter == null) {\n        filter.name = `/${databaseName}/`;\n      } // Rewrite the filter to use $and to filter out indexes\n\n\n      if (filter.name) {\n        filter = {\n          $and: [{\n            name: filter.name\n          }, {\n            name: /^((?!\\$).)*$/\n          }]\n        };\n      } else {\n        filter = {\n          name: /^((?!\\$).)*$/\n        };\n      }\n\n      const transforms = listCollectionsTransforms(databaseName);\n      server.query(`${databaseName}.${CONSTANTS.SYSTEM_NAMESPACE_COLLECTION}`, {\n        query: filter\n      }, {\n        batchSize: this.batchSize || 1000\n      }, {}, (err, result) => {\n        if (result && result.message && result.message.documents && Array.isArray(result.message.documents)) {\n          result.message.documents = result.message.documents.map(transforms.doc);\n        }\n\n        callback(err, result);\n      });\n      return;\n    }\n\n    const command = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? {\n        batchSize: this.batchSize\n      } : {},\n      nameOnly: this.nameOnly\n    };\n    return super.executeCommand(server, command, callback);\n  }\n\n}\n\ndefineAspects(ListCollectionsOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXECUTE_WITH_SELECTION]);\nmodule.exports = ListCollectionsOperation;","map":null,"metadata":{},"sourceType":"script"}