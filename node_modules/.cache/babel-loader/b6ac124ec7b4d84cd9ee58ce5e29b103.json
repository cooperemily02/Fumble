{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = buildStylePropertyString;\n\nvar _transformProps = require('./transform-props');\n\nvar _transformProps2 = _interopRequireDefault(_transformProps);\n\nvar _valueTypes = require('./value-types');\n\nvar _valueTypes2 = _interopRequireDefault(_valueTypes);\n\nvar _prefixer = require('./prefixer');\n\nvar _prefixer2 = _interopRequireDefault(_prefixer);\n\nvar _utils = require('../../inc/utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar translate = _transformProps2.default.translate,\n    translateX = _transformProps2.default.translateX,\n    translateY = _transformProps2.default.translateY,\n    translateZ = _transformProps2.default.translateZ,\n    scale = _transformProps2.default.scale,\n    scaleX = _transformProps2.default.scaleX,\n    scaleY = _transformProps2.default.scaleY,\n    scaleZ = _transformProps2.default.scaleZ,\n    rotate = _transformProps2.default.rotate,\n    rotateX = _transformProps2.default.rotateX,\n    rotateY = _transformProps2.default.rotateY,\n    rotateZ = _transformProps2.default.rotateZ;\nvar translateMap = {\n  x: 'translateX',\n  y: 'translateY',\n  z: 'translateZ'\n};\nvar transformPropOrder = [translate, translateX, translateY, translateZ, scale, scaleX, scaleY, scaleZ, rotate, rotateX, rotateY, rotateZ];\n\nfunction sortTransformProps(a, b) {\n  return transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\n}\n\nfunction buildStylePropertyString(element, state, changedValues, enableHardwareAcceleration) {\n  var propertyString = '';\n  var transformString = '';\n  var hasTransform = false;\n  var transformHasZ = false; // First check if there are any changed transform values\n  // and if true add all transform values\n\n  var numChangedValues = changedValues.length;\n\n  for (var i = 0; i < numChangedValues; i++) {\n    var key = changedValues[i]; // If this is a transform property, add all other transform props\n    // to changedValues and then break\n\n    if (_transformProps2.default[key]) {\n      hasTransform = true;\n\n      for (var _key in state) {\n        if (_transformProps2.default[_key] && changedValues.indexOf(_key) === -1) {\n          changedValues.push(_key);\n        }\n      }\n\n      break;\n    }\n  }\n\n  changedValues.sort(sortTransformProps); // Now run through each property, and decide which is a plain style props,\n  // a transform property and CSS vars and handle accordingly\n\n  var totalNumChangedValues = changedValues.length;\n\n  for (var _i = 0; _i < totalNumChangedValues; _i++) {\n    var _key2 = changedValues[_i];\n    var value = state[_key2];\n\n    if (translateMap[_key2]) {\n      _key2 = translateMap[_key2];\n    } // If this is a number or object and we have filter, apply filter\n\n\n    if (_valueTypes2.default[_key2] && ((0, _utils.isNum)(value) || (0, _utils.isObj)(value)) && _valueTypes2.default[_key2].transform) {\n      value = _valueTypes2.default[_key2].transform(value);\n    } // If a transform prop, add to transform string\n\n\n    if (_transformProps2.default[_key2]) {\n      transformString += _key2 + '(' + value + ') ';\n      transformHasZ = _key2 === translateMap.z ? true : transformHasZ; // Or if a simple CSS property, set\n    } else {\n      propertyString += ';' + (0, _prefixer2.default)(_key2, true) + ':' + value;\n    }\n  } // If we have transform props, build a transform string\n\n\n  if (hasTransform) {\n    if (!transformHasZ && enableHardwareAcceleration) {\n      transformString += translateMap.z + '(0)';\n    }\n\n    propertyString += ';' + (0, _prefixer2.default)('transform', true) + ':' + transformString;\n  }\n\n  element.style.cssText += propertyString;\n}","map":{"version":3,"sources":["../../../src/renderers/css/render.js"],"names":["translate","translateX","translateY","translateZ","scale","scaleX","scaleY","scaleZ","rotate","rotateX","rotateY","rotateZ","translateMap","x","y","z","transformPropOrder","buildStylePropertyString","propertyString","transformString","hasTransform","transformHasZ","numChangedValues","changedValues","i","key","totalNumChangedValues","value","state","element"],"mappings":"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","sourcesContent":["import transformProps from './transform-props';\nimport valueTypes from './value-types';\nimport prefixer from './prefixer';\nimport { isNum, isObj } from '../../inc/utils';\n\nconst {\n  translate,\n  translateX,\n  translateY,\n  translateZ,\n  scale,\n  scaleX,\n  scaleY,\n  scaleZ,\n  rotate,\n  rotateX,\n  rotateY,\n  rotateZ\n} = transformProps;\n\nconst translateMap = {\n  x: 'translateX',\n  y: 'translateY',\n  z: 'translateZ'\n};\n\nconst transformPropOrder = [\n  translate,\n  translateX,\n  translateY,\n  translateZ,\n  scale,\n  scaleX,\n  scaleY,\n  scaleZ,\n  rotate,\n  rotateX,\n  rotateY,\n  rotateZ\n];\n\nfunction sortTransformProps(a, b) {\n  return transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\n}\n\nexport default function buildStylePropertyString(element, state, changedValues, enableHardwareAcceleration) {\n  let propertyString = '';\n  let transformString = '';\n  let hasTransform = false;\n  let transformHasZ = false;\n\n  // First check if there are any changed transform values\n  // and if true add all transform values\n  const numChangedValues = changedValues.length;\n  for (let i = 0; i < numChangedValues; i++) {\n    let key = changedValues[i];\n\n    // If this is a transform property, add all other transform props\n    // to changedValues and then break\n    if (transformProps[key]) {\n      hasTransform = true;\n\n      for (let key in state) {\n        if (transformProps[key] && changedValues.indexOf(key) === -1) {\n          changedValues.push(key);\n        }\n      }\n\n      break;\n    }\n  }\n\n  changedValues.sort(sortTransformProps);\n\n  // Now run through each property, and decide which is a plain style props,\n  // a transform property and CSS vars and handle accordingly\n  const totalNumChangedValues = changedValues.length;\n  for (let i = 0; i < totalNumChangedValues; i++) {\n    let key = changedValues[i];\n    let value = state[key];\n\n    if (translateMap[key]) {\n      key = translateMap[key];\n    }\n\n    // If this is a number or object and we have filter, apply filter\n    if (valueTypes[key] && (isNum(value) || isObj(value)) && valueTypes[key].transform) {\n      value = valueTypes[key].transform(value);\n    }\n\n    // If a transform prop, add to transform string\n    if (transformProps[key]) {\n      transformString += key + '(' + value + ') ';\n      transformHasZ = (key === translateMap.z) ? true : transformHasZ;\n\n    // Or if a simple CSS property, set\n    } else {\n      propertyString += ';' + prefixer(key, true) + ':' + value;\n    }\n  }\n\n  // If we have transform props, build a transform string\n  if (hasTransform) {\n    if (!transformHasZ && enableHardwareAcceleration) {\n      transformString += translateMap.z + '(0)';\n    }\n\n    propertyString += ';' + prefixer('transform', true) + ':' + transformString;\n  }\n\n  element.style.cssText += propertyString;\n}\n"]},"metadata":{},"sourceType":"script"}