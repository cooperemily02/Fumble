{"ast":null,"code":"'use strict';\n\nconst inherits = require('util').inherits;\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst MongoError = require('../error').MongoError;\n\nconst MongoTimeoutError = require('../error').MongoTimeoutError;\n\nconst MongoWriteConcernError = require('../error').MongoWriteConcernError;\n\nconst Logger = require('./logger');\n\nconst f = require('util').format;\n\nconst Msg = require('./msg').Msg;\n\nconst CommandResult = require('./command_result');\n\nconst MESSAGE_HEADER_SIZE = require('../wireprotocol/shared').MESSAGE_HEADER_SIZE;\n\nconst COMPRESSION_DETAILS_SIZE = require('../wireprotocol/shared').COMPRESSION_DETAILS_SIZE;\n\nconst opcodes = require('../wireprotocol/shared').opcodes;\n\nconst compress = require('../wireprotocol/compression').compress;\n\nconst compressorIDs = require('../wireprotocol/compression').compressorIDs;\n\nconst uncompressibleCommands = require('../wireprotocol/compression').uncompressibleCommands;\n\nconst apm = require('./apm');\n\nconst Buffer = require('safe-buffer').Buffer;\n\nconst connect = require('./connect');\n\nconst updateSessionFromResponse = require('../sessions').updateSessionFromResponse;\n\nconst eachAsync = require('../utils').eachAsync;\n\nconst makeStateMachine = require('../utils').makeStateMachine;\n\nconst now = require('../../utils').now;\n\nconst DISCONNECTED = 'disconnected';\nconst CONNECTING = 'connecting';\nconst CONNECTED = 'connected';\nconst DRAINING = 'draining';\nconst DESTROYING = 'destroying';\nconst DESTROYED = 'destroyed';\nconst stateTransition = makeStateMachine({\n  [DISCONNECTED]: [CONNECTING, DRAINING, DISCONNECTED],\n  [CONNECTING]: [CONNECTING, CONNECTED, DRAINING, DISCONNECTED],\n  [CONNECTED]: [CONNECTED, DISCONNECTED, DRAINING],\n  [DRAINING]: [DRAINING, DESTROYING, DESTROYED],\n  [DESTROYING]: [DESTROYING, DESTROYED],\n  [DESTROYED]: [DESTROYED]\n});\nconst CONNECTION_EVENTS = new Set(['error', 'close', 'timeout', 'parseError', 'connect', 'message']);\nvar _id = 0;\n/**\n * Creates a new Pool instance\n * @class\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Max server connection pool size\n * @param {number} [options.minSize=0] Minimum server connection pool size\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=120000] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {number} [options.monitoringSocketTimeout=0] TCP Socket timeout setting for replicaset monitoring socket\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=false] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @fires Pool#connect\n * @fires Pool#close\n * @fires Pool#error\n * @fires Pool#timeout\n * @fires Pool#parseError\n * @return {Pool} A cursor instance\n */\n\nvar Pool = function (topology, options) {\n  // Add event listener\n  EventEmitter.call(this); // Store topology for later use\n\n  this.topology = topology;\n  this.s = {\n    state: DISCONNECTED,\n    cancellationToken: new EventEmitter()\n  }; // we don't care how many connections are listening for cancellation\n\n  this.s.cancellationToken.setMaxListeners(Infinity); // Add the options\n\n  this.options = Object.assign({\n    // Host and port settings\n    host: 'localhost',\n    port: 27017,\n    // Pool default max size\n    size: 5,\n    // Pool default min size\n    minSize: 0,\n    // socket settings\n    connectionTimeout: 30000,\n    socketTimeout: 0,\n    keepAlive: true,\n    keepAliveInitialDelay: 120000,\n    noDelay: true,\n    // SSL Settings\n    ssl: false,\n    checkServerIdentity: true,\n    ca: null,\n    crl: null,\n    cert: null,\n    key: null,\n    passphrase: null,\n    rejectUnauthorized: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    // Reconnection options\n    reconnect: true,\n    reconnectInterval: 1000,\n    reconnectTries: 30,\n    // Enable domains\n    domainsEnabled: false,\n    // feature flag for determining if we are running with the unified topology or not\n    legacyCompatMode: true\n  }, options); // Identification information\n\n  this.id = _id++; // Current reconnect retries\n\n  this.retriesLeft = this.options.reconnectTries;\n  this.reconnectId = null;\n  this.reconnectError = null; // No bson parser passed in\n\n  if (!options.bson || options.bson && (typeof options.bson.serialize !== 'function' || typeof options.bson.deserialize !== 'function')) {\n    throw new Error('must pass in valid bson parser');\n  } // Logger instance\n\n\n  this.logger = Logger('Pool', options); // Connections\n\n  this.availableConnections = [];\n  this.inUseConnections = [];\n  this.connectingConnections = 0; // Currently executing\n\n  this.executing = false; // Operation work queue\n\n  this.queue = []; // Number of consecutive timeouts caught\n\n  this.numberOfConsecutiveTimeouts = 0; // Current pool Index\n\n  this.connectionIndex = 0; // event handlers\n\n  const pool = this;\n  this._messageHandler = messageHandler(this);\n\n  this._connectionCloseHandler = function (err) {\n    const connection = this;\n    connectionFailureHandler(pool, 'close', err, connection);\n  };\n\n  this._connectionErrorHandler = function (err) {\n    const connection = this;\n    connectionFailureHandler(pool, 'error', err, connection);\n  };\n\n  this._connectionTimeoutHandler = function (err) {\n    const connection = this;\n    connectionFailureHandler(pool, 'timeout', err, connection);\n  };\n\n  this._connectionParseErrorHandler = function (err) {\n    const connection = this;\n    connectionFailureHandler(pool, 'parseError', err, connection);\n  };\n};\n\ninherits(Pool, EventEmitter);\nObject.defineProperty(Pool.prototype, 'size', {\n  enumerable: true,\n  get: function () {\n    return this.options.size;\n  }\n});\nObject.defineProperty(Pool.prototype, 'minSize', {\n  enumerable: true,\n  get: function () {\n    return this.options.minSize;\n  }\n});\nObject.defineProperty(Pool.prototype, 'connectionTimeout', {\n  enumerable: true,\n  get: function () {\n    return this.options.connectionTimeout;\n  }\n});\nObject.defineProperty(Pool.prototype, 'socketTimeout', {\n  enumerable: true,\n  get: function () {\n    return this.options.socketTimeout;\n  }\n});\nObject.defineProperty(Pool.prototype, 'state', {\n  enumerable: true,\n  get: function () {\n    return this.s.state;\n  }\n}); // clears all pool state\n\nfunction resetPoolState(pool) {\n  pool.inUseConnections = [];\n  pool.availableConnections = [];\n  pool.connectingConnections = 0;\n  pool.executing = false;\n  pool.numberOfConsecutiveTimeouts = 0;\n  pool.connectionIndex = 0;\n  pool.retriesLeft = pool.options.reconnectTries;\n  pool.reconnectId = null;\n}\n\nfunction connectionFailureHandler(pool, event, err, conn) {\n  if (conn) {\n    if (conn._connectionFailHandled) {\n      return;\n    }\n\n    conn._connectionFailHandled = true;\n    conn.destroy(); // Remove the connection\n\n    removeConnection(pool, conn); // flush remaining work items\n\n    conn.flush(err);\n  } // Did we catch a timeout, increment the numberOfConsecutiveTimeouts\n\n\n  if (event === 'timeout') {\n    pool.numberOfConsecutiveTimeouts = pool.numberOfConsecutiveTimeouts + 1; // Have we timed out more than reconnectTries in a row ?\n    // Force close the pool as we are trying to connect to tcp sink hole\n\n    if (pool.numberOfConsecutiveTimeouts > pool.options.reconnectTries) {\n      pool.numberOfConsecutiveTimeouts = 0; // Destroy all connections and pool\n\n      pool.destroy(true); // Emit close event\n\n      return pool.emit('close', pool);\n    }\n  } // No more socket available propegate the event\n\n\n  if (pool.socketCount() === 0) {\n    if (pool.state !== DESTROYED && pool.state !== DESTROYING && pool.state !== DRAINING) {\n      if (pool.options.reconnect) {\n        stateTransition(pool, DISCONNECTED);\n      }\n    } // Do not emit error events, they are always close events\n    // do not trigger the low level error handler in node\n\n\n    event = event === 'error' ? 'close' : event;\n    pool.emit(event, err);\n  } // Start reconnection attempts\n\n\n  if (!pool.reconnectId && pool.options.reconnect) {\n    pool.reconnectError = err;\n    pool.reconnectId = setTimeout(attemptReconnect(pool), pool.options.reconnectInterval);\n  } // Do we need to do anything to maintain the minimum pool size\n\n\n  const totalConnections = totalConnectionCount(pool);\n\n  if (totalConnections < pool.minSize) {\n    createConnection(pool);\n  }\n}\n\nfunction attemptReconnect(pool, callback) {\n  return function () {\n    pool.emit('attemptReconnect', pool);\n\n    if (pool.state === DESTROYED || pool.state === DESTROYING) {\n      if (typeof callback === 'function') {\n        callback(new MongoError('Cannot create connection when pool is destroyed'));\n      }\n\n      return;\n    }\n\n    pool.retriesLeft = pool.retriesLeft - 1;\n\n    if (pool.retriesLeft <= 0) {\n      pool.destroy();\n      const error = new MongoTimeoutError(`failed to reconnect after ${pool.options.reconnectTries} attempts with interval ${pool.options.reconnectInterval} ms`, pool.reconnectError);\n      pool.emit('reconnectFailed', error);\n\n      if (typeof callback === 'function') {\n        callback(error);\n      }\n\n      return;\n    } // clear the reconnect id on retry\n\n\n    pool.reconnectId = null; // now retry creating a connection\n\n    createConnection(pool, (err, conn) => {\n      if (err == null) {\n        pool.reconnectId = null;\n        pool.retriesLeft = pool.options.reconnectTries;\n        pool.emit('reconnect', pool);\n      }\n\n      if (typeof callback === 'function') {\n        callback(err, conn);\n      }\n    });\n  };\n}\n\nfunction moveConnectionBetween(connection, from, to) {\n  var index = from.indexOf(connection); // Move the connection from connecting to available\n\n  if (index !== -1) {\n    from.splice(index, 1);\n    to.push(connection);\n  }\n}\n\nfunction messageHandler(self) {\n  return function (message, connection) {\n    // workItem to execute\n    var workItem = null; // Locate the workItem\n\n    for (var i = 0; i < connection.workItems.length; i++) {\n      if (connection.workItems[i].requestId === message.responseTo) {\n        // Get the callback\n        workItem = connection.workItems[i]; // Remove from list of workItems\n\n        connection.workItems.splice(i, 1);\n      }\n    }\n\n    if (workItem && workItem.monitoring) {\n      moveConnectionBetween(connection, self.inUseConnections, self.availableConnections);\n    } // Reset timeout counter\n\n\n    self.numberOfConsecutiveTimeouts = 0; // Reset the connection timeout if we modified it for\n    // this operation\n\n    if (workItem && workItem.socketTimeout) {\n      connection.resetSocketTimeout();\n    } // Log if debug enabled\n\n\n    if (self.logger.isDebug()) {\n      self.logger.debug(f('message [%s] received from %s:%s', message.raw.toString('hex'), self.options.host, self.options.port));\n    }\n\n    function handleOperationCallback(self, cb, err, result) {\n      // No domain enabled\n      if (!self.options.domainsEnabled) {\n        return process.nextTick(function () {\n          return cb(err, result);\n        });\n      } // Domain enabled just call the callback\n\n\n      cb(err, result);\n    } // Keep executing, ensure current message handler does not stop execution\n\n\n    if (!self.executing) {\n      process.nextTick(function () {\n        _execute(self)();\n      });\n    } // Time to dispatch the message if we have a callback\n\n\n    if (workItem && !workItem.immediateRelease) {\n      try {\n        // Parse the message according to the provided options\n        message.parse(workItem);\n      } catch (err) {\n        return handleOperationCallback(self, workItem.cb, new MongoError(err));\n      }\n\n      if (message.documents[0]) {\n        const document = message.documents[0];\n        const session = workItem.session;\n\n        if (session) {\n          updateSessionFromResponse(session, document);\n        }\n\n        if (self.topology && document.$clusterTime) {\n          self.topology.clusterTime = document.$clusterTime;\n        }\n      } // Establish if we have an error\n\n\n      if (workItem.command && message.documents[0]) {\n        const responseDoc = message.documents[0];\n\n        if (responseDoc.writeConcernError) {\n          const err = new MongoWriteConcernError(responseDoc.writeConcernError, responseDoc);\n          return handleOperationCallback(self, workItem.cb, err);\n        }\n\n        if (responseDoc.ok === 0 || responseDoc.$err || responseDoc.errmsg || responseDoc.code) {\n          return handleOperationCallback(self, workItem.cb, new MongoError(responseDoc));\n        }\n      } // Add the connection details\n\n\n      message.hashedName = connection.hashedName; // Return the documents\n\n      handleOperationCallback(self, workItem.cb, null, new CommandResult(workItem.fullResult ? message : message.documents[0], connection, message));\n    }\n  };\n}\n/**\n * Return the total socket count in the pool.\n * @method\n * @return {Number} The number of socket available.\n */\n\n\nPool.prototype.socketCount = function () {\n  return this.availableConnections.length + this.inUseConnections.length; // + this.connectingConnections.length;\n};\n\nfunction totalConnectionCount(pool) {\n  return pool.availableConnections.length + pool.inUseConnections.length + pool.connectingConnections;\n}\n/**\n * Return all pool connections\n * @method\n * @return {Connection[]} The pool connections\n */\n\n\nPool.prototype.allConnections = function () {\n  return this.availableConnections.concat(this.inUseConnections);\n};\n/**\n * Get a pool connection (round-robin)\n * @method\n * @return {Connection}\n */\n\n\nPool.prototype.get = function () {\n  return this.allConnections()[0];\n};\n/**\n * Is the pool connected\n * @method\n * @return {boolean}\n */\n\n\nPool.prototype.isConnected = function () {\n  // We are in a destroyed state\n  if (this.state === DESTROYED || this.state === DESTROYING) {\n    return false;\n  } // Get connections\n\n\n  var connections = this.availableConnections.concat(this.inUseConnections); // Check if we have any connected connections\n\n  for (var i = 0; i < connections.length; i++) {\n    if (connections[i].isConnected()) return true;\n  } // Not connected\n\n\n  return false;\n};\n/**\n * Was the pool destroyed\n * @method\n * @return {boolean}\n */\n\n\nPool.prototype.isDestroyed = function () {\n  return this.state === DESTROYED || this.state === DESTROYING;\n};\n/**\n * Is the pool in a disconnected state\n * @method\n * @return {boolean}\n */\n\n\nPool.prototype.isDisconnected = function () {\n  return this.state === DISCONNECTED;\n};\n/**\n * Connect pool\n */\n\n\nPool.prototype.connect = function (callback) {\n  if (this.state !== DISCONNECTED) {\n    throw new MongoError('connection in unlawful state ' + this.state);\n  }\n\n  stateTransition(this, CONNECTING);\n  createConnection(this, (err, conn) => {\n    if (err) {\n      if (typeof callback === 'function') {\n        this.destroy();\n        callback(err);\n        return;\n      }\n\n      if (this.state === CONNECTING) {\n        this.emit('error', err);\n      }\n\n      this.destroy();\n      return;\n    }\n\n    stateTransition(this, CONNECTED); // create min connections\n\n    if (this.minSize) {\n      for (let i = 0; i < this.minSize; i++) {\n        createConnection(this);\n      }\n    }\n\n    if (typeof callback === 'function') {\n      callback(null, conn);\n    } else {\n      this.emit('connect', this, conn);\n    }\n  });\n};\n/**\n * Authenticate using a specified mechanism\n * @param {authResultCallback} callback A callback function\n */\n\n\nPool.prototype.auth = function (credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n/**\n * Logout all users against a database\n * @param {authResultCallback} callback A callback function\n */\n\n\nPool.prototype.logout = function (dbName, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n/**\n * Unref the pool\n * @method\n */\n\n\nPool.prototype.unref = function () {\n  // Get all the known connections\n  var connections = this.availableConnections.concat(this.inUseConnections);\n  connections.forEach(function (c) {\n    c.unref();\n  });\n}; // Destroy the connections\n\n\nfunction destroy(self, connections, options, callback) {\n  stateTransition(self, DESTROYING); // indicate that in-flight connections should cancel\n\n  self.s.cancellationToken.emit('cancel');\n  eachAsync(connections, (conn, cb) => {\n    for (const eventName of CONNECTION_EVENTS) {\n      conn.removeAllListeners(eventName);\n    } // ignore any errors during destruction\n\n\n    conn.on('error', () => {});\n    conn.destroy(options, cb);\n  }, err => {\n    if (err) {\n      if (typeof callback === 'function') callback(err, null);\n      return;\n    }\n\n    resetPoolState(self);\n    self.queue = [];\n    stateTransition(self, DESTROYED);\n    if (typeof callback === 'function') callback(null, null);\n  });\n}\n/**\n * Destroy pool\n * @method\n */\n\n\nPool.prototype.destroy = function (force, callback) {\n  var self = this;\n\n  if (typeof force === 'function') {\n    callback = force;\n    force = false;\n  } // Do not try again if the pool is already dead\n\n\n  if (this.state === DESTROYED || self.state === DESTROYING) {\n    if (typeof callback === 'function') callback(null, null);\n    return;\n  } // Set state to draining\n\n\n  stateTransition(this, DRAINING); // Are we force closing\n\n  if (force) {\n    // Get all the known connections\n    var connections = self.availableConnections.concat(self.inUseConnections); // Flush any remaining work items with\n    // an error\n\n    while (self.queue.length > 0) {\n      var workItem = self.queue.shift();\n\n      if (typeof workItem.cb === 'function') {\n        workItem.cb(new MongoError('Pool was force destroyed'));\n      }\n    } // Destroy the topology\n\n\n    return destroy(self, connections, {\n      force: true\n    }, callback);\n  } // Clear out the reconnect if set\n\n\n  if (this.reconnectId) {\n    clearTimeout(this.reconnectId);\n  } // Wait for the operations to drain before we close the pool\n\n\n  function checkStatus() {\n    if (self.state === DESTROYED || self.state === DESTROYING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    flushMonitoringOperations(self.queue);\n\n    if (self.queue.length === 0) {\n      // Get all the known connections\n      var connections = self.availableConnections.concat(self.inUseConnections); // Check if we have any in flight operations\n\n      for (var i = 0; i < connections.length; i++) {\n        // There is an operation still in flight, reschedule a\n        // check waiting for it to drain\n        if (connections[i].workItems.length > 0) {\n          return setTimeout(checkStatus, 1);\n        }\n      }\n\n      destroy(self, connections, {\n        force: false\n      }, callback);\n    } else {\n      // Ensure we empty the queue\n      _execute(self)(); // Set timeout\n\n\n      setTimeout(checkStatus, 1);\n    }\n  } // Initiate drain of operations\n\n\n  checkStatus();\n};\n/**\n * Reset all connections of this pool\n *\n * @param {function} [callback]\n */\n\n\nPool.prototype.reset = function (callback) {\n  if (this.s.state !== CONNECTED) {\n    if (typeof callback === 'function') {\n      callback(new MongoError('pool is not connected, reset aborted'));\n    }\n\n    return;\n  } // signal in-flight connections should be cancelled\n\n\n  this.s.cancellationToken.emit('cancel'); // destroy existing connections\n\n  const connections = this.availableConnections.concat(this.inUseConnections);\n  eachAsync(connections, (conn, cb) => {\n    for (const eventName of CONNECTION_EVENTS) {\n      conn.removeAllListeners(eventName);\n    }\n\n    conn.destroy({\n      force: true\n    }, cb);\n  }, err => {\n    if (err) {\n      if (typeof callback === 'function') {\n        callback(err, null);\n        return;\n      }\n    }\n\n    resetPoolState(this); // create a new connection, this will ultimately trigger execution\n\n    createConnection(this, () => {\n      if (typeof callback === 'function') {\n        callback(null, null);\n      }\n    });\n  });\n}; // Prepare the buffer that Pool.prototype.write() uses to send to the server\n\n\nfunction serializeCommand(self, command, callback) {\n  const originalCommandBuffer = command.toBin(); // Check whether we and the server have agreed to use a compressor\n\n  const shouldCompress = !!self.options.agreedCompressor;\n\n  if (!shouldCompress || !canCompress(command)) {\n    return callback(null, originalCommandBuffer);\n  } // Transform originalCommandBuffer into OP_COMPRESSED\n\n\n  const concatenatedOriginalCommandBuffer = Buffer.concat(originalCommandBuffer);\n  const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE); // Extract information needed for OP_COMPRESSED from the uncompressed message\n\n  const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12); // Compress the message body\n\n  compress(self, messageToBeCompressed, function (err, compressedMessage) {\n    if (err) return callback(err, null); // Create the msgHeader of OP_COMPRESSED\n\n    const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n    msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n\n    msgHeader.writeInt32LE(command.requestId, 4); // requestID\n\n    msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n\n    msgHeader.writeInt32LE(opcodes.OP_COMPRESSED, 12); // opCode\n    // Create the compression details of OP_COMPRESSED\n\n    const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n    compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n\n    compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n\n    compressionDetails.writeUInt8(compressorIDs[self.options.agreedCompressor], 8); // compressorID\n\n    return callback(null, [msgHeader, compressionDetails, compressedMessage]);\n  });\n}\n/**\n * Write a message to MongoDB\n * @method\n * @return {Connection}\n */\n\n\nPool.prototype.write = function (command, options, cb) {\n  var self = this; // Ensure we have a callback\n\n  if (typeof options === 'function') {\n    cb = options;\n  } // Always have options\n\n\n  options = options || {}; // We need to have a callback function unless the message returns no response\n\n  if (!(typeof cb === 'function') && !options.noResponse) {\n    throw new MongoError('write method must provide a callback');\n  } // Pool was destroyed error out\n\n\n  if (this.state === DESTROYED || this.state === DESTROYING) {\n    cb(new MongoError('pool destroyed'));\n    return;\n  }\n\n  if (this.state === DRAINING) {\n    cb(new MongoError('pool is draining, new operations prohibited'));\n    return;\n  }\n\n  if (this.options.domainsEnabled && process.domain && typeof cb === 'function') {\n    // if we have a domain bind to it\n    var oldCb = cb;\n    cb = process.domain.bind(function () {\n      // v8 - argumentsToArray one-liner\n      var args = new Array(arguments.length);\n\n      for (var i = 0; i < arguments.length; i++) {\n        args[i] = arguments[i];\n      } // bounce off event loop so domain switch takes place\n\n\n      process.nextTick(function () {\n        oldCb.apply(null, args);\n      });\n    });\n  } // Do we have an operation\n\n\n  var operation = {\n    cb: cb,\n    raw: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    fullResult: false\n  }; // Set the options for the parsing\n\n  operation.promoteLongs = typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true;\n  operation.promoteValues = typeof options.promoteValues === 'boolean' ? options.promoteValues : true;\n  operation.promoteBuffers = typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false;\n  operation.raw = typeof options.raw === 'boolean' ? options.raw : false;\n  operation.immediateRelease = typeof options.immediateRelease === 'boolean' ? options.immediateRelease : false;\n  operation.documentsReturnedIn = options.documentsReturnedIn;\n  operation.command = typeof options.command === 'boolean' ? options.command : false;\n  operation.fullResult = typeof options.fullResult === 'boolean' ? options.fullResult : false;\n  operation.noResponse = typeof options.noResponse === 'boolean' ? options.noResponse : false;\n  operation.session = options.session || null; // Optional per operation socketTimeout\n\n  operation.socketTimeout = options.socketTimeout;\n  operation.monitoring = options.monitoring; // Get the requestId\n\n  operation.requestId = command.requestId; // If command monitoring is enabled we need to modify the callback here\n\n  if (self.options.monitorCommands) {\n    this.emit('commandStarted', new apm.CommandStartedEvent(this, command));\n    operation.started = now();\n\n    operation.cb = (err, reply) => {\n      if (err) {\n        self.emit('commandFailed', new apm.CommandFailedEvent(this, command, err, operation.started));\n      } else {\n        if (reply && reply.result && (reply.result.ok === 0 || reply.result.$err)) {\n          self.emit('commandFailed', new apm.CommandFailedEvent(this, command, reply.result, operation.started));\n        } else {\n          self.emit('commandSucceeded', new apm.CommandSucceededEvent(this, command, reply, operation.started));\n        }\n      }\n\n      if (typeof cb === 'function') cb(err, reply);\n    };\n  } // Prepare the operation buffer\n\n\n  serializeCommand(self, command, (err, serializedBuffers) => {\n    if (err) throw err; // Set the operation's buffer to the serialization of the commands\n\n    operation.buffer = serializedBuffers; // If we have a monitoring operation schedule as the very first operation\n    // Otherwise add to back of queue\n\n    if (options.monitoring) {\n      self.queue.unshift(operation);\n    } else {\n      self.queue.push(operation);\n    } // Attempt to execute the operation\n\n\n    if (!self.executing) {\n      process.nextTick(function () {\n        _execute(self)();\n      });\n    }\n  });\n}; // Return whether a command contains an uncompressible command term\n// Will return true if command contains no uncompressible command terms\n\n\nfunction canCompress(command) {\n  const commandDoc = command instanceof Msg ? command.command : command.query;\n  const commandName = Object.keys(commandDoc)[0];\n  return !uncompressibleCommands.has(commandName);\n} // Remove connection method\n\n\nfunction remove(connection, connections) {\n  for (var i = 0; i < connections.length; i++) {\n    if (connections[i] === connection) {\n      connections.splice(i, 1);\n      return true;\n    }\n  }\n}\n\nfunction removeConnection(self, connection) {\n  if (remove(connection, self.availableConnections)) return;\n  if (remove(connection, self.inUseConnections)) return;\n}\n\nfunction createConnection(pool, callback) {\n  if (pool.state === DESTROYED || pool.state === DESTROYING) {\n    if (typeof callback === 'function') {\n      callback(new MongoError('Cannot create connection when pool is destroyed'));\n    }\n\n    return;\n  }\n\n  pool.connectingConnections++;\n  connect(pool.options, pool.s.cancellationToken, (err, connection) => {\n    pool.connectingConnections--;\n\n    if (err) {\n      if (pool.logger.isDebug()) {\n        pool.logger.debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n      } // check if reconnect is enabled, and attempt retry if so\n\n\n      if (!pool.reconnectId && pool.options.reconnect) {\n        if (pool.state === CONNECTING && pool.options.legacyCompatMode) {\n          callback(err);\n          return;\n        }\n\n        pool.reconnectError = err;\n        pool.reconnectId = setTimeout(attemptReconnect(pool, callback), pool.options.reconnectInterval);\n        return;\n      }\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n\n      return;\n    } // the pool might have been closed since we started creating the connection\n\n\n    if (pool.state === DESTROYED || pool.state === DESTROYING) {\n      if (typeof callback === 'function') {\n        callback(new MongoError('Pool was destroyed after connection creation'));\n      }\n\n      connection.destroy();\n      return;\n    } // otherwise, connect relevant event handlers and add it to our available connections\n\n\n    connection.on('error', pool._connectionErrorHandler);\n    connection.on('close', pool._connectionCloseHandler);\n    connection.on('timeout', pool._connectionTimeoutHandler);\n    connection.on('parseError', pool._connectionParseErrorHandler);\n    connection.on('message', pool._messageHandler);\n    pool.availableConnections.push(connection); // if a callback was provided, return the connection\n\n    if (typeof callback === 'function') {\n      callback(null, connection);\n    } // immediately execute any waiting work\n\n\n    _execute(pool)();\n  });\n}\n\nfunction flushMonitoringOperations(queue) {\n  for (var i = 0; i < queue.length; i++) {\n    if (queue[i].monitoring) {\n      var workItem = queue[i];\n      queue.splice(i, 1);\n      workItem.cb(new MongoError({\n        message: 'no connection available for monitoring',\n        driver: true\n      }));\n    }\n  }\n}\n\nfunction _execute(self) {\n  return function () {\n    if (self.state === DESTROYED) return; // Already executing, skip\n\n    if (self.executing) return; // Set pool as executing\n\n    self.executing = true; // New pool connections are in progress, wait them to finish\n    // before executing any more operation to ensure distribution of\n    // operations\n\n    if (self.connectingConnections > 0) {\n      self.executing = false;\n      return;\n    } // As long as we have available connections\n    // eslint-disable-next-line\n\n\n    while (true) {\n      // Total availble connections\n      const totalConnections = totalConnectionCount(self); // No available connections available, flush any monitoring ops\n\n      if (self.availableConnections.length === 0) {\n        // Flush any monitoring operations\n        flushMonitoringOperations(self.queue); // Try to create a new connection to execute stuck operation\n\n        if (totalConnections < self.options.size && self.queue.length > 0) {\n          createConnection(self);\n        }\n\n        break;\n      } // No queue break\n\n\n      if (self.queue.length === 0) {\n        break;\n      }\n\n      var connection = null;\n      const connections = self.availableConnections.filter(conn => conn.workItems.length === 0); // No connection found that has no work on it, just pick one for pipelining\n\n      if (connections.length === 0) {\n        connection = self.availableConnections[self.connectionIndex++ % self.availableConnections.length];\n      } else {\n        connection = connections[self.connectionIndex++ % connections.length];\n      } // Is the connection connected\n\n\n      if (!connection.isConnected()) {\n        // Remove the disconnected connection\n        removeConnection(self, connection); // Flush any monitoring operations in the queue, failing fast\n\n        flushMonitoringOperations(self.queue);\n        break;\n      } // Get the next work item\n\n\n      var workItem = self.queue.shift(); // If we are monitoring we need to use a connection that is not\n      // running another operation to avoid socket timeout changes\n      // affecting an existing operation\n\n      if (workItem.monitoring) {\n        var foundValidConnection = false;\n\n        for (let i = 0; i < self.availableConnections.length; i++) {\n          // If the connection is connected\n          // And there are no pending workItems on it\n          // Then we can safely use it for monitoring.\n          if (self.availableConnections[i].isConnected() && self.availableConnections[i].workItems.length === 0) {\n            foundValidConnection = true;\n            connection = self.availableConnections[i];\n            break;\n          }\n        } // No safe connection found, attempt to grow the connections\n        // if possible and break from the loop\n\n\n        if (!foundValidConnection) {\n          // Put workItem back on the queue\n          self.queue.unshift(workItem); // Attempt to grow the pool if it's not yet maxsize\n\n          if (totalConnections < self.options.size && self.queue.length > 0) {\n            // Create a new connection\n            createConnection(self);\n          } // Re-execute the operation\n\n\n          setTimeout(() => _execute(self)(), 10);\n          break;\n        }\n      } // Don't execute operation until we have a full pool\n\n\n      if (totalConnections < self.options.size) {\n        // Connection has work items, then put it back on the queue\n        // and create a new connection\n        if (connection.workItems.length > 0) {\n          // Lets put the workItem back on the list\n          self.queue.unshift(workItem); // Create a new connection\n\n          createConnection(self); // Break from the loop\n\n          break;\n        }\n      } // Get actual binary commands\n\n\n      var buffer = workItem.buffer; // If we are monitoring take the connection of the availableConnections\n\n      if (workItem.monitoring) {\n        moveConnectionBetween(connection, self.availableConnections, self.inUseConnections);\n      } // Track the executing commands on the mongo server\n      // as long as there is an expected response\n\n\n      if (!workItem.noResponse) {\n        connection.workItems.push(workItem);\n      } // We have a custom socketTimeout\n\n\n      if (!workItem.immediateRelease && typeof workItem.socketTimeout === 'number') {\n        connection.setSocketTimeout(workItem.socketTimeout);\n      } // Capture if write was successful\n\n\n      var writeSuccessful = true; // Put operation on the wire\n\n      if (Array.isArray(buffer)) {\n        for (let i = 0; i < buffer.length; i++) {\n          writeSuccessful = connection.write(buffer[i]);\n        }\n      } else {\n        writeSuccessful = connection.write(buffer);\n      } // if the command is designated noResponse, call the callback immeditely\n\n\n      if (workItem.noResponse && typeof workItem.cb === 'function') {\n        workItem.cb(null, null);\n      }\n\n      if (writeSuccessful === false) {\n        // If write not successful put back on queue\n        self.queue.unshift(workItem); // Remove the disconnected connection\n\n        removeConnection(self, connection); // Flush any monitoring operations in the queue, failing fast\n\n        flushMonitoringOperations(self.queue);\n        break;\n      }\n    }\n\n    self.executing = false;\n  };\n} // Make execution loop available for testing\n\n\nPool._execute = _execute;\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Pool#connect\n * @type {Pool}\n */\n\n/**\n * A server reconnect event, used to verify that pool reconnected.\n *\n * @event Pool#reconnect\n * @type {Pool}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Pool#close\n * @type {Pool}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Pool#error\n * @type {Pool}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Pool#timeout\n * @type {Pool}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Pool#parseError\n * @type {Pool}\n */\n\n/**\n * The driver attempted to reconnect\n *\n * @event Pool#attemptReconnect\n * @type {Pool}\n */\n\n/**\n * The driver exhausted all reconnect attempts\n *\n * @event Pool#reconnectFailed\n * @type {Pool}\n */\n\nmodule.exports = Pool;","map":null,"metadata":{},"sourceType":"script"}