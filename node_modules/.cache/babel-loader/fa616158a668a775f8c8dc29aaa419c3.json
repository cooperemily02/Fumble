{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n/*\n  Convert percentage to pixels\n\n  @param [number]: Percentage of total length\n  @param [number]: Total length\n*/\n\nvar percentToPixels = function percentToPixels(percent, length) {\n  return parseFloat(percent) / 100 * length + 'px';\n};\n\nexports.default = function (state, length) {\n  var styles = {};\n  var dashArrayStyles = {\n    length: '0',\n    spacing: length + 'px'\n  };\n  var hasDashArray = false;\n\n  for (var key in state) {\n    if (state.hasOwnProperty(key)) {\n      var value = state[key];\n\n      switch (key) {\n        case 'length':\n        case 'spacing':\n          hasDashArray = true;\n          dashArrayStyles[key] = percentToPixels(value, length);\n          break;\n\n        case 'offset':\n          styles['stroke-dashoffset'] = percentToPixels(-value, length);\n          break;\n\n        default:\n          styles[key] = value;\n      }\n    }\n  }\n\n  if (hasDashArray) {\n    styles['stroke-dasharray'] = dashArrayStyles.length + ' ' + dashArrayStyles.spacing;\n  }\n\n  return styles;\n};","map":{"version":3,"sources":["../../../src/renderers/svg-path/build.js"],"names":["percentToPixels","parseFloat","styles","dashArrayStyles","length","spacing","hasDashArray","state","value"],"mappings":";;;AAAA;;;;;;;AAMA,IAAMA,eAAAA,GAAkB,SAAlBA,eAAkB,CAAA,OAAA,EAAA,MAAA,EAAA;AAAA,SAAsBC,UAAAA,CAAAA,OAAAA,CAAAA,GAAD,GAACA,GAAD,MAACA,GAAtB,IAAA;AAAxB,CAAA;;kBAEe,UAAA,KAAA,EAAA,MAAA,EAAmB;AAChC,MAAMC,MAAAA,GAAN,EAAA;AACA,MAAMC,eAAAA,GAAkB;AACtBC,IAAAA,MAAAA,EADsB,GAAA;AAEtBC,IAAAA,OAAAA,EAASD,MAAAA,GAAS;AAFI,GAAxB;AAIA,MAAIE,YAAAA,GAAJ,KAAA;;AAEA,OAAK,IAAL,GAAA,IAAA,KAAA,EAAuB;AACrB,QAAIC,KAAAA,CAAAA,cAAAA,CAAJ,GAAIA,CAAJ,EAA+B;AAC7B,UAAMC,KAAAA,GAAQD,KAAAA,CAAd,GAAcA,CAAd;;AAEA,cAAA,GAAA;AACA,aAAA,QAAA;AACA,aAAA,SAAA;AACED,UAAAA,YAAAA,GAAAA,IAAAA;AACAH,UAAAA,eAAAA,CAAAA,GAAAA,CAAAA,GAAuBH,eAAAA,CAAAA,KAAAA,EAAvBG,MAAuBH,CAAvBG;AACA;;AACF,aAAA,QAAA;AACED,UAAAA,MAAAA,CAAAA,mBAAAA,CAAAA,GAA8BF,eAAAA,CAAgB,CAAhBA,KAAAA,EAA9BE,MAA8BF,CAA9BE;AACA;;AACF;AACEA,UAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAAA,KAAAA;AAVF;AAYD;AACF;;AAED,MAAA,YAAA,EAAkB;AAChBA,IAAAA,MAAAA,CAAAA,kBAAAA,CAAAA,GAA6BC,eAAAA,CAAAA,MAAAA,GAAAA,GAAAA,GAA+BA,eAAAA,CAA5DD,OAAAA;AACD;;AAED,SAAA,MAAA","sourcesContent":["/*\n  Convert percentage to pixels\n\n  @param [number]: Percentage of total length\n  @param [number]: Total length\n*/\nconst percentToPixels = (percent, length) => (parseFloat(percent) / 100) * length + 'px';\n\nexport default (state, length) => {\n  const styles = {};\n  const dashArrayStyles = {\n    length: '0',\n    spacing: length + 'px'\n  };\n  let hasDashArray = false;\n\n  for (let key in state) {\n    if (state.hasOwnProperty(key)) {\n      const value = state[key];\n\n      switch (key) {\n      case 'length':\n      case 'spacing':\n        hasDashArray = true;\n        dashArrayStyles[key] = percentToPixels(value, length);\n        break;\n      case 'offset':\n        styles['stroke-dashoffset'] = percentToPixels(-value, length);\n        break;\n      default:\n        styles[key] = value;\n      }\n    }\n  }\n\n  if (hasDashArray) {\n    styles['stroke-dasharray'] = dashArrayStyles.length + ' ' + dashArrayStyles.spacing;\n  }\n\n  return styles;\n};\n"]},"metadata":{},"sourceType":"script"}