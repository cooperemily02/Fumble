{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.splitColorValues = splitColorValues;\n\nvar varType = function varType(variable) {\n  return Object.prototype.toString.call(variable).slice(8, -1);\n};\n\nvar CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;\nvar REPLACE_TEMPLATE = '$1-$2';\n/*\n  Convert camelCase to dash-case\n\n  @param [string]\n  @return [string]\n*/\n\nvar camelToDash = exports.camelToDash = function camelToDash(string) {\n  return string.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();\n};\n\nvar setDOMAttrs = exports.setDOMAttrs = function setDOMAttrs(element, attrs) {\n  for (var key in attrs) {\n    if (attrs.hasOwnProperty(key)) {\n      element.setAttribute(key, attrs[key]);\n    }\n  }\n};\n/*\n  Split comma-delimited string\n\n  \"foo,bar\" -> [\"foo\", \"bar\"]\n\n  @param [string]\n  @return [array]\n*/\n\n\nvar splitCommaDelimited = exports.splitCommaDelimited = function splitCommaDelimited(value) {\n  return isString(value) ? value.split(/,\\s*/) : [value];\n};\n/**\n *  Returns a function that will check any argument for `term`\n * `contains('needle')('haystack')`\n */\n\n\nvar contains = exports.contains = function contains(term) {\n  return function (v) {\n    return isString(term) && v.indexOf(term) !== -1;\n  };\n};\n/**\n *  Returns a function that will check to see if an argument is\n *  the first characters in the provided `term`\n * `isFirstChars('needle')('haystack')`\n */\n\n\nvar isFirstChars = exports.isFirstChars = function isFirstChars(term) {\n  return function (v) {\n    return isString(term) && v.indexOf(term) === 0;\n  };\n};\n/**\n * Create a unit value type\n */\n\n\nvar createUnitType = exports.createUnitType = function createUnitType(type, transform) {\n  return {\n    test: contains(type),\n    parse: parseFloat,\n    transform: transform\n  };\n};\n/*\n  Get value from function string\n  \"translateX(20px)\" -> \"20px\"\n*/\n\n\nvar getValueFromFunctionString = exports.getValueFromFunctionString = function getValueFromFunctionString(value) {\n  return value.substring(value.indexOf('(') + 1, value.lastIndexOf(')'));\n};\n/**\n * Creates a function that will split color\n * values from string into an object of properties\n * `mapArrayToObject(['red', 'green', 'blue'])('rgba(0,0,0)')`\n */\n\n\nfunction splitColorValues(terms) {\n  var numTerms = terms.length;\n  return function (v) {\n    var values = {};\n    var valuesArray = splitCommaDelimited(getValueFromFunctionString(v));\n\n    for (var i = 0; i < numTerms; i++) {\n      values[terms[i]] = valuesArray[i] !== undefined ? parseFloat(valuesArray[i]) : 1;\n    }\n\n    return values;\n  };\n}\n/*\n  Is utils var an array ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if utils.varType === 'Array'\n*/\n\n\nvar isArray = exports.isArray = function isArray(arr) {\n  return varType(arr) === 'Array';\n};\n/*\n  Is utils var a function ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if utils.varType === 'Function'\n*/\n\n\nvar isFunc = exports.isFunc = function isFunc(obj) {\n  return varType(obj) === 'Function';\n};\n/*\n  Is utils var a number?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof === 'number'\n*/\n\n\nvar isNum = exports.isNum = function isNum(num) {\n  return typeof num === 'number';\n};\n/*\n  Is utils var an object?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof === 'object'\n*/\n\n\nvar isObj = exports.isObj = function isObj(obj) {\n  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n};\n/*\n  Is utils var a string ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof str === 'string'\n*/\n\n\nvar isString = exports.isString = function isString(str) {\n  return typeof str === 'string';\n};\n\nvar isHex = exports.isHex = isFirstChars('#');\nvar isRgb = exports.isRgb = isFirstChars('rgb');\nvar isHsl = exports.isHsl = isFirstChars('hsl');\n\nvar isColor = exports.isColor = function isColor(v) {\n  return isHex(v) || isRgb(v) || isHsl(v);\n};","map":{"version":3,"sources":["../../src/inc/utils.js"],"names":["varType","Object","CAMEL_CASE_PATTERN","REPLACE_TEMPLATE","camelToDash","string","setDOMAttrs","attrs","element","splitCommaDelimited","isString","value","contains","v","isFirstChars","createUnitType","test","parse","transform","getValueFromFunctionString","splitColorValues","numTerms","terms","values","valuesArray","i","parseFloat","isArray","isFunc","isNum","isObj","isHex","isRgb","isHsl","isColor"],"mappings":"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","sourcesContent":["const varType = (variable) => Object.prototype.toString.call(variable).slice(8, -1);\n\nconst CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;\nconst REPLACE_TEMPLATE = '$1-$2';\n\n/*\n  Convert camelCase to dash-case\n\n  @param [string]\n  @return [string]\n*/\nexport const camelToDash = (string) => string.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();\n\nexport const setDOMAttrs = (element, attrs) => {\n  for (let key in attrs) {\n    if (attrs.hasOwnProperty(key)) {\n      element.setAttribute(key, attrs[key]);\n    }\n  }\n};\n/*\n  Split comma-delimited string\n\n  \"foo,bar\" -> [\"foo\", \"bar\"]\n\n  @param [string]\n  @return [array]\n*/\nexport const splitCommaDelimited = (value) => isString(value) ? value.split(/,\\s*/) : [value];\n\n/**\n *  Returns a function that will check any argument for `term`\n * `contains('needle')('haystack')`\n */\nexport const contains = (term) => (v) => {\n  return (isString(term) && v.indexOf(term) !== -1);\n};\n\n/**\n *  Returns a function that will check to see if an argument is\n *  the first characters in the provided `term`\n * `isFirstChars('needle')('haystack')`\n */\nexport const isFirstChars = (term) => (v) => {\n  return (isString(term) && v.indexOf(term) === 0);\n};\n\n/**\n * Create a unit value type\n */\nexport const createUnitType = (type, transform) => {\n  return {\n    test: contains(type),\n    parse: parseFloat,\n    transform\n  };\n};\n\n/*\n  Get value from function string\n  \"translateX(20px)\" -> \"20px\"\n*/\nexport const getValueFromFunctionString = (value) => value.substring(value.indexOf('(') + 1, value.lastIndexOf(')'));\n\n/**\n * Creates a function that will split color\n * values from string into an object of properties\n * `mapArrayToObject(['red', 'green', 'blue'])('rgba(0,0,0)')`\n */\nexport function splitColorValues(terms) {\n  const numTerms = terms.length;\n\n  return function (v) {\n    const values = {};\n    const valuesArray = splitCommaDelimited(getValueFromFunctionString(v));\n\n    for (let i = 0; i < numTerms; i++) {\n      values[terms[i]] = (valuesArray[i] !== undefined) ? parseFloat(valuesArray[i]) : 1;\n    }\n\n    return values;\n  };\n}\n\n/*\n  Is utils var an array ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if utils.varType === 'Array'\n*/\nexport const isArray = (arr) => varType(arr) === 'Array';\n\n/*\n  Is utils var a function ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if utils.varType === 'Function'\n*/\nexport const isFunc = (obj) => varType(obj) === 'Function';\n\n/*\n  Is utils var a number?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof === 'number'\n*/\nexport const isNum = (num) => typeof num === 'number';\n\n/*\n  Is utils var an object?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof === 'object'\n*/\nexport const isObj = (obj) => typeof obj === 'object';\n\n/*\n  Is utils var a string ?\n\n  @param: Variable to test\n  @return [boolean]: Returns true if typeof str === 'string'\n*/\nexport const isString = (str) => typeof str === 'string';\n\nexport const isHex = isFirstChars('#');\nexport const isRgb = isFirstChars('rgb');\nexport const isHsl = isFirstChars('hsl');\nexport const isColor = (v) => (isHex(v) || isRgb(v) || isHsl(v));\n"]},"metadata":{},"sourceType":"script"}