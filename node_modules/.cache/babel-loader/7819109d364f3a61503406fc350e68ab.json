{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _chain = require('./chain');\n\nvar _chain2 = _interopRequireDefault(_chain);\n\nvar _parallel = require('./parallel');\n\nvar _parallel2 = _interopRequireDefault(_parallel);\n\nvar _delay = require('./delay');\n\nvar _delay2 = _interopRequireDefault(_delay);\n\nvar _utils = require('../inc/utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * Creates a new parallel Action composed of chained\r\n * delay and actions. Interval can be either a number\r\n * to multiply by `i` or a function that will be provided `i`\r\n *\r\n * Straight cribbed from https://github.com/facebook/react-native/blob/24c72f513e48f0bdc40820b43262328fe2c301d4/Libraries/Animated/src/AnimatedImplementation.js#L2031\r\n * ^ This function sold a previously-conflicted me on the merit of moving from\r\n * jQuery-style multi-property animations to single-property.\r\n * @param  {array} actions\r\n * @param  {function | number} interval\r\n * @return {Action}\r\n */\n\n\nexports.default = function (actions, interval, onComplete) {\n  var intervalIsFunction = (0, _utils.isFunc)(interval);\n  return (0, _parallel2.default)(actions.map(function (action, i) {\n    var timeToDelay = intervalIsFunction ? interval(i) : i * interval;\n    return (0, _chain2.default)([(0, _delay2.default)(timeToDelay), action]);\n  }), {\n    onComplete: onComplete\n  });\n};","map":null,"metadata":{},"sourceType":"script"}