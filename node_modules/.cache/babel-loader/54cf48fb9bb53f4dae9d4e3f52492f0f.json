{"ast":null,"code":"'use strict';\n\nconst Server = require('./server');\n\nconst Cursor = require('../cursor');\n\nconst MongoError = require('../core').MongoError;\n\nconst TopologyBase = require('./topology_base').TopologyBase;\n\nconst Store = require('./topology_base').Store;\n\nconst CReplSet = require('../core').ReplSet;\n\nconst MAX_JS_INT = require('../utils').MAX_JS_INT;\n\nconst translateOptions = require('../utils').translateOptions;\n\nconst filterOptions = require('../utils').filterOptions;\n\nconst mergeOptions = require('../utils').mergeOptions;\n/**\n * @fileOverview The **ReplSet** class is a class that represents a Replicaset topology and is\n * used to construct connections.\n *\n * **ReplSet Should not be used, use MongoClient.connect**\n */\n// Allowed parameters\n\n\nvar legalOptionNames = ['ha', 'haInterval', 'replicaSet', 'rs_name', 'secondaryAcceptableLatencyMS', 'connectWithNoPrimary', 'poolSize', 'ssl', 'checkServerIdentity', 'sslValidate', 'sslCA', 'sslCert', 'ciphers', 'ecdhCurve', 'sslCRL', 'sslKey', 'sslPass', 'socketOptions', 'bufferMaxEntries', 'store', 'auto_reconnect', 'autoReconnect', 'emitError', 'keepAlive', 'keepAliveInitialDelay', 'noDelay', 'connectTimeoutMS', 'socketTimeoutMS', 'strategy', 'debug', 'family', 'loggerLevel', 'logger', 'reconnectTries', 'appname', 'domainsEnabled', 'servername', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'maxStalenessSeconds', 'promiseLibrary', 'minSize', 'monitorCommands'];\n/**\n * Creates a new ReplSet instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=10000] Time between each replicaset status check.\n * @param {string} [options.replicaSet] The name of the replicaset to connect to.\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher.\n * @param {string} [options.ciphers] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {string} [options.ecdhCurve] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {(Buffer|string)} [options.sslKey] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.socketOptions.keepAliveInitialDelay=120000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.socketOptions.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out\n * @param {number} [options.socketOptions.socketTimeoutMS=360000] How long a send or receive on a socket can take before timing out\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed);\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n * @fires ReplSet#fullsetup\n * @fires ReplSet#open\n * @fires ReplSet#close\n * @fires ReplSet#error\n * @fires ReplSet#timeout\n * @fires ReplSet#parseError\n * @fires ReplSet#commandStarted\n * @fires ReplSet#commandSucceeded\n * @fires ReplSet#commandFailed\n * @property {string} parserType the parser type used (c++ or js).\n * @return {ReplSet} a ReplSet instance.\n */\n\nclass ReplSet extends TopologyBase {\n  constructor(servers, options) {\n    super();\n    options = options || {};\n    var self = this; // Filter the options\n\n    options = filterOptions(options, legalOptionNames); // Ensure all the instances are Server\n\n    for (var i = 0; i < servers.length; i++) {\n      if (!(servers[i] instanceof Server)) {\n        throw MongoError.create({\n          message: 'all seed list instances must be of the Server type',\n          driver: true\n        });\n      }\n    } // Stored options\n\n\n    var storeOptions = {\n      force: false,\n      bufferMaxEntries: typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT\n    }; // Shared global store\n\n    var store = options.store || new Store(self, storeOptions); // Build seed list\n\n    var seedlist = servers.map(function (x) {\n      return {\n        host: x.host,\n        port: x.port\n      };\n    }); // Clone options\n\n    var clonedOptions = mergeOptions({}, {\n      disconnectHandler: store,\n      cursorFactory: Cursor,\n      reconnect: false,\n      emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n      size: typeof options.poolSize === 'number' ? options.poolSize : 5,\n      monitorCommands: typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n    }); // Translate any SSL options and other connectivity options\n\n    clonedOptions = translateOptions(clonedOptions, options); // Socket options\n\n    var socketOptions = options.socketOptions && Object.keys(options.socketOptions).length > 0 ? options.socketOptions : options; // Translate all the options to the core types\n\n    clonedOptions = translateOptions(clonedOptions, socketOptions); // Create the ReplSet\n\n    var coreTopology = new CReplSet(seedlist, clonedOptions); // Listen to reconnect event\n\n    coreTopology.on('reconnect', function () {\n      self.emit('reconnect');\n      store.execute();\n    }); // Internal state\n\n    this.s = {\n      // Replicaset\n      coreTopology: coreTopology,\n      // Server capabilities\n      sCapabilities: null,\n      // Debug tag\n      tag: options.tag,\n      // Store options\n      storeOptions: storeOptions,\n      // Cloned options\n      clonedOptions: clonedOptions,\n      // Store\n      store: store,\n      // Options\n      options: options,\n      // Server Session Pool\n      sessionPool: null,\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise\n    }; // Debug\n\n    if (clonedOptions.debug) {\n      // Last ismaster\n      Object.defineProperty(this, 'replset', {\n        enumerable: true,\n        get: function () {\n          return coreTopology;\n        }\n      });\n    }\n  } // Connect method\n\n\n  connect(_options, callback) {\n    var self = this;\n    if ('function' === typeof _options) callback = _options, _options = {};\n    if (_options == null) _options = {};\n    if (!('function' === typeof callback)) callback = null;\n    _options = Object.assign({}, this.s.clonedOptions, _options);\n    self.s.options = _options; // Update bufferMaxEntries\n\n    self.s.storeOptions.bufferMaxEntries = typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1; // Actual handler\n\n    var errorHandler = function (event) {\n      return function (err) {\n        if (event !== 'error') {\n          self.emit(event, err);\n        }\n      };\n    }; // Clear out all the current handlers left over\n\n\n    var events = ['timeout', 'error', 'close', 'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'serverClosed', 'topologyOpening', 'topologyClosed', 'topologyDescriptionChanged', 'commandStarted', 'commandSucceeded', 'commandFailed', 'joined', 'left', 'ping', 'ha'];\n    events.forEach(function (e) {\n      self.s.coreTopology.removeAllListeners(e);\n    }); // relay the event\n\n    var relay = function (event) {\n      return function (t, server) {\n        self.emit(event, t, server);\n      };\n    }; // Replset events relay\n\n\n    var replsetRelay = function (event) {\n      return function (t, server) {\n        self.emit(event, t, server.lastIsMaster(), server);\n      };\n    }; // Relay ha\n\n\n    var relayHa = function (t, state) {\n      self.emit('ha', t, state);\n\n      if (t === 'start') {\n        self.emit('ha_connect', t, state);\n      } else if (t === 'end') {\n        self.emit('ha_ismaster', t, state);\n      }\n    }; // Set up serverConfig listeners\n\n\n    self.s.coreTopology.on('joined', replsetRelay('joined'));\n    self.s.coreTopology.on('left', relay('left'));\n    self.s.coreTopology.on('ping', relay('ping'));\n    self.s.coreTopology.on('ha', relayHa); // Set up SDAM listeners\n\n    self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    self.s.coreTopology.on('serverOpening', relay('serverOpening'));\n    self.s.coreTopology.on('serverClosed', relay('serverClosed'));\n    self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));\n    self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));\n    self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n    self.s.coreTopology.on('commandStarted', relay('commandStarted'));\n    self.s.coreTopology.on('commandSucceeded', relay('commandSucceeded'));\n    self.s.coreTopology.on('commandFailed', relay('commandFailed'));\n    self.s.coreTopology.on('fullsetup', function () {\n      self.emit('fullsetup', self, self);\n    });\n    self.s.coreTopology.on('all', function () {\n      self.emit('all', null, self);\n    }); // Connect handler\n\n    var connectHandler = function () {\n      // Set up listeners\n      self.s.coreTopology.once('timeout', errorHandler('timeout'));\n      self.s.coreTopology.once('error', errorHandler('error'));\n      self.s.coreTopology.once('close', errorHandler('close')); // Emit open event\n\n      self.emit('open', null, self); // Return correctly\n\n      try {\n        callback(null, self);\n      } catch (err) {\n        process.nextTick(function () {\n          throw err;\n        });\n      }\n    }; // Error handler\n\n\n    var connectErrorHandler = function () {\n      return function (err) {\n        ['timeout', 'error', 'close'].forEach(function (e) {\n          self.s.coreTopology.removeListener(e, connectErrorHandler);\n        });\n        self.s.coreTopology.removeListener('connect', connectErrorHandler); // Destroy the replset\n\n        self.s.coreTopology.destroy(); // Try to callback\n\n        try {\n          callback(err);\n        } catch (err) {\n          if (!self.s.coreTopology.isConnected()) process.nextTick(function () {\n            throw err;\n          });\n        }\n      };\n    }; // Set up listeners\n\n\n    self.s.coreTopology.once('timeout', connectErrorHandler('timeout'));\n    self.s.coreTopology.once('error', connectErrorHandler('error'));\n    self.s.coreTopology.once('close', connectErrorHandler('close'));\n    self.s.coreTopology.once('connect', connectHandler); // Start connection\n\n    self.s.coreTopology.connect(_options);\n  }\n\n  close(forceClosed, callback) {\n    ['timeout', 'error', 'close', 'joined', 'left'].forEach(e => this.removeAllListeners(e));\n    super.close(forceClosed, callback);\n  }\n\n}\n\nObject.defineProperty(ReplSet.prototype, 'haInterval', {\n  enumerable: true,\n  get: function () {\n    return this.s.coreTopology.s.haInterval;\n  }\n});\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * The replset high availability event\n *\n * @event ReplSet#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * ReplSet open event, emitted when replicaset can start processing commands.\n *\n * @event ReplSet#open\n * @type {Replset}\n */\n\n/**\n * ReplSet fullsetup event, emitted when all servers in the topology have been connected to.\n *\n * @event ReplSet#fullsetup\n * @type {Replset}\n */\n\n/**\n * ReplSet close event\n *\n * @event ReplSet#close\n * @type {object}\n */\n\n/**\n * ReplSet error event, emitted if there is an error listener.\n *\n * @event ReplSet#error\n * @type {MongoError}\n */\n\n/**\n * ReplSet timeout event\n *\n * @event ReplSet#timeout\n * @type {object}\n */\n\n/**\n * ReplSet parseError event\n *\n * @event ReplSet#parseError\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event ReplSet#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event ReplSet#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event ReplSet#commandFailed\n * @type {object}\n */\n\nmodule.exports = ReplSet;","map":null,"metadata":{},"sourceType":"script"}