{"ast":null,"code":"'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst BulkWriteOperation = require('./bulk_write');\n\nconst MongoError = require('../core').MongoError;\n\nconst prepareDocs = require('./common_functions').prepareDocs;\n\nclass InsertManyOperation extends OperationBase {\n  constructor(collection, docs, options) {\n    super(options);\n    this.collection = collection;\n    this.docs = docs;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    let docs = this.docs;\n    const options = this.options;\n\n    if (!Array.isArray(docs)) {\n      return callback(MongoError.create({\n        message: 'docs parameter must be an array of documents',\n        driver: true\n      }));\n    } // If keep going set unordered\n\n\n    options['serializeFunctions'] = options['serializeFunctions'] || coll.s.serializeFunctions;\n    docs = prepareDocs(coll, docs, options); // Generate the bulk write operations\n\n    const operations = [{\n      insertMany: docs\n    }];\n    const bulkWriteOperation = new BulkWriteOperation(coll, operations, options);\n    bulkWriteOperation.execute((err, result) => {\n      if (err) return callback(err, null);\n      callback(null, mapInsertManyResults(docs, result));\n    });\n  }\n\n}\n\nfunction mapInsertManyResults(docs, r) {\n  const finalResult = {\n    result: {\n      ok: 1,\n      n: r.insertedCount\n    },\n    ops: docs,\n    insertedCount: r.insertedCount,\n    insertedIds: r.insertedIds\n  };\n\n  if (r.getLastOp()) {\n    finalResult.result.opTime = r.getLastOp();\n  }\n\n  return finalResult;\n}\n\nmodule.exports = InsertManyOperation;","map":null,"metadata":{},"sourceType":"script"}