{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\skyle\\\\github\\\\Fumble\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\skyle\\\\github\\\\Fumble\\\\src\\\\examples\\\\Advanced.js\";\nimport React, { useState, useMemo } from 'react'; // import TinderCard from '../react-tinder-card/index'\n\nimport TinderCard from 'react-tinder-card';\nconst db = [{\n  name: 'Richard Hendricks',\n  url: './img/richard.jpg'\n}, {\n  name: 'Erlich Bachman',\n  url: './img/erlich.jpg'\n}, {\n  name: 'Monica Hall',\n  url: './img/monica.jpg'\n}, {\n  name: 'Jared Dunn',\n  url: './img/jared.jpg'\n}, {\n  name: 'Dinesh Chugtai',\n  url: './img/dinesh.jpg'\n}];\nconsole.log('hello world');\nconst alreadyRemoved = [];\nlet charactersState = db; // This fixes issues with updating characters state forcing it to use the current state and not the state that was active when the card was created.\n\nfunction Advanced() {\n  const _useState = useState(db),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        lastDirection = _useState4[0],\n        setLastDirection = _useState4[1];\n\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => React.createRef()), []);\n\n  const swiped = (direction, nameToDelete) => {\n    console.log('Tested: ' + nameToDelete);\n    setLastDirection(direction);\n    alreadyRemoved.push(nameToDelete);\n  };\n\n  const outOfFrame = name => {\n    console.log(name + ' left the screen!');\n    charactersState = charactersState.filter(character => character.name !== name);\n    setCharacters(charactersState);\n  };\n\n  var swipedRight = [];\n\n  const swipe = dir => {\n    console.log(dir);\n    const cardsLeft = characters.filter(person => !alreadyRemoved.includes(person.name));\n\n    if (cardsLeft.length) {\n      if (dir = 'right') {\n        // swipedRight.push(person.name)\n        var length = swipedRight.length;\n        console.log(swipedRight);\n      }\n\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].name; // Find the card object to be removed\n\n      const index = db.map(person => person.name).indexOf(toBeRemoved); // Find the index of which to make the reference to\n\n      alreadyRemoved.push(toBeRemoved); // Make sure the next card gets removed next time if this card do not have time to exit the screen\n\n      childRefs[index].current.swipe(dir); // Swipe the card!\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css?family=Damion&display=swap\",\n    rel: \"stylesheet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css?family=Alatsi&display=swap\",\n    rel: \"stylesheet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"React Tinder Card\"), React.createElement(\"div\", {\n    className: \"cardContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, characters.map((character, index) => React.createElement(TinderCard, {\n    ref: childRefs[index],\n    className: \"swipe\",\n    key: character.name,\n    onSwipe: dir => swiped(dir, character.name),\n    onCardLeftScreen: () => outOfFrame(character.name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      backgroundImage: 'url(' + character.url + ')'\n    },\n    className: \"card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, character.name))))), React.createElement(\"div\", {\n    className: \"buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => swipe('left'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Swipe left!\"), React.createElement(\"button\", {\n    onClick: () => swipe('right'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Swipe right!\")), lastDirection ? React.createElement(\"h2\", {\n    key: lastDirection,\n    className: \"infoText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"You swiped \", lastDirection) : React.createElement(\"h2\", {\n    className: \"infoText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Swipe a card or press a button to get started!\"));\n}\n\nexport default Advanced;","map":{"version":3,"sources":["C:/Users/skyle/github/Fumble/src/examples/Advanced.js"],"names":["React","useState","useMemo","TinderCard","db","name","url","console","log","alreadyRemoved","charactersState","Advanced","characters","setCharacters","lastDirection","setLastDirection","childRefs","Array","length","fill","map","i","createRef","swiped","direction","nameToDelete","push","outOfFrame","filter","character","swipedRight","swipe","dir","cardsLeft","person","includes","toBeRemoved","index","indexOf","current","backgroundImage"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\r\n// import TinderCard from '../react-tinder-card/index'\r\nimport TinderCard from 'react-tinder-card'\r\n\r\nconst db = [\r\n  {\r\n    name: 'Richard Hendricks',\r\n    url: './img/richard.jpg'\r\n  },\r\n  {\r\n    name: 'Erlich Bachman',\r\n    url: './img/erlich.jpg'\r\n  },\r\n  {\r\n    name: 'Monica Hall',\r\n    url: './img/monica.jpg'\r\n  },\r\n  {\r\n    name: 'Jared Dunn',\r\n    url: './img/jared.jpg'\r\n  },\r\n  {\r\n    name: 'Dinesh Chugtai',\r\n    url: './img/dinesh.jpg'\r\n  }\r\n]\r\nconsole.log('hello world')\r\nconst alreadyRemoved = []\r\nlet charactersState = db // This fixes issues with updating characters state forcing it to use the current state and not the state that was active when the card was created.\r\n\r\nfunction Advanced () {\r\n  const [characters, setCharacters] = useState(db)\r\n  const [lastDirection, setLastDirection] = useState()\r\n\r\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => React.createRef()), [])\r\n\r\n  const swiped = (direction, nameToDelete) => {\r\n    console.log('Tested: ' + nameToDelete)\r\n    setLastDirection(direction)\r\n    alreadyRemoved.push(nameToDelete)\r\n  }\r\n\r\n  const outOfFrame = (name) => {\r\n    console.log(name + ' left the screen!')\r\n    charactersState = charactersState.filter(character => character.name !== name)\r\n    setCharacters(charactersState)\r\n  }\r\n\r\n  var swipedRight = []\r\n  const swipe = (dir) => {\r\n    console.log(dir)\r\n    const cardsLeft = characters.filter(person => !alreadyRemoved.includes(person.name))\r\n    if (cardsLeft.length) {\r\n      if(dir = 'right'){\r\n        // swipedRight.push(person.name)\r\n        var length = swipedRight.length\r\n        console.log(swipedRight)\r\n      }\r\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].name // Find the card object to be removed\r\n      const index = db.map(person => person.name).indexOf(toBeRemoved) // Find the index of which to make the reference to\r\n      alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\r\n      childRefs[index].current.swipe(dir) // Swipe the card!\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\r\n      <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />\r\n      <h1>React Tinder Card</h1>\r\n      <div className='cardContainer'>\r\n        {characters.map((character, index) =>\r\n          <TinderCard ref={childRefs[index]} className='swipe' key={character.name} onSwipe={(dir) => swiped(dir, character.name)} onCardLeftScreen={() => outOfFrame(character.name)}>\r\n            <div style={{ backgroundImage: 'url(' + character.url + ')' }} className='card'>\r\n              <h3>{character.name}</h3>\r\n            </div>\r\n          </TinderCard>\r\n        )}\r\n      </div>\r\n      <div className='buttons'>\r\n        <button onClick={() => swipe('left')}>Swipe left!</button>\r\n        <button onClick={() => swipe('right')}>Swipe right!</button>\r\n      </div>\r\n      {lastDirection ? <h2 key={lastDirection} className='infoText'>You swiped {lastDirection}</h2> : <h2 className='infoText'>Swipe a card or press a button to get started!</h2>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Advanced"]},"metadata":{},"sourceType":"module"}