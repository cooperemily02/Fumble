{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _ = require('./');\n\nvar _2 = _interopRequireDefault(_);\n\nvar _framesync = require('framesync');\n\nvar _calc = require('../inc/calc');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Physics = function (_Action) {\n  _inherits(Physics, _Action);\n\n  function Physics() {\n    _classCallCheck(this, Physics);\n\n    return _possibleConstructorReturn(this, _Action.apply(this, arguments));\n  }\n\n  Physics.prototype.update = function update() {\n    var _props = this.props,\n        autoStopSpeed = _props.autoStopSpeed,\n        acceleration = _props.acceleration,\n        friction = _props.friction,\n        velocity = _props.velocity,\n        spring = _props.spring,\n        to = _props.to;\n    var newVelocity = velocity;\n    var elapsed = (0, _framesync.timeSinceLastFrame)(); // Apply acceleration to velocity\n\n    if (acceleration) {\n      newVelocity += (0, _calc.speedPerFrame)(acceleration, elapsed);\n    } // Apply friction to velocity\n\n\n    if (friction) {\n      newVelocity *= Math.pow(1 - friction, elapsed / 100);\n    }\n\n    if (spring && to !== undefined) {\n      var distanceToTarget = to - this.current;\n      newVelocity += distanceToTarget * (0, _calc.speedPerFrame)(spring, elapsed);\n    } // Apply velocity\n\n\n    this.current += (0, _calc.speedPerFrame)(newVelocity, elapsed);\n    this.props.velocity = newVelocity; // Check if simulation is complete\n    // We do this here instead of `isActionComplete` as it allows us\n    // to clamp during this update\n\n    this.isComplete = autoStopSpeed !== false && (!newVelocity || Math.abs(newVelocity) <= autoStopSpeed);\n\n    if (this.isComplete && spring) {\n      this.current = to;\n    }\n\n    return this.current;\n  };\n\n  Physics.prototype.isActionComplete = function isActionComplete() {\n    return this.isComplete;\n  };\n\n  return Physics;\n}(_2.default);\n\nPhysics.defaultProps = {\n  acceleration: 0,\n  friction: 0,\n  velocity: 0,\n  autoStopSpeed: 0.001\n};\n\nexports.default = function (props) {\n  return new Physics(props);\n};","map":null,"metadata":{},"sourceType":"script"}