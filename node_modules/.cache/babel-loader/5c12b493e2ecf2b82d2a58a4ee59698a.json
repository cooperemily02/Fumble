{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst CommandOperationV2 = require('./command_v2');\n\nconst decorateWithCollation = require('../utils').decorateWithCollation;\n\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\n/**\n * Return a list of distinct values for the given key across a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {string} key Field of the document to find distinct values for.\n * @property {object} query The query for filtering the set of documents to which we apply the distinct filter.\n * @property {object} [options] Optional settings. See Collection.prototype.distinct for a list of options.\n */\n\n\nclass DistinctOperation extends CommandOperationV2 {\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {string} key Field of the document to find distinct values for.\n   * @param {object} query The query for filtering the set of documents to which we apply the distinct filter.\n   * @param {object} [options] Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection, key, query, options) {\n    super(collection, options);\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n\n\n  execute(server, callback) {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options; // Distinct command\n\n    const cmd = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    }; // Add maxTimeMS if defined\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    } // Do we have a readConcern specified\n\n\n    decorateWithReadConcern(cmd, coll, options); // Have we specified collation\n\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    super.executeCommand(server, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, this.options.full ? result : result.values);\n    });\n  }\n\n}\n\ndefineAspects(DistinctOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXECUTE_WITH_SELECTION]);\nmodule.exports = DistinctOperation;","map":null,"metadata":{},"sourceType":"script"}