{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _ = require('./');\n\nvar _2 = _interopRequireDefault(_);\n\nvar _framesync = require('framesync');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Value = function (_Action) {\n  _inherits(Value, _Action);\n\n  function Value() {\n    _classCallCheck(this, Value);\n\n    return _possibleConstructorReturn(this, _Action.apply(this, arguments));\n  }\n\n  Value.prototype.set = function set(v) {\n    this.toUpdate = v;\n    (0, _framesync.onFrameUpdate)(this.scheduledUpdate);\n    return v;\n  };\n\n  Value.prototype.update = function update() {\n    return this.toUpdate !== undefined ? this.toUpdate : this.current;\n  };\n\n  Value.prototype.stopRegisteredAction = function stopRegisteredAction() {\n    if (this.action && this.action.isActive()) this.action.stop();\n    this.action = undefined;\n  };\n\n  Value.prototype.registerAction = function registerAction(action) {\n    this.stopRegisteredAction();\n    this.action = action;\n    return this;\n  };\n\n  Value.prototype.onStop = function onStop() {\n    this.stopRegisteredAction();\n  };\n\n  return Value;\n}(_2.default);\n\nValue.defaultProps = {\n  passive: true\n};\n\nexports.default = function (current, onUpdate) {\n  return new Value({\n    current: current,\n    onUpdate: onUpdate\n  });\n};","map":null,"metadata":{},"sourceType":"script"}