{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _popmotion = require('popmotion');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _normalizeColor = require('./normalizeColor');\n\nvar _normalizeColor2 = _interopRequireDefault(_normalizeColor);\n\nvar _prefixStyle = require('./prefixStyle');\n\nvar _prefixStyle2 = _interopRequireDefault(_prefixStyle);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Switch = function (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  function Switch(props) {\n    _classCallCheck(this, Switch);\n\n    var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));\n\n    _this.state = {\n      isDragging: false,\n      offset: null\n    };\n    _this.handleChange = _this.handleChange.bind(_this);\n    _this.handleClick = _this.handleClick.bind(_this);\n    _this.handleHandleClick = _this.handleHandleClick.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.setRef = _this.setRef.bind(_this);\n    return _this;\n  }\n\n  _createClass(Switch, [{\n    key: 'clickChange',\n    value: function clickChange(checked) {\n      if (this.ref.parentNode && this.ref.parentNode.tagName.toLowerCase() === 'label') {\n        // if the parent is a label, we don't need to emit the change event ourselves\n        return;\n      }\n\n      this.props.onChange(checked);\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      window.addEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: 'getHandleColor',\n    value: function getHandleColor() {\n      return (0, _normalizeColor2.default)(this.props.handleColor);\n    }\n  }, {\n    key: 'getHandleCursor',\n    value: function getHandleCursor() {\n      if (this.isDisabled()) {\n        return 'default';\n      }\n\n      return this.state.isDragging ? 'grabbing' : 'grab';\n    }\n  }, {\n    key: 'getHandleLength',\n    value: function getHandleLength() {\n      return this.getHeight() - 2;\n    }\n  }, {\n    key: 'getHeight',\n    value: function getHeight() {\n      return 30;\n    }\n  }, {\n    key: 'getOffColor',\n    value: function getOffColor() {\n      return (0, _normalizeColor2.default)(this.props.offColor);\n    }\n  }, {\n    key: 'getOffset',\n    value: function getOffset() {\n      if (this.state.isDragging) {\n        return this.state.offset;\n      }\n\n      return this.props.checked ? this.getOffsetWidth() : 0;\n    }\n  }, {\n    key: 'getOffsetProgress',\n    value: function getOffsetProgress() {\n      return this.getOffset() / this.getOffsetWidth();\n    }\n  }, {\n    key: 'getOffsetWidth',\n    value: function getOffsetWidth(props) {\n      return this.getWidth() - this.getHandleLength() - 2;\n    }\n  }, {\n    key: 'getOnColor',\n    value: function getOnColor() {\n      return (0, _normalizeColor2.default)(this.props.onColor);\n    }\n  }, {\n    key: 'getPendingColor',\n    value: function getPendingColor(_ref) {\n      var color = _ref.color,\n          pendingColor = _ref.pendingColor;\n\n      if (!pendingColor) {\n        return color === 'white' ? // default pending color for white color\n        '#dfdfdf' : (0, _normalizeColor2.default)(color);\n      }\n\n      return (0, _normalizeColor2.default)(pendingColor);\n    }\n  }, {\n    key: 'getPendingOffColor',\n    value: function getPendingOffColor() {\n      return this.getPendingColor({\n        color: this.props.offColor,\n        pendingColor: this.props.pendingOffColor\n      });\n    }\n  }, {\n    key: 'getPendingOnColor',\n    value: function getPendingOnColor() {\n      return this.getPendingColor({\n        color: this.props.onColor,\n        pendingColor: this.props.pendingOnColor\n      });\n    }\n  }, {\n    key: 'getWidth',\n    value: function getWidth() {\n      return 50;\n    }\n  }, {\n    key: 'handleChange',\n    value: function handleChange(e) {\n      this.props.onChange(e.target.checked);\n    }\n  }, {\n    key: 'handleClick',\n    value: function handleClick(e) {\n      if (this.isDisabled()) {\n        return;\n      } // handle case when the switch is clicked\n\n\n      this.clickChange(!this.props.checked);\n    }\n  }, {\n    key: 'handleHandleClick',\n    value: function handleHandleClick(e) {\n      e.stopPropagation();\n    }\n  }, {\n    key: 'handleMouseDown',\n    value: function handleMouseDown(e) {\n      var _this2 = this;\n\n      if (this.isDisabled()) {\n        return;\n      }\n\n      this.pointerTracker = (0, _popmotion.pointer)(e).start();\n      this.offsetTracker = (0, _popmotion.trackOffset)(this.pointerTracker.x, {\n        from: this.getOffset(),\n        onUpdate: _popmotion.transform.pipe(_popmotion.transform.clamp(0, this.getOffsetWidth()), function (offset) {\n          return _this2.setState({\n            offset: offset\n          });\n        })\n      }).start();\n      this.setState({\n        isDragging: true,\n        offset: this.getOffset()\n      });\n    }\n  }, {\n    key: 'handleMouseUp',\n    value: function handleMouseUp() {\n      if (!this.state.isDragging) {\n        return;\n      }\n\n      this.pointerTracker.stop();\n      this.offsetTracker.stop();\n      var prevOffset = this.props.checked ? this.getOffsetWidth() : 0;\n      var checked = this.state.offset === prevOffset ? // handle case when the handle is clicked\n      !this.props.checked : // handle case when the handle is dragged\n      this.getOffsetProgress() >= 0.5;\n      this.setState({\n        isDragging: false,\n        offset: null\n      });\n      this.clickChange(checked);\n    }\n  }, {\n    key: 'isDisabled',\n    value: function isDisabled() {\n      return this.props.disabled || this.props.readOnly;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          checked = _props.checked,\n          className = _props.className,\n          disabled = _props.disabled,\n          name = _props.name,\n          onChange = _props.onChange,\n          readOnly = _props.readOnly,\n          style = _props.style;\n      var isDragging = this.state.isDragging;\n\n      var color = _popmotion.transform.pipe(_popmotion.easing.createExpoIn(2), _popmotion.transform.blendColor(this.getOffColor(), this.getOnColor()), _popmotion.transform.rgba)(this.getOffsetProgress());\n\n      var borderColor = _popmotion.transform.pipe(_popmotion.easing.createExpoIn(1), _popmotion.transform.blendColor(this.getPendingOffColor(), this.getPendingOnColor()), _popmotion.transform.rgba)(this.getOffsetProgress());\n\n      return _react2.default.createElement('span', {\n        className: className,\n        onClick: this.handleClick,\n        ref: this.setRef,\n        style: _extends({}, (0, _prefixStyle2.default)({\n          backgroundColor: color,\n          border: '1px solid ' + borderColor,\n          borderRadius: this.getHeight() / 2,\n          boxShadow: 'inset 0 0 0 ' + this.getOffset() + 'px ' + borderColor,\n          boxSizing: 'border-box',\n          display: 'inline-block',\n          height: this.getHeight(),\n          opacity: this.isDisabled() ? 0.5 : 1,\n          position: 'relative',\n          transition: isDragging ? null : '0.2s',\n          userSelect: 'none',\n          width: this.getWidth()\n        }), style)\n      }, _react2.default.createElement('span', {\n        onClick: this.handleHandleClick,\n        onMouseDown: this.handleMouseDown,\n        style: (0, _prefixStyle2.default)({\n          backgroundColor: this.getHandleColor(),\n          borderRadius: '100%',\n          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.4)',\n          cursor: this.getHandleCursor(),\n          display: 'inline-block',\n          height: this.getHandleLength(),\n          left: this.getOffset(),\n          position: 'absolute',\n          top: 0,\n          transition: isDragging ? null : '0.2s',\n          width: this.getHandleLength()\n        })\n      }), _react2.default.createElement('input', {\n        checked: checked,\n        disabled: disabled,\n        name: name,\n        onChange: this.handleChange,\n        readOnly: readOnly,\n        style: {\n          display: 'none'\n        },\n        type: 'checkbox'\n      }));\n    }\n  }, {\n    key: 'setRef',\n    value: function setRef(ref) {\n      this.ref = ref;\n    }\n  }]);\n\n  return Switch;\n}(_react2.default.Component);\n\nSwitch.propTypes = {\n  checked: _propTypes2.default.bool,\n  className: _propTypes2.default.string,\n  disabled: _propTypes2.default.bool,\n  handleColor: _propTypes2.default.string,\n  name: _propTypes2.default.string,\n  offColor: _propTypes2.default.string,\n  onChange: _propTypes2.default.func,\n  onColor: _propTypes2.default.string,\n  pendingOffColor: _propTypes2.default.string,\n  pendingOnColor: _propTypes2.default.string,\n  readOnly: _propTypes2.default.bool,\n  style: _propTypes2.default.object\n};\nSwitch.defaultProps = {\n  handleColor: 'white',\n  offColor: 'white',\n  onChange: function onChange() {},\n  onColor: 'rgb(76, 217, 100)'\n};\nexports.default = Switch;","map":null,"metadata":{},"sourceType":"script"}