{"ast":null,"code":"'use strict';\n/**\n * The base class for all monitoring events published from the connection pool\n *\n * @property {number} time A timestamp when the event was created\n * @property {string} address The address (host/port pair) of the pool\n */\n\nclass ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n\n}\n/**\n * An event published when a connection pool is created\n *\n * @property {Object} options The options used to create this connection pool\n */\n\n\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n    this.options = pool.options;\n  }\n\n}\n/**\n * An event published when a connection pool is closed\n */\n\n\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n\n}\n/**\n * An event published when a connection pool creates a new connection\n *\n * @property {number} connectionId A monotonically increasing, per-pool id for the newly created connection\n */\n\n\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n/**\n * An event published when a connection is ready for use\n *\n * @property {number} connectionId The id of the connection\n */\n\n\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n/**\n * An event published when a connection is closed\n *\n * @property {number} connectionId The id of the connection\n * @property {string} reason The reason the connection was closed\n */\n\n\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection, reason) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n  }\n\n}\n/**\n * An event published when a request to check a connection out begins\n */\n\n\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n\n}\n/**\n * An event published when a request to check a connection out fails\n *\n * @property {string} reason The reason the attempt to check out failed\n */\n\n\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, reason) {\n    super(pool);\n    this.reason = reason;\n  }\n\n}\n/**\n * An event published when a connection is checked out of the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\n\n\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n/**\n * An event published when a connection is checked into the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\n\n\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n/**\n * An event published when a connection pool is cleared\n */\n\n\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n\n}\n\nconst CMAP_EVENT_NAMES = ['connectionPoolCreated', 'connectionPoolClosed', 'connectionCreated', 'connectionReady', 'connectionClosed', 'connectionCheckOutStarted', 'connectionCheckOutFailed', 'connectionCheckedOut', 'connectionCheckedIn', 'connectionPoolCleared'];\nmodule.exports = {\n  CMAP_EVENT_NAMES,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionReadyEvent,\n  ConnectionClosedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckedInEvent,\n  ConnectionPoolClearedEvent\n};","map":null,"metadata":{},"sourceType":"script"}