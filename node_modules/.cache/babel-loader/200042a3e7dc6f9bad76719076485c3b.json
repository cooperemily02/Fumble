{"ast":null,"code":"'use strict';\n\nconst Query = require('../connection/commands').Query;\n\nconst MongoError = require('../error').MongoError;\n\nconst getReadPreference = require('./shared').getReadPreference;\n\nconst collectionNamespace = require('./shared').collectionNamespace;\n\nconst isSharded = require('./shared').isSharded;\n\nconst maxWireVersion = require('../utils').maxWireVersion;\n\nconst applyCommonQueryOptions = require('./shared').applyCommonQueryOptions;\n\nconst command = require('./command');\n\nfunction query(server, ns, cmd, cursorState, options, callback) {\n  options = options || {};\n\n  if (cursorState.cursorId != null) {\n    return callback();\n  }\n\n  if (cmd == null) {\n    return callback(new MongoError(`command ${JSON.stringify(cmd)} does not return a cursor`));\n  }\n\n  if (maxWireVersion(server) < 4) {\n    const query = prepareLegacyFindQuery(server, ns, cmd, cursorState, options);\n    const queryOptions = applyCommonQueryOptions({}, cursorState);\n\n    if (typeof query.documentsReturnedIn === 'string') {\n      queryOptions.documentsReturnedIn = query.documentsReturnedIn;\n    }\n\n    server.s.pool.write(query, queryOptions, callback);\n    return;\n  }\n\n  const readPreference = getReadPreference(cmd, options);\n  const findCmd = prepareFindCommand(server, ns, cmd, cursorState, options); // NOTE: This actually modifies the passed in cmd, and our code _depends_ on this\n  //       side-effect. Change this ASAP\n\n  cmd.virtual = false;\n  const commandOptions = Object.assign({\n    documentsReturnedIn: 'firstBatch',\n    numberToReturn: 1,\n    slaveOk: readPreference.slaveOk()\n  }, options);\n\n  if (cmd.readPreference) {\n    commandOptions.readPreference = readPreference;\n  }\n\n  if (cursorState.session) {\n    commandOptions.session = cursorState.session;\n  }\n\n  command(server, ns, findCmd, commandOptions, callback);\n}\n\nfunction prepareFindCommand(server, ns, cmd, cursorState) {\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n  let findCmd = {\n    find: collectionNamespace(ns)\n  };\n\n  if (cmd.query) {\n    if (cmd.query['$query']) {\n      findCmd.filter = cmd.query['$query'];\n    } else {\n      findCmd.filter = cmd.query;\n    }\n  }\n\n  let sortValue = cmd.sort;\n\n  if (Array.isArray(sortValue)) {\n    const sortObject = {};\n\n    if (sortValue.length > 0 && !Array.isArray(sortValue[0])) {\n      let sortDirection = sortValue[1];\n\n      if (sortDirection === 'asc') {\n        sortDirection = 1;\n      } else if (sortDirection === 'desc') {\n        sortDirection = -1;\n      }\n\n      sortObject[sortValue[0]] = sortDirection;\n    } else {\n      for (let i = 0; i < sortValue.length; i++) {\n        let sortDirection = sortValue[i][1];\n\n        if (sortDirection === 'asc') {\n          sortDirection = 1;\n        } else if (sortDirection === 'desc') {\n          sortDirection = -1;\n        }\n\n        sortObject[sortValue[i][0]] = sortDirection;\n      }\n    }\n\n    sortValue = sortObject;\n  }\n\n  if (typeof cmd.allowDiskUse === 'boolean') {\n    findCmd.allowDiskUse = cmd.allowDiskUse;\n  }\n\n  if (cmd.sort) findCmd.sort = sortValue;\n  if (cmd.fields) findCmd.projection = cmd.fields;\n  if (cmd.hint) findCmd.hint = cmd.hint;\n  if (cmd.skip) findCmd.skip = cmd.skip;\n  if (cmd.limit) findCmd.limit = cmd.limit;\n\n  if (cmd.limit < 0) {\n    findCmd.limit = Math.abs(cmd.limit);\n    findCmd.singleBatch = true;\n  }\n\n  if (typeof cmd.batchSize === 'number') {\n    if (cmd.batchSize < 0) {\n      if (cmd.limit !== 0 && Math.abs(cmd.batchSize) < Math.abs(cmd.limit)) {\n        findCmd.limit = Math.abs(cmd.batchSize);\n      }\n\n      findCmd.singleBatch = true;\n    }\n\n    findCmd.batchSize = Math.abs(cmd.batchSize);\n  }\n\n  if (cmd.comment) findCmd.comment = cmd.comment;\n  if (cmd.maxScan) findCmd.maxScan = cmd.maxScan;\n  if (cmd.maxTimeMS) findCmd.maxTimeMS = cmd.maxTimeMS;\n  if (cmd.min) findCmd.min = cmd.min;\n  if (cmd.max) findCmd.max = cmd.max;\n  findCmd.returnKey = cmd.returnKey ? cmd.returnKey : false;\n  findCmd.showRecordId = cmd.showDiskLoc ? cmd.showDiskLoc : false;\n  if (cmd.snapshot) findCmd.snapshot = cmd.snapshot;\n  if (cmd.tailable) findCmd.tailable = cmd.tailable;\n  if (cmd.oplogReplay) findCmd.oplogReplay = cmd.oplogReplay;\n  if (cmd.noCursorTimeout) findCmd.noCursorTimeout = cmd.noCursorTimeout;\n  if (cmd.awaitData) findCmd.awaitData = cmd.awaitData;\n  if (cmd.awaitdata) findCmd.awaitData = cmd.awaitdata;\n  if (cmd.partial) findCmd.partial = cmd.partial;\n  if (cmd.collation) findCmd.collation = cmd.collation;\n  if (cmd.readConcern) findCmd.readConcern = cmd.readConcern; // If we have explain, we need to rewrite the find command\n  // to wrap it in the explain command\n\n  if (cmd.explain) {\n    findCmd = {\n      explain: findCmd\n    };\n  }\n\n  return findCmd;\n}\n\nfunction prepareLegacyFindQuery(server, ns, cmd, cursorState, options) {\n  options = options || {};\n  const bson = server.s.bson;\n  const readPreference = getReadPreference(cmd, options);\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n  let numberToReturn = 0;\n\n  if (cursorState.limit < 0 || cursorState.limit !== 0 && cursorState.limit < cursorState.batchSize || cursorState.limit > 0 && cursorState.batchSize === 0) {\n    numberToReturn = cursorState.limit;\n  } else {\n    numberToReturn = cursorState.batchSize;\n  }\n\n  const numberToSkip = cursorState.skip || 0;\n  const findCmd = {};\n\n  if (isSharded(server) && readPreference) {\n    findCmd['$readPreference'] = readPreference.toJSON();\n  }\n\n  if (cmd.sort) findCmd['$orderby'] = cmd.sort;\n  if (cmd.hint) findCmd['$hint'] = cmd.hint;\n  if (cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot;\n  if (typeof cmd.returnKey !== 'undefined') findCmd['$returnKey'] = cmd.returnKey;\n  if (cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan;\n  if (cmd.min) findCmd['$min'] = cmd.min;\n  if (cmd.max) findCmd['$max'] = cmd.max;\n  if (typeof cmd.showDiskLoc !== 'undefined') findCmd['$showDiskLoc'] = cmd.showDiskLoc;\n  if (cmd.comment) findCmd['$comment'] = cmd.comment;\n  if (cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS;\n\n  if (cmd.explain) {\n    // nToReturn must be 0 (match all) or negative (match N and close cursor)\n    // nToReturn > 0 will give explain results equivalent to limit(0)\n    numberToReturn = -Math.abs(cmd.limit || 0);\n    findCmd['$explain'] = true;\n  }\n\n  findCmd['$query'] = cmd.query;\n\n  if (cmd.readConcern && cmd.readConcern.level !== 'local') {\n    throw new MongoError(`server find command does not support a readConcern level of ${cmd.readConcern.level}`);\n  }\n\n  if (cmd.readConcern) {\n    cmd = Object.assign({}, cmd);\n    delete cmd['readConcern'];\n  }\n\n  const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n  const query = new Query(bson, ns, findCmd, {\n    numberToSkip: numberToSkip,\n    numberToReturn: numberToReturn,\n    pre32Limit: typeof cmd.limit !== 'undefined' ? cmd.limit : undefined,\n    checkKeys: false,\n    returnFieldSelector: cmd.fields,\n    serializeFunctions: serializeFunctions,\n    ignoreUndefined: ignoreUndefined\n  });\n  if (typeof cmd.tailable === 'boolean') query.tailable = cmd.tailable;\n  if (typeof cmd.oplogReplay === 'boolean') query.oplogReplay = cmd.oplogReplay;\n  if (typeof cmd.noCursorTimeout === 'boolean') query.noCursorTimeout = cmd.noCursorTimeout;\n  if (typeof cmd.awaitData === 'boolean') query.awaitData = cmd.awaitData;\n  if (typeof cmd.partial === 'boolean') query.partial = cmd.partial;\n  query.slaveOk = readPreference.slaveOk();\n  return query;\n}\n\nmodule.exports = query;","map":null,"metadata":{},"sourceType":"script"}