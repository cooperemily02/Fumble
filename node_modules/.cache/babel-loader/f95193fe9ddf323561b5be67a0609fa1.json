{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.complex = exports.color = exports.hsla = exports.hex = exports.rgba = exports.rgbUnit = exports.scale = exports.px = exports.percent = exports.degrees = exports.alpha = exports.number = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Value types\n *\n * alpha\n * degrees\n * hex\n * hsla\n * percent\n * px\n * rgbUnit\n * rgb\n * scale\n */\n\n\nvar _transformers = require('./transformers');\n\nvar _parsers = require('./parsers');\n\nvar _utils = require('./utils');\n\nvar number = exports.number = {\n  test: _utils.isNum,\n  parse: parseFloat\n}; // Value types\n\nvar alpha = exports.alpha = _extends({}, number, {\n  transform: _transformers.alpha\n});\n\nvar degrees = exports.degrees = (0, _utils.createUnitType)('deg', _transformers.degrees);\nvar percent = exports.percent = (0, _utils.createUnitType)('%', _transformers.percent);\nvar px = exports.px = (0, _utils.createUnitType)('px', _transformers.px);\n\nvar scale = exports.scale = _extends({}, number, {\n  default: 1\n});\n\nvar rgbUnit = exports.rgbUnit = _extends({}, number, {\n  transform: _transformers.rgbUnit\n});\n\nvar rgba = exports.rgba = {\n  test: _utils.isRgb,\n  parse: _parsers.rgba,\n  transform: _transformers.rgba\n};\n\nvar hex = exports.hex = _extends({}, rgba, {\n  test: _utils.isHex,\n  parse: _parsers.hex\n});\n\nvar hsla = exports.hsla = {\n  test: _utils.isHsl,\n  parse: _parsers.hsla,\n  transform: _transformers.hsla\n};\nvar color = exports.color = {\n  parse: _parsers.color,\n  test: _utils.isColor,\n  transform: _transformers.color\n};\nvar FLOAT_REGEX = /(-)?(\\d[\\d\\.]*)/g;\n\nvar generateToken = function generateToken(token) {\n  return '${' + token + '}';\n};\n\nvar complex = exports.complex = {\n  test: function test(v) {\n    var matches = v.match && v.match(FLOAT_REGEX);\n    return (0, _utils.isArray)(matches) && matches.length > 1;\n  },\n  parse: function parse(v) {\n    var parsedValue = {};\n    v.match(FLOAT_REGEX).forEach(function (value, i) {\n      return parsedValue[i] = parseFloat(value);\n    });\n    return parsedValue;\n  },\n  createTransformer: function createTransformer(prop) {\n    var counter = 0;\n    var template = prop.replace(FLOAT_REGEX, function () {\n      return generateToken(counter++);\n    });\n    return function (v) {\n      var output = template;\n\n      for (var key in v) {\n        if (v.hasOwnProperty(key)) {\n          output = output.replace(generateToken(key), v[key]);\n        }\n      }\n\n      return output;\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}