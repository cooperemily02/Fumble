{"ast":null,"code":"var hasRAF = typeof window !== 'undefined' && window.requestAnimationFrame !== undefined;\nvar prevTime = 0;\nvar onNextFrame = hasRAF ? function (callback) {\n  return window.requestAnimationFrame(callback);\n} : function (callback) {\n  var currentTime = Date.now();\n  var timeToCall = Math.max(0, 16.7 - (currentTime - prevTime));\n  prevTime = currentTime + timeToCall;\n  setTimeout(function () {\n    return callback(prevTime);\n  }, timeToCall);\n};\n\nfunction createRenderStep(startRenderLoop) {\n  var functionsToRun = [];\n  var functionsToRunNextFrame = [];\n  var numThisFrame = 0;\n  var isProcessing = false;\n  var i = 0;\n  return {\n    cancel: function cancel(callback) {\n      var indexOfCallback = functionsToRunNextFrame.indexOf(callback);\n\n      if (indexOfCallback !== -1) {\n        functionsToRunNextFrame.splice(indexOfCallback, 1);\n      }\n    },\n    process: function process() {\n      isProcessing = true;\n      _a = [functionsToRunNextFrame, functionsToRun], functionsToRun = _a[0], functionsToRunNextFrame = _a[1];\n      functionsToRunNextFrame.length = 0;\n      numThisFrame = functionsToRun.length;\n\n      for (i = 0; i < numThisFrame; i++) {\n        functionsToRun[i]();\n      }\n\n      isProcessing = false;\n\n      var _a;\n    },\n    schedule: function schedule(callback, immediate) {\n      if (immediate === void 0) {\n        immediate = false;\n      }\n\n      startRenderLoop();\n      var addToCurrentBuffer = immediate && isProcessing;\n      var buffer = addToCurrentBuffer ? functionsToRun : functionsToRunNextFrame;\n\n      if (buffer.indexOf(callback) === -1) {\n        buffer.push(callback);\n\n        if (addToCurrentBuffer) {\n          numThisFrame = functionsToRun.length;\n        }\n      }\n    }\n  };\n}\n\nvar HAS_PERFORMANCE_NOW = typeof performance !== 'undefined' && performance.now !== undefined;\nvar currentTime = HAS_PERFORMANCE_NOW ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nvar willRenderNextFrame = false;\nvar MAX_ELAPSED = 40;\nvar defaultElapsed = 16.7;\nvar useDefaultElapsed = true;\nvar currentFramestamp = 0;\nvar elapsed = 0;\n\nfunction startRenderLoop() {\n  if (willRenderNextFrame) return;\n  willRenderNextFrame = true;\n  useDefaultElapsed = true;\n  onNextFrame(processFrame);\n}\n\nvar frameStart = createRenderStep(startRenderLoop);\nvar frameUpdate = createRenderStep(startRenderLoop);\nvar frameRender = createRenderStep(startRenderLoop);\nvar frameEnd = createRenderStep(startRenderLoop);\n\nfunction processFrame(framestamp) {\n  willRenderNextFrame = false;\n  elapsed = useDefaultElapsed ? defaultElapsed : Math.max(Math.min(framestamp - currentFramestamp, MAX_ELAPSED), 1);\n  if (!useDefaultElapsed) defaultElapsed = elapsed;\n  currentFramestamp = framestamp;\n  frameStart.process();\n  frameUpdate.process();\n  frameRender.process();\n  frameEnd.process();\n  if (willRenderNextFrame) useDefaultElapsed = false;\n}\n\nvar onFrameStart = frameStart.schedule;\nvar onFrameUpdate = frameUpdate.schedule;\nvar onFrameRender = frameRender.schedule;\nvar onFrameEnd = frameEnd.schedule;\nvar cancelOnFrameStart = frameStart.cancel;\nvar cancelOnFrameUpdate = frameUpdate.cancel;\nvar cancelOnFrameRender = frameRender.cancel;\nvar cancelOnFrameEnd = frameEnd.cancel;\n\nvar timeSinceLastFrame = function timeSinceLastFrame() {\n  return elapsed;\n};\n\nvar currentFrameTime = function currentFrameTime() {\n  return currentFramestamp;\n};\n\nexport { currentTime, onFrameStart, onFrameUpdate, onFrameRender, onFrameEnd, cancelOnFrameStart, cancelOnFrameUpdate, cancelOnFrameRender, cancelOnFrameEnd, timeSinceLastFrame, currentFrameTime };","map":null,"metadata":{},"sourceType":"module"}