{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _ = require('./');\n\nvar _2 = _interopRequireDefault(_);\n\nvar _framesync = require('framesync');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/*\n  The closed-form damped harmonic oscillating spring.\n  Or, spring.\n\n  This is a direct port of Adam Miskiewicz's (@skevy) React Animated\n  PR #15322 https://github.com/facebook/react-native/pull/15322/\n\n  ```\n  spring({\n    mass: 2,\n    damping: 10,\n    stiffness: 100,\n    to: 100\n  }).start();\n  ```\n\n  Adam Miskiewicz:\n  @skevy (twitter.com/skevy, github.com/skevy)\n */\n\n\nvar Spring = function (_Action) {\n  _inherits(Spring, _Action);\n\n  function Spring() {\n    _classCallCheck(this, Spring);\n\n    return _possibleConstructorReturn(this, _Action.apply(this, arguments));\n  }\n\n  Spring.prototype.onStart = function onStart() {\n    var _props = this.props,\n        velocity = _props.velocity,\n        to = _props.to,\n        from = _props.from;\n    this.t = 0;\n    this.initialVelocity = velocity ? velocity / 1000 : 0.0;\n    this.isComplete = false;\n    this.delta = to - from;\n  };\n\n  Spring.prototype.update = function update() {\n    var _props2 = this.props,\n        stiffness = _props2.stiffness,\n        damping = _props2.damping,\n        mass = _props2.mass,\n        from = _props2.from,\n        to = _props2.to,\n        restSpeed = _props2.restSpeed,\n        restDisplacement = _props2.restDisplacement;\n    var delta = this.delta,\n        initialVelocity = this.initialVelocity;\n    var timeDelta = (0, _framesync.timeSinceLastFrame)() / 1000;\n    var t = this.t = this.t + timeDelta;\n    var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    var angularFreq = Math.sqrt(stiffness / mass);\n    var expoDecay = angularFreq * Math.sqrt(1.0 - dampingRatio * dampingRatio);\n    var x0 = 1;\n    var oscillation = 0.0; // Underdamped\n\n    if (dampingRatio < 1) {\n      var envelope = Math.exp(-dampingRatio * angularFreq * t);\n      oscillation = envelope * ((initialVelocity + dampingRatio * angularFreq * x0) / expoDecay * Math.sin(expoDecay * t) + x0 * Math.cos(expoDecay * t));\n      this.velocity = envelope * (Math.cos(expoDecay * t) * (initialVelocity + dampingRatio * angularFreq * x0) - expoDecay * x0 * Math.sin(expoDecay * t)) - dampingRatio * angularFreq * envelope * (Math.sin(expoDecay * t) * (initialVelocity + dampingRatio * angularFreq * x0) / expoDecay + x0 * Math.cos(expoDecay * t)); // Critically damped\n    } else {\n      var _envelope = Math.exp(-angularFreq * t);\n\n      oscillation = _envelope * (x0 + (initialVelocity + angularFreq * x0) * t);\n      this.velocity = _envelope * (t * initialVelocity * angularFreq - t * x0 * (angularFreq * angularFreq) + initialVelocity);\n    }\n\n    var fraction = 1 - oscillation;\n    var position = from + fraction * delta; // Check if simulation is complete\n    // We do this here instead of `isActionComplete` as it allows us\n    // to clamp to end during update)\n\n    var isBelowVelocityThreshold = Math.abs(this.velocity) <= restSpeed;\n    var isBelowDisplacementThreshold = Math.abs(to - position) <= restDisplacement;\n    this.isComplete = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n\n    if (this.isComplete) {\n      position = to;\n    }\n\n    return position;\n  };\n\n  Spring.prototype.isActionComplete = function isActionComplete() {\n    return this.isComplete;\n  };\n\n  return Spring;\n}(_2.default);\n\nSpring.defaultProps = {\n  stiffness: 100,\n  damping: 10,\n  mass: 1.0,\n  velocity: 0.0,\n  from: 0.0,\n  to: 0.0,\n  restSpeed: 0.01,\n  restDisplacement: 0.01\n};\n\nexports.default = function (props) {\n  return new Spring(props);\n};","map":null,"metadata":{},"sourceType":"script"}