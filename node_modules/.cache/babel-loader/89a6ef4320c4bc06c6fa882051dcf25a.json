{"ast":null,"code":"'use strict';\n\nconst CommandOperation = require('./command');\n\nclass ValidateCollectionOperation extends CommandOperation {\n  constructor(admin, collectionName, options) {\n    // Decorate command with extra options\n    let command = {\n      validate: collectionName\n    };\n    const keys = Object.keys(options);\n\n    for (let i = 0; i < keys.length; i++) {\n      if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n        command[keys[i]] = options[keys[i]];\n      }\n    }\n\n    super(admin.s.db, options, null, command);\n    this.collectionName = collectionName;\n  }\n\n  execute(callback) {\n    const collectionName = this.collectionName;\n    super.execute((err, doc) => {\n      if (err != null) return callback(err, null);\n      if (doc.ok === 0) return callback(new Error('Error with validate command'), null);\n      if (doc.result != null && doc.result.constructor !== String) return callback(new Error('Error with validation data'), null);\n      if (doc.result != null && doc.result.match(/exception|corrupt/) != null) return callback(new Error('Error: invalid collection ' + collectionName), null);\n      if (doc.valid != null && !doc.valid) return callback(new Error('Error: invalid collection ' + collectionName), null);\n      return callback(null, doc);\n    });\n  }\n\n}\n\nmodule.exports = ValidateCollectionOperation;","map":null,"metadata":{},"sourceType":"script"}