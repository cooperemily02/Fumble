{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _ = require('./');\n\nvar _2 = _interopRequireDefault(_);\n\nvar _framesync = require('framesync');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/*\n  The closed-form damped harmonic oscillating spring.\n  Or, spring.\n\n  This is a direct port of Adam Miskiewicz's (@skevy) React Animated\n  PR #15322 https://github.com/facebook/react-native/pull/15322/\n\n  ```\n  spring({\n    mass: 2,\n    damping: 10,\n    stiffness: 100,\n    to: 100\n  }).start();\n  ```\n\n  Adam Miskiewicz:\n  @skevy (twitter.com/skevy, github.com/skevy)\n */\n\n\nvar Spring = function (_Action) {\n  _inherits(Spring, _Action);\n\n  function Spring() {\n    _classCallCheck(this, Spring);\n\n    return _possibleConstructorReturn(this, _Action.apply(this, arguments));\n  }\n\n  Spring.prototype.onStart = function onStart() {\n    var _props = this.props,\n        velocity = _props.velocity,\n        to = _props.to,\n        from = _props.from;\n    this.t = 0;\n    this.initialVelocity = velocity ? velocity / 1000 : 0.0;\n    this.isComplete = false;\n    this.delta = to - from;\n  };\n\n  Spring.prototype.update = function update() {\n    var _props2 = this.props,\n        stiffness = _props2.stiffness,\n        damping = _props2.damping,\n        mass = _props2.mass,\n        from = _props2.from,\n        to = _props2.to,\n        restSpeed = _props2.restSpeed,\n        restDisplacement = _props2.restDisplacement;\n    var delta = this.delta,\n        initialVelocity = this.initialVelocity;\n    var timeDelta = (0, _framesync.timeSinceLastFrame)() / 1000;\n    var t = this.t = this.t + timeDelta;\n    var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    var angularFreq = Math.sqrt(stiffness / mass);\n    var expoDecay = angularFreq * Math.sqrt(1.0 - dampingRatio * dampingRatio);\n    var x0 = 1;\n    var oscillation = 0.0; // Underdamped\n\n    if (dampingRatio < 1) {\n      var envelope = Math.exp(-dampingRatio * angularFreq * t);\n      oscillation = envelope * ((initialVelocity + dampingRatio * angularFreq * x0) / expoDecay * Math.sin(expoDecay * t) + x0 * Math.cos(expoDecay * t));\n      this.velocity = envelope * (Math.cos(expoDecay * t) * (initialVelocity + dampingRatio * angularFreq * x0) - expoDecay * x0 * Math.sin(expoDecay * t)) - dampingRatio * angularFreq * envelope * (Math.sin(expoDecay * t) * (initialVelocity + dampingRatio * angularFreq * x0) / expoDecay + x0 * Math.cos(expoDecay * t)); // Critically damped\n    } else {\n      var _envelope = Math.exp(-angularFreq * t);\n\n      oscillation = _envelope * (x0 + (initialVelocity + angularFreq * x0) * t);\n      this.velocity = _envelope * (t * initialVelocity * angularFreq - t * x0 * (angularFreq * angularFreq) + initialVelocity);\n    }\n\n    var fraction = 1 - oscillation;\n    var position = from + fraction * delta; // Check if simulation is complete\n    // We do this here instead of `isActionComplete` as it allows us\n    // to clamp to end during update)\n\n    var isBelowVelocityThreshold = Math.abs(this.velocity) <= restSpeed;\n    var isBelowDisplacementThreshold = Math.abs(to - position) <= restDisplacement;\n    this.isComplete = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n\n    if (this.isComplete) {\n      position = to;\n    }\n\n    return position;\n  };\n\n  Spring.prototype.isActionComplete = function isActionComplete() {\n    return this.isComplete;\n  };\n\n  return Spring;\n}(_2.default);\n\nSpring.defaultProps = {\n  stiffness: 100,\n  damping: 10,\n  mass: 1.0,\n  velocity: 0.0,\n  from: 0.0,\n  to: 0.0,\n  restSpeed: 0.01,\n  restDisplacement: 0.01\n};\n\nexports.default = function (props) {\n  return new Spring(props);\n};","map":{"version":3,"sources":["../../src/actions/spring.js"],"names":["Spring","defaultProps","stiffness","damping","mass","velocity","from","to","restSpeed","restDisplacement","onStart","update","delta","initialVelocity","timeDelta","t","dampingRatio","Math","angularFreq","expoDecay","x0","oscillation","envelope","fraction","position","isBelowVelocityThreshold","isBelowDisplacementThreshold","isActionComplete"],"mappings":"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","sourcesContent":["/*\n  The closed-form damped harmonic oscillating spring.\n  Or, spring.\n\n  This is a direct port of Adam Miskiewicz's (@skevy) React Animated\n  PR #15322 https://github.com/facebook/react-native/pull/15322/\n\n  ```\n  spring({\n    mass: 2,\n    damping: 10,\n    stiffness: 100,\n    to: 100\n  }).start();\n  ```\n\n  Adam Miskiewicz:\n  @skevy (twitter.com/skevy, github.com/skevy)\n */\nimport Action from './';\nimport { timeSinceLastFrame } from 'framesync';\n\nclass Spring extends Action {\n  static defaultProps = {\n    stiffness: 100,\n    damping: 10,\n    mass: 1.0,\n    velocity: 0.0,\n    from: 0.0,\n    to: 0.0,\n    restSpeed: 0.01,\n    restDisplacement: 0.01\n  };\n\n  onStart() {\n    const { velocity, to, from } = this.props;\n    this.t = 0;\n    this.initialVelocity = velocity ? velocity / 1000 : 0.0;\n    this.isComplete = false;\n    this.delta = to - from;\n  }\n\n  update() {\n    const { stiffness, damping, mass, from, to, restSpeed, restDisplacement } = this.props;\n    const { delta, initialVelocity } = this;\n\n    const timeDelta = timeSinceLastFrame() / 1000;\n    const t = this.t = this.t + timeDelta;\n\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const angularFreq = Math.sqrt(stiffness / mass);\n    const expoDecay = angularFreq * Math.sqrt(1.0 - (dampingRatio * dampingRatio));\n\n    const x0 = 1;\n    let oscillation = 0.0;\n\n    // Underdamped\n    if (dampingRatio < 1) {\n      const envelope = Math.exp(-dampingRatio * angularFreq * t);\n      oscillation = envelope * (((initialVelocity + dampingRatio * angularFreq * x0) / expoDecay) * Math.sin(expoDecay * t) + (x0 * Math.cos(expoDecay * t)));\n      this.velocity = (envelope * ((Math.cos(expoDecay * t) * (initialVelocity + dampingRatio * angularFreq * x0)) - (expoDecay * x0 * Math.sin(expoDecay * t))) -\n        ((dampingRatio * angularFreq * envelope) * ((((Math.sin(expoDecay * t) * (initialVelocity + dampingRatio * angularFreq * x0)) ) / expoDecay) + (x0 * Math.cos(expoDecay * t)))));\n\n    // Critically damped\n    } else {\n      const envelope = Math.exp(-angularFreq * t);\n      oscillation = envelope * (x0 + (initialVelocity + (angularFreq * x0)) * t);\n      this.velocity = envelope * ((t * initialVelocity * angularFreq) - (t * x0 * (angularFreq * angularFreq)) + initialVelocity);\n    }\n\n    const fraction = 1 - oscillation;\n    let position = from + fraction * delta;\n\n    // Check if simulation is complete\n    // We do this here instead of `isActionComplete` as it allows us\n    // to clamp to end during update)\n    const isBelowVelocityThreshold = Math.abs(this.velocity) <= restSpeed;\n    const isBelowDisplacementThreshold = Math.abs(to - position) <= restDisplacement;\n    this.isComplete = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n\n    if (this.isComplete) {\n      position = to;\n    }\n\n    return position;\n  }\n\n  isActionComplete() {\n    return this.isComplete;\n  }\n}\n\nexport default (props) => new Spring(props);\n"]},"metadata":{},"sourceType":"script"}