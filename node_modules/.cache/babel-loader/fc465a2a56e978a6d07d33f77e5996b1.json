{"ast":null,"code":"'use strict';\n/**\n * Context used during authentication\n *\n * @property {Connection} connection The connection to authenticate\n * @property {MongoCredentials} credentials The credentials to use for authentication\n * @property {object} options The options passed to the `connect` method\n * @property {object?} response The response of the initial handshake\n * @property {Buffer?} nonce A random nonce generated for use in an authentication conversation\n */\n\nclass AuthContext {\n  constructor(connection, credentials, options) {\n    this.connection = connection;\n    this.credentials = credentials;\n    this.options = options;\n  }\n\n}\n\nclass AuthProvider {\n  constructor(bson) {\n    this.bson = bson;\n  }\n  /**\n   * Prepare the handshake document before the initial handshake.\n   *\n   * @param {object} handshakeDoc The document used for the initial handshake on a connection\n   * @param {AuthContext} authContext Context for authentication flow\n   * @param {function} callback\n   */\n\n\n  prepare(handshakeDoc, context, callback) {\n    callback(undefined, handshakeDoc);\n  }\n  /**\n   * Authenticate\n   *\n   * @param {AuthContext} context A shared context for authentication flow\n   * @param {authResultCallback} callback The callback to return the result from the authentication\n   */\n\n\n  auth(context, callback) {\n    callback(new TypeError('`auth` method must be overridden by subclass'));\n  }\n\n}\n/**\n * This is a result from an authentication provider\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\n\nmodule.exports = {\n  AuthContext,\n  AuthProvider\n};","map":null,"metadata":{},"sourceType":"script"}