{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _ = require('./');\n\nvar _2 = _interopRequireDefault(_);\n\nvar _framesync = require('framesync');\n\nvar _calc = require('../inc/calc');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Physics = function (_Action) {\n  _inherits(Physics, _Action);\n\n  function Physics() {\n    _classCallCheck(this, Physics);\n\n    return _possibleConstructorReturn(this, _Action.apply(this, arguments));\n  }\n\n  Physics.prototype.update = function update() {\n    var _props = this.props,\n        autoStopSpeed = _props.autoStopSpeed,\n        acceleration = _props.acceleration,\n        friction = _props.friction,\n        velocity = _props.velocity,\n        spring = _props.spring,\n        to = _props.to;\n    var newVelocity = velocity;\n    var elapsed = (0, _framesync.timeSinceLastFrame)(); // Apply acceleration to velocity\n\n    if (acceleration) {\n      newVelocity += (0, _calc.speedPerFrame)(acceleration, elapsed);\n    } // Apply friction to velocity\n\n\n    if (friction) {\n      newVelocity *= Math.pow(1 - friction, elapsed / 100);\n    }\n\n    if (spring && to !== undefined) {\n      var distanceToTarget = to - this.current;\n      newVelocity += distanceToTarget * (0, _calc.speedPerFrame)(spring, elapsed);\n    } // Apply velocity\n\n\n    this.current += (0, _calc.speedPerFrame)(newVelocity, elapsed);\n    this.props.velocity = newVelocity; // Check if simulation is complete\n    // We do this here instead of `isActionComplete` as it allows us\n    // to clamp during this update\n\n    this.isComplete = autoStopSpeed !== false && (!newVelocity || Math.abs(newVelocity) <= autoStopSpeed);\n\n    if (this.isComplete && spring) {\n      this.current = to;\n    }\n\n    return this.current;\n  };\n\n  Physics.prototype.isActionComplete = function isActionComplete() {\n    return this.isComplete;\n  };\n\n  return Physics;\n}(_2.default);\n\nPhysics.defaultProps = {\n  acceleration: 0,\n  friction: 0,\n  velocity: 0,\n  autoStopSpeed: 0.001\n};\n\nexports.default = function (props) {\n  return new Physics(props);\n};","map":{"version":3,"sources":["../../src/actions/physics.js"],"names":["Physics","defaultProps","acceleration","friction","velocity","autoStopSpeed","update","spring","to","newVelocity","elapsed","distanceToTarget","Math","isActionComplete"],"mappings":";;;;AAAA,IAAA,CAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,O;;;;;;;;;oBAQJM,M,qBAAS;AAAA,QAAA,MAAA,GACiE,KADjE,KAAA;AAAA,QACCD,aADD,GAAA,MAAA,CAAA,aAAA;AAAA,QACgBH,YADhB,GAAA,MAAA,CAAA,YAAA;AAAA,QAC8BC,QAD9B,GAAA,MAAA,CAAA,QAAA;AAAA,QACwCC,QADxC,GAAA,MAAA,CAAA,QAAA;AAAA,QACkDG,MADlD,GAAA,MAAA,CAAA,MAAA;AAAA,QAC0DC,EAD1D,GAAA,MAAA,CAAA,EAAA;AAEP,QAAIC,WAAAA,GAAJ,QAAA;AACA,QAAMC,OAAAA,GAAU,CAAA,GAAA,UAAA,CAAhB,kBAAgB,GAAhB,CAHO,CAKP;;AACA,QAAA,YAAA,EAAkB;AAChBD,MAAAA,WAAAA,IAAe,CAAA,GAAA,KAAA,CAAA,aAAA,EAAA,YAAA,EAAfA,OAAe,CAAfA;AACD,KARM,CAUP;;;AACA,QAAA,QAAA,EAAc;AACZA,MAAAA,WAAAA,IAAAA,IAAAA,CAAAA,GAAAA,CAAgB,IAAhBA,QAAAA,EAAkCC,OAAAA,GAAlCD,GAAAA,CAAAA;AACD;;AAED,QAAIF,MAAAA,IAAUC,EAAAA,KAAd,SAAA,EAAgC;AAC9B,UAAMG,gBAAAA,GAAmBH,EAAAA,GAAK,KAA9B,OAAA;AACAC,MAAAA,WAAAA,IAAeE,gBAAAA,GAAmB,CAAA,GAAA,KAAA,CAAA,aAAA,EAAA,MAAA,EAAlCF,OAAkC,CAAlCA;AACD,KAlBM,CAoBP;;;AACA,SAAA,OAAA,IAAgB,CAAA,GAAA,KAAA,CAAA,aAAA,EAAA,WAAA,EAAhB,OAAgB,CAAhB;AACA,SAAA,KAAA,CAAA,QAAA,GAAA,WAAA,CAtBO,CAwBP;AACA;AACA;;AACA,SAAA,UAAA,GAAmBJ,aAAAA,KAAAA,KAAAA,KAA4B,CAAA,WAAA,IAAgBO,IAAAA,CAAAA,GAAAA,CAAAA,WAAAA,KAA/D,aAAmBP,CAAnB;;AAEA,QAAI,KAAA,UAAA,IAAJ,MAAA,EAA+B;AAC7B,WAAA,OAAA,GAAA,EAAA;AACD;;AAED,WAAO,KAAP,OAAA;;;oBAGFQ,gB,+BAAmB;AACjB,WAAO,KAAP,UAAA;;;;;;AA7CEb,O,CACGC,YADHD,GACkB;AACpBE,EAAAA,YAAAA,EADoB,CAAA;AAEpBC,EAAAA,QAAAA,EAFoB,CAAA;AAGpBC,EAAAA,QAAAA,EAHoB,CAAA;AAIpBC,EAAAA,aAAAA,EAAe;AAJK,CADlBL;;kBAiDS,UAAA,KAAA,EAAA;AAAA,SAAW,IAAA,OAAA,CAAX,KAAW,CAAX","sourcesContent":["import Action from './';\nimport { timeSinceLastFrame } from 'framesync';\nimport { speedPerFrame } from '../inc/calc';\n\nclass Physics extends Action {\n  static defaultProps = {\n    acceleration: 0,\n    friction: 0,\n    velocity: 0,\n    autoStopSpeed: 0.001\n  }\n\n  update() {\n    const { autoStopSpeed, acceleration, friction, velocity, spring, to } = this.props;\n    let newVelocity = velocity;\n    const elapsed = timeSinceLastFrame();\n\n    // Apply acceleration to velocity\n    if (acceleration) {\n      newVelocity += speedPerFrame(acceleration, elapsed);\n    }\n\n    // Apply friction to velocity\n    if (friction) {\n      newVelocity *= (1 - friction) ** (elapsed / 100);\n    }\n\n    if (spring && to !== undefined) {\n      const distanceToTarget = to - this.current;\n      newVelocity += distanceToTarget * speedPerFrame(spring, elapsed);\n    }\n\n    // Apply velocity\n    this.current += speedPerFrame(newVelocity, elapsed);\n    this.props.velocity = newVelocity;\n\n    // Check if simulation is complete\n    // We do this here instead of `isActionComplete` as it allows us\n    // to clamp during this update\n    this.isComplete = (autoStopSpeed !== false && (!newVelocity || Math.abs(newVelocity) <= autoStopSpeed));\n\n    if (this.isComplete && spring) {\n      this.current = to;\n    }\n\n    return this.current;\n  }\n\n  isActionComplete() {\n    return this.isComplete;\n  }\n}\n\nexport default (props) => new Physics(props);\n"]},"metadata":{},"sourceType":"script"}