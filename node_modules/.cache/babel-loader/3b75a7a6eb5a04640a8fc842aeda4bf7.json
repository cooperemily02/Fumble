{"ast":null,"code":"import _slicedToArray from\"/Users/aramaswamy/Desktop/Fumble/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useMemo}from'react';// import TinderCard from '../react-tinder-card/index'\nimport TinderCard from'react-tinder-card';var db=[{name:'Richard Hendricks',url:'./img/richard.jpg'},{name:'Erlich Bachman',url:'./img/erlich.jpg'},{name:'Monica Hall',url:'./img/monica.jpg'},{name:'Jared Dunn',url:'./img/jared.jpg'},{name:'Dinesh Chugtai',url:'./img/dinesh.jpg'}];console.log('hello world');var alreadyRemoved=[];var charactersState=db;// This fixes issues with updating characters state forcing it to use the current state and not the state that was active when the card was created.\nfunction Advanced(){var _useState=useState(db),_useState2=_slicedToArray(_useState,2),characters=_useState2[0],setCharacters=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),lastDirection=_useState4[0],setLastDirection=_useState4[1];var childRefs=useMemo(function(){return Array(db.length).fill(0).map(function(i){return React.createRef();});},[]);var swiped=function swiped(direction,nameToDelete){console.log('Tested: '+nameToDelete);setLastDirection(direction);alreadyRemoved.push(nameToDelete);};var outOfFrame=function outOfFrame(name){console.log(name+' left the screen!');charactersState=charactersState.filter(function(character){return character.name!==name;});setCharacters(charactersState);};var swipedRight=[];var swipe=function swipe(dir){console.log(dir);var cardsLeft=characters.filter(function(person){return!alreadyRemoved.includes(person.name);});if(cardsLeft.length){if(dir='right'){// swipedRight.push(person.name)\nvar length=swipedRight.length;console.log(swipedRight);}var toBeRemoved=cardsLeft[cardsLeft.length-1].name;// Find the card object to be removed\nvar index=db.map(function(person){return person.name;}).indexOf(toBeRemoved);// Find the index of which to make the reference to\nalreadyRemoved.push(toBeRemoved);// Make sure the next card gets removed next time if this card do not have time to exit the screen\nchildRefs[index].current.swipe(dir);// Swipe the card!\n}};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"link\",{href:\"https://fonts.googleapis.com/css?family=Damion&display=swap\",rel:\"stylesheet\"}),/*#__PURE__*/React.createElement(\"link\",{href:\"https://fonts.googleapis.com/css?family=Alatsi&display=swap\",rel:\"stylesheet\"}),/*#__PURE__*/React.createElement(\"h1\",null,\"React Tinder Card\"),/*#__PURE__*/React.createElement(\"div\",{className:\"cardContainer\"},characters.map(function(character,index){return/*#__PURE__*/React.createElement(TinderCard,{ref:childRefs[index],className:\"swipe\",key:character.name,onSwipe:function onSwipe(dir){return swiped(dir,character.name);},onCardLeftScreen:function onCardLeftScreen(){return outOfFrame(character.name);}},/*#__PURE__*/React.createElement(\"div\",{style:{backgroundImage:'url('+character.url+')'},className:\"card\"},/*#__PURE__*/React.createElement(\"h3\",null,character.name)));})),/*#__PURE__*/React.createElement(\"div\",{className:\"buttons\"},/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return swipe('left');}},\"Swipe left!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return swipe('right');}},\"Swipe right!\")),lastDirection?/*#__PURE__*/React.createElement(\"h2\",{key:lastDirection,className:\"infoText\"},\"You swiped \",lastDirection):/*#__PURE__*/React.createElement(\"h2\",{className:\"infoText\"},\"Swipe a card or press a button to get started!\"));}export default Advanced;","map":{"version":3,"sources":["/Users/aramaswamy/Desktop/Fumble/src/examples/Advanced.js"],"names":["React","useState","useMemo","TinderCard","db","name","url","console","log","alreadyRemoved","charactersState","Advanced","characters","setCharacters","lastDirection","setLastDirection","childRefs","Array","length","fill","map","i","createRef","swiped","direction","nameToDelete","push","outOfFrame","filter","character","swipedRight","swipe","dir","cardsLeft","person","includes","toBeRemoved","index","indexOf","current","backgroundImage"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\n// import TinderCard from '../react-tinder-card/index'\nimport TinderCard from 'react-tinder-card'\n\nconst db = [\n  {\n    name: 'Richard Hendricks',\n    url: './img/richard.jpg'\n  },\n  {\n    name: 'Erlich Bachman',\n    url: './img/erlich.jpg'\n  },\n  {\n    name: 'Monica Hall',\n    url: './img/monica.jpg'\n  },\n  {\n    name: 'Jared Dunn',\n    url: './img/jared.jpg'\n  },\n  {\n    name: 'Dinesh Chugtai',\n    url: './img/dinesh.jpg'\n  }\n]\nconsole.log('hello world')\nconst alreadyRemoved = []\nlet charactersState = db // This fixes issues with updating characters state forcing it to use the current state and not the state that was active when the card was created.\n\nfunction Advanced () {\n  const [characters, setCharacters] = useState(db)\n  const [lastDirection, setLastDirection] = useState()\n\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => React.createRef()), [])\n\n  const swiped = (direction, nameToDelete) => {\n    console.log('Tested: ' + nameToDelete)\n    setLastDirection(direction)\n    alreadyRemoved.push(nameToDelete)\n  }\n\n  const outOfFrame = (name) => {\n    console.log(name + ' left the screen!')\n    charactersState = charactersState.filter(character => character.name !== name)\n    setCharacters(charactersState)\n  }\n\n  var swipedRight = []\n  const swipe = (dir) => {\n    console.log(dir)\n    const cardsLeft = characters.filter(person => !alreadyRemoved.includes(person.name))\n    if (cardsLeft.length) {\n      if(dir = 'right'){\n        // swipedRight.push(person.name)\n        var length = swipedRight.length\n        console.log(swipedRight)\n      }\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].name // Find the card object to be removed\n      const index = db.map(person => person.name).indexOf(toBeRemoved) // Find the index of which to make the reference to\n      alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n      childRefs[index].current.swipe(dir) // Swipe the card!\n    }\n  }\n\n  return (\n    <div>\n      <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n      <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />\n      <h1>React Tinder Card</h1>\n      <div className='cardContainer'>\n        {characters.map((character, index) =>\n          <TinderCard ref={childRefs[index]} className='swipe' key={character.name} onSwipe={(dir) => swiped(dir, character.name)} onCardLeftScreen={() => outOfFrame(character.name)}>\n            <div style={{ backgroundImage: 'url(' + character.url + ')' }} className='card'>\n              <h3>{character.name}</h3>\n            </div>\n          </TinderCard>\n        )}\n      </div>\n      <div className='buttons'>\n        <button onClick={() => swipe('left')}>Swipe left!</button>\n        <button onClick={() => swipe('right')}>Swipe right!</button>\n      </div>\n      {lastDirection ? <h2 key={lastDirection} className='infoText'>You swiped {lastDirection}</h2> : <h2 className='infoText'>Swipe a card or press a button to get started!</h2>}\n    </div>\n  )\n}\n\nexport default Advanced"]},"metadata":{},"sourceType":"module"}