{"ast":null,"code":"'use strict'; // Resolves the default auth mechanism according to\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\n\nfunction getDefaultAuthMechanism(ismaster) {\n  if (ismaster) {\n    // If ismaster contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(ismaster.saslSupportedMechs)) {\n      return ismaster.saslSupportedMechs.indexOf('SCRAM-SHA-256') >= 0 ? 'scram-sha-256' : 'scram-sha-1';\n    } // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n\n\n    if (ismaster.maxWireVersion >= 3) {\n      return 'scram-sha-1';\n    }\n  } // Default for wireprotocol < 3\n\n\n  return 'mongocr';\n}\n/**\n * A representation of the credentials used by MongoDB\n * @class\n * @property {string} mechanism The method used to authenticate\n * @property {string} [username] The username used for authentication\n * @property {string} [password] The password used for authentication\n * @property {string} [source] The database that the user should authenticate against\n * @property {object} [mechanismProperties] Special properties used by some types of auth mechanisms\n */\n\n\nclass MongoCredentials {\n  /**\n   * Creates a new MongoCredentials object\n   * @param {object} [options]\n   * @param {string} [options.username] The username used for authentication\n   * @param {string} [options.password] The password used for authentication\n   * @param {string} [options.source] The database that the user should authenticate against\n   * @param {string} [options.mechanism] The method used to authenticate\n   * @param {object} [options.mechanismProperties] Special properties used by some types of auth mechanisms\n   */\n  constructor(options) {\n    options = options || {};\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source || options.db;\n    this.mechanism = options.mechanism || 'default';\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (this.username == null && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (this.password == null && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN) {\n        this.mechanismProperties.AWS_SESSION_TOKEN = process.env.AWS_SESSION_TOKEN;\n      }\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /**\n   * Determines if two MongoCredentials objects are equivalent\n   * @param {MongoCredentials} other another MongoCredentials object\n   * @returns {boolean} true if the two objects are equal.\n   */\n\n\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param {Object} [ismaster] An ismaster response from the server\n   * @returns {MongoCredentials}\n   */\n\n\n  resolveAuthMechanism(ismaster) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(ismaster),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  MongoCredentials\n};","map":null,"metadata":{},"sourceType":"script"}