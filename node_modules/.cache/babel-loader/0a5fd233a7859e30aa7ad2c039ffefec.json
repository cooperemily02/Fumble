{"ast":null,"code":"'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst ReadPreference = require('../core').ReadPreference;\n\nconst maxWireVersion = require('../core/utils').maxWireVersion;\n\nconst MongoError = require('../core/error').MongoError;\n\nclass FindOperation extends OperationBase {\n  constructor(collection, ns, command, options) {\n    super(options);\n    this.ns = ns;\n    this.cmd = command;\n    this.readPreference = ReadPreference.resolve(collection, this.options);\n  }\n\n  execute(server, callback) {\n    // copied from `CommandOperationV2`, to be subclassed in the future\n    this.server = server;\n\n    if (typeof this.cmd.allowDiskUse !== 'undefined' && maxWireVersion(server) < 4) {\n      callback(new MongoError('The `allowDiskUse` option is not supported on MongoDB < 3.2'));\n      return;\n    } // TOOD: use `MongoDBNamespace` through and through\n\n\n    const cursorState = this.cursorState || {};\n    server.query(this.ns.toString(), this.cmd, cursorState, this.options, callback);\n  }\n\n}\n\ndefineAspects(FindOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXECUTE_WITH_SELECTION]);\nmodule.exports = FindOperation;","map":null,"metadata":{},"sourceType":"script"}