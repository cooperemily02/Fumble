{"ast":null,"code":"'use strict';\n\nconst Snappy = require('../connection/utils').retrieveSnappy();\n\nconst zlib = require('zlib');\n\nconst compressorIDs = {\n  snappy: 1,\n  zlib: 2\n};\nconst uncompressibleCommands = new Set(['ismaster', 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']); // Facilitate compressing a message using an agreed compressor\n\nfunction compress(self, dataToBeCompressed, callback) {\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      Snappy.compress(dataToBeCompressed, callback);\n      break;\n\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      var zlibOptions = {};\n\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n\n    default:\n      throw new Error('Attempt to compress message using unknown compressor \"' + self.options.agreedCompressor + '\".');\n  }\n} // Decompress a message using the given compressor\n\n\nfunction decompress(compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > compressorIDs.length) {\n    throw new Error('Server sent message compressed using an unsupported compressor. (Received compressor ID ' + compressorID + ')');\n  }\n\n  switch (compressorID) {\n    case compressorIDs.snappy:\n      Snappy.uncompress(compressedData, callback);\n      break;\n\n    case compressorIDs.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n\n    default:\n      callback(null, compressedData);\n  }\n}\n\nmodule.exports = {\n  compressorIDs,\n  uncompressibleCommands,\n  compress,\n  decompress\n};","map":null,"metadata":{},"sourceType":"script"}