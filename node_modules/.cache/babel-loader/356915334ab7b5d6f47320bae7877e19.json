{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst decorateCommand = require('../utils').decorateCommand;\n\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\n\nconst executeCommand = require('./db_ops').executeCommand;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst ReadPreference = require('../core').ReadPreference;\n\nconst toError = require('../utils').toError;\n/**\n * Execute a geo search using a geo haystack index on a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n * @property {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n * @property {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\n */\n\n\nclass GeoHaystackSearchOperation extends OperationBase {\n  /**\n   * Construct a GeoHaystackSearch operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n   * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n   * @param {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\n   */\n  constructor(collection, x, y, options) {\n    super(options);\n    this.collection = collection;\n    this.x = x;\n    this.y = y;\n  }\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n\n\n  execute(callback) {\n    const coll = this.collection;\n    const x = this.x;\n    const y = this.y;\n    let options = this.options; // Build command object\n\n    let commandObject = {\n      geoSearch: coll.collectionName,\n      near: [x, y]\n    }; // Remove read preference from hash if it exists\n\n    commandObject = decorateCommand(commandObject, options, ['readPreference', 'session']);\n    options = Object.assign({}, options); // Ensure we have the right read preference inheritance\n\n    options.readPreference = ReadPreference.resolve(coll, options); // Do we have a readConcern specified\n\n    decorateWithReadConcern(commandObject, coll, options); // Execute the command\n\n    executeCommand(coll.s.db, commandObject, options, (err, res) => {\n      if (err) return handleCallback(callback, err);\n      if (res.err || res.errmsg) handleCallback(callback, toError(res)); // should we only be returning res.results here? Not sure if the user\n      // should see the other return information\n\n      handleCallback(callback, null, res);\n    });\n  }\n\n}\n\ndefineAspects(GeoHaystackSearchOperation, Aspect.READ_OPERATION);\nmodule.exports = GeoHaystackSearchOperation;","map":null,"metadata":{},"sourceType":"script"}