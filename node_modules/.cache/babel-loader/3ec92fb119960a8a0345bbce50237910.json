{"ast":null,"code":"var _jsxFileName = \"/Users/aramaswamy/Desktop/Fumble/src/examples/Simple.js\";\nimport React, { useState, useEffect } from 'react'; // import TinderCard from '../react-tinder-card/index'\n\nimport TinderCard from 'react-tinder-card';\nimport ReactDOM from 'react-dom';\n\nconst MongoClient = require('mongodb').MongoClient; //MongoClient.connect('mongodb+srv://shambhavir:Success2021!!@cluster0.xrzxq.mongodb.net/fumble?retryWrites=true&w=majority'\n\n\nvar queried = false;\nconst db = [{\n  name: 'Taco Bell',\n  url: './img/richard.jpg',\n  price: 1\n}, {\n  name: 'Olive Garden',\n  url: './img/erlich.jpg',\n  price: 2\n}, {\n  name: 'Chipotle',\n  url: './img/monica.jpg',\n  price: 3\n}, {\n  name: 'Dominoes',\n  url: './img/jared.jpg',\n  price: 4\n}, {\n  name: 'Wawa',\n  url: './img/dinesh.jpg',\n  price: 5\n}, {\n  name: 'comfort food',\n  type: 'category'\n}]; // function callAPI () {\n//   if (true) {\n//     fetch('https://api.geoapify.com/v2/places?categories=commercial.food_and_drink&filter=circle:-72.519867,42.375801,5000&limit=20&apiKey=1af6a8fa67c94cba9c73377e2866a995').then(function (response) {\n//       return response.json();\n//     }).then(function (result) {\n//       for(var i = 0; i<result.features.length; i++){\n//         arrayofplaces.push({name: result.features[i].properties.name, url: './img/richard.jpg', price: 1})\n//       }\n//     });\n//   }\n// }\n// var swipedRight = []\n// var currentChoices = [0, 0, 0, 0] \n// var swipes = 0\n\nfunction Simple() {\n  console.log(\"called\");\n  var temparray = [];\n  const [arrayofplaces, setarray] = useState([{\n    name: 'No Name',\n    url: '',\n    price_saved: 0\n  }]);\n  useEffect(() => {\n    if (!queried) {\n      fetch('https://api.discountapi.com/v2/deals?category_slugs=restaurants&location=longmeadow&api_key=KiyYblAt').then(function (response) {\n        return response.json();\n      }).then(function (result) {\n        console.log(result);\n        queried = true;\n\n        for (var i = 0; i < result.deals.length; i++) {\n          temparray.push({\n            name: result.deals[i].deal.short_title,\n            url: result.deals[i].deal.image_url,\n            price_saved: result.deals[i].deal.discount_amount\n          });\n        }\n\n        setarray(temparray);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"readable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css?family=Damion&display=swap\",\n    rel: \"stylesheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css?family=Alatsi&display=swap\",\n    rel: \"stylesheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Staatliches&display=swap\",\n    rel: \"stylesheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"Swipe right on your fave deals!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cardContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, arrayofplaces.map(place => /*#__PURE__*/React.createElement(TinderCard, {\n    className: \"swipe\",\n    key: place.name,\n    onSwipe: dir => swiped(dir, place.name, place.price_saved),\n    onCardLeftScreen: () => outOfFrame(place.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundImage: 'url(' + place.url + ')'\n    },\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, place.name))))), lastDirection ? /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"infoText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 24\n    }\n  }, \"You swiped \", lastDirection) : /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"infoText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 83\n    }\n  }));\n} // const arrayofplaces = useState([])\n// callAPI(() =>{\n//   fetch('https://api.geoapify.com/v2/places?categories=commercial.food_and_drink&filter=circle:-72.519867,42.375801,5000&limit=20&apiKey=1af6a8fa67c94cba9c73377e2866a995').then(function (response) {\n//     return response.json();\n//   }).then(function (result) {\n//     for(var i = 0; i<result.features.length; i++){\n//       arrayofplaces.push({name: result.features[i].properties.name, url: './img/richard.jpg', price: 1})\n//     }\n//   });\n// }, []);\n// console.log(arrayofplaces)\n// const characters = db\n\n\nconst [lastDirection, setLastDirection] = useState(); // var characters = []\n// characters = arrayofplaces\n\nvar swipedRight = [];\nvar price_saved_vals = [];\nvar swipes = 0;\n\nconst swiped = (direction, nameToDelete, price_saved) => {\n  if (direction === 'right') {\n    swipes++;\n    swipedRight.push({\n      name: nameToDelete,\n      savings: price_saved\n    });\n    price_saved_vals.push(price_saved); // var length = swipedRight.length\n\n    console.log(swipedRight); // console.log('Test')\n    // give users a minimum number of swipes before giving them the best deal\n    // var i = 0\n    // while(i < 4)\n    // {\n    //   swipes++\n    //   swipedRight.push(nameToDelete)\n    //   var length = swipedRight.length\n    //   //console.log(swipedRight)\n    //   //console.log('Test')\n    //   currentChoices[i] = db.price \n    //   i++; \n    // }\n    // for(i = 0; i < currentChoices.length; i++)\n    //   console.log(currentChoices[i]); \n\n    if (swipes === 4) {\n      console.log('done');\n      var modal = document.getElementById(\"myModal\"); // Get the <span> element that closes the modal\n\n      var span = document.getElementsByClassName(\"close\")[0];\n      modal.style.display = \"block\"; // When the user clicks on <span> (x), close the modal\n\n      span.onclick = function () {\n        modal.style.display = \"none\";\n      };\n    }\n  } // const toBeRemoved = cardsLeft[cardsLeft.length - 1].name // Find the card object to be removed\n  // const index = db.map(person => person.name).indexOf(toBeRemoved) // Find the index of which to make the reference to\n  // alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n  // childRefs[index].current.swipe(dir) // Swipe the card!\n\n\n  console.log('removing: ' + nameToDelete);\n  setLastDirection(direction);\n};\n\nconst outOfFrame = name => {\n  console.log(name + ' left the screen!');\n};\n\nexport default Simple;","map":{"version":3,"sources":["/Users/aramaswamy/Desktop/Fumble/src/examples/Simple.js"],"names":["React","useState","useEffect","TinderCard","ReactDOM","MongoClient","require","queried","db","name","url","price","type","Simple","console","log","temparray","arrayofplaces","setarray","price_saved","fetch","then","response","json","result","i","deals","length","push","deal","short_title","image_url","discount_amount","map","place","dir","swiped","outOfFrame","backgroundImage","lastDirection","setLastDirection","swipedRight","price_saved_vals","swipes","direction","nameToDelete","savings","modal","document","getElementById","span","getElementsByClassName","style","display","onclick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n// import TinderCard from '../react-tinder-card/index'\nimport TinderCard from 'react-tinder-card'\nimport ReactDOM from 'react-dom';\nconst MongoClient = require('mongodb').MongoClient\n//MongoClient.connect('mongodb+srv://shambhavir:Success2021!!@cluster0.xrzxq.mongodb.net/fumble?retryWrites=true&w=majority'\nvar queried = false;\nconst db = [\n  {\n    name: 'Taco Bell',\n    url: './img/richard.jpg',\n    price: 1\n  },\n  {\n    name: 'Olive Garden',\n    url: './img/erlich.jpg',\n    price: 2\n  },\n  {\n    name: 'Chipotle',\n    url: './img/monica.jpg',\n    price: 3\n  },\n  {\n    name: 'Dominoes',\n    url: './img/jared.jpg',\n    price: 4\n  },\n  {\n    name: 'Wawa',\n    url: './img/dinesh.jpg',\n    price: 5\n  },\n  {\n    name: 'comfort food',\n    type: 'category'\n  }\n]\n\n// function callAPI () {\n//   if (true) {\n//     fetch('https://api.geoapify.com/v2/places?categories=commercial.food_and_drink&filter=circle:-72.519867,42.375801,5000&limit=20&apiKey=1af6a8fa67c94cba9c73377e2866a995').then(function (response) {\n//       return response.json();\n//     }).then(function (result) {\n//       for(var i = 0; i<result.features.length; i++){\n//         arrayofplaces.push({name: result.features[i].properties.name, url: './img/richard.jpg', price: 1})\n//       }\n//     });\n//   }\n// }\n\n// var swipedRight = []\n// var currentChoices = [0, 0, 0, 0] \n// var swipes = 0\nfunction Simple () {\n  console.log(\"called\")\n  var temparray = []\n  const [arrayofplaces, setarray] = useState([{name: 'No Name', url: '', price_saved: 0}])\n  useEffect(() => {\n        if  (!queried)  {\n              fetch('https://api.discountapi.com/v2/deals?category_slugs=restaurants&location=longmeadow&api_key=KiyYblAt').then(function (response) {\n                    return response.json();\n              }).then(function (result) {\n                    console.log(result)\n                    queried = true;\n                    for  (var i = 0; i  <  result.deals.length; i++)  {\n                          temparray.push({  name: result.deals[i].deal.short_title, url: result.deals[i].deal.image_url, price_saved: result.deals[i].deal.discount_amount  })\n                    }\n                    setarray(temparray)\n              });\n        }  \n   },[])\n   return (\n    <div className='readable'>\n      <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n      <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />\n      <link href='https://fonts.googleapis.com/css2?family=Staatliches&display=swap' rel='stylesheet' />\n      \n      <h1>Swipe right on your fave deals!</h1>\n      <div className='cardContainer'>\n        {arrayofplaces.map((place) =>\n          <TinderCard className='swipe' key={place.name} onSwipe={(dir) => swiped(dir, place.name, place.price_saved)} onCardLeftScreen={() => outOfFrame(place.name)}>\n            <div style={{ backgroundImage: 'url(' + place.url + ')' }} className='card'>\n              <h2>{place.name}</h2>\n            </div>\n          </TinderCard>\n        )}\n      </div>\n      {lastDirection ? <h2 className='infoText'>You swiped {lastDirection}</h2> : <h2 className='infoText' />}\n    </div>\n  )\n}\n  \n  \n    \n  // const arrayofplaces = useState([])\n  // callAPI(() =>{\n  //   fetch('https://api.geoapify.com/v2/places?categories=commercial.food_and_drink&filter=circle:-72.519867,42.375801,5000&limit=20&apiKey=1af6a8fa67c94cba9c73377e2866a995').then(function (response) {\n  //     return response.json();\n  //   }).then(function (result) {\n  //     for(var i = 0; i<result.features.length; i++){\n  //       arrayofplaces.push({name: result.features[i].properties.name, url: './img/richard.jpg', price: 1})\n  //     }\n  //   });\n  // }, []);\n  // console.log(arrayofplaces)\n // const characters = db\n  const [lastDirection, setLastDirection] = useState()\n  // var characters = []\n  // characters = arrayofplaces\n\n  var swipedRight = []\n  var price_saved_vals = []\n  var swipes = 0\n  const swiped = (direction, nameToDelete, price_saved) => {\n      if(direction === 'right'){\n        swipes++\n        swipedRight.push({name: nameToDelete, savings:price_saved})\n        price_saved_vals.push(price_saved)\n        // var length = swipedRight.length\n        console.log(swipedRight)\n        // console.log('Test')\n        // give users a minimum number of swipes before giving them the best deal\n        // var i = 0\n        // while(i < 4)\n        // {\n        //   swipes++\n        //   swipedRight.push(nameToDelete)\n        //   var length = swipedRight.length\n        //   //console.log(swipedRight)\n        //   //console.log('Test')\n        //   currentChoices[i] = db.price \n        //   i++; \n        // }\n        \n        // for(i = 0; i < currentChoices.length; i++)\n        //   console.log(currentChoices[i]); \n        if(swipes === 4) {\n          console.log('done')\n          var modal = document.getElementById(\"myModal\");\n          // Get the <span> element that closes the modal\n          var span = document.getElementsByClassName(\"close\")[0];\n          modal.style.display = \"block\";\n          // When the user clicks on <span> (x), close the modal\n          span.onclick = function() {\n              modal.style.display = \"none\";\n          }\n        }\n\n      }\n      // const toBeRemoved = cardsLeft[cardsLeft.length - 1].name // Find the card object to be removed\n      // const index = db.map(person => person.name).indexOf(toBeRemoved) // Find the index of which to make the reference to\n      // alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n      // childRefs[index].current.swipe(dir) // Swipe the card!\n    console.log('removing: ' + nameToDelete)\n    setLastDirection(direction)\n  }\n\n  const outOfFrame = (name) => {\n    console.log(name + ' left the screen!')\n  }\nexport default Simple\n"]},"metadata":{},"sourceType":"module"}